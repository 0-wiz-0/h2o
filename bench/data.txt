);
emitted
logs
path
on_config,
access-log,
h2o_config_define_command(c,
`format`
format))
yoml_get(node,
*fmt
self->num_elements
self->super.log_access
0644))
O_WRONLY
O_CREAT
fd:%s\n,
dup
command:%s\n,
(path[0]
&num_elements))
compile_log_format(fmt,
((elements
%b;
\%r\
(fmt
*fmt)
free(self->elements);
free(self->elements[i].suffix.base);
dispose(h2o_logger_t
(line_end
element->suffix.base,
assert(!unknown
ELEMENT_TYPE_BYTES_SENT:
0xff)
((req->version
req->method.len);
req->path.len)
RESERVE((req->method.len
req->processed_at.str->log,
'[';
RESERVE(H2O_TIMESTR_LOG_LEN
ELEMENT_TYPE_TIMESTAMP:
ELEMENT_TYPE_LOGNAME:
append_safe_string(pos,
RESERVE(len);
strlen(hostname);
NI_NUMERICHOST)
sizeof(hostname),
req->conn->peername.len,
255,
sprintf(pos,
htonl(sin->sin_addr.s_addr);
addr
(void*)req->conn->peername.addr;
*sin
AF_INET)
(req->conn->peername.addr
hostname[NI_MAXHOST];
ELEMENT_TYPE_REMOTE_ADDR:
ELEMENT_TYPE_EMPTY:
expand_line_buf(line,
pos)
element->suffix.len
self->elements
(element_index
LOG_ALLOCA_SIZE;
*line_end;
st_h2o_access_logger_t*)_self;
log_access(h2o_logger_t
new_size);
newpt;
cur_size);
h2o_malloc(new_size);
*newpt
LOG_ALLOCA_SIZE)
(cur_size
(new_size
new_size
required)
*line,
(0123456789abcdef)[*src
(0123456789abcdef)[(*src
'x';
*src;
('
*append_safe_string(char
free(elements);
sequence:
compile
NEW_ELEMENT
end-of-line
1].suffix.base[elements[num_elements
NEW_ELEMENT(ELEMENT_TYPE_EMPTY);
(elements
ELEMENT_TYPE_STATUS);
ELEMENT_TYPE_REQUEST_LINE);
TYPE_MAP('r',
TYPE_MAP('t',
ELEMENT_TYPE_REMOTE_USER);
TYPE_MAP('u',
ELEMENT_TYPE_LOGNAME);
ch:
++pt;
'\0')
(*pt
++num_elements;
h2o_buf_init(h2o_malloc(fmt_len
ty;
elements[num_elements].type
(num_elements
sizeof(*elements)
h2o_realloc(elements,
overruns)
fmt;
*pt
fmt_len
*compile_log_format(const
st_h2o_access_logger_t
suffix;
log_element_t
NUM_ELEMENT_TYPES
%r
ELEMENT_TYPE_REQUEST_LINE,
%t
ELEMENT_TYPE_TIMESTAMP,
ELEMENT_TYPE_REMOTE_USER,
ELEMENT_TYPE_LOGNAME,
%h
LOG_ALLOCA_SIZE
logger;
conf->loggers.size
sizeof(conf->loggers.entries[0]),
*logger
filter;
conf->filters.entries[conf->filters.size++]
conf->filters.size
sizeof(conf->filters.entries[0]),
conf->handlers.entries[conf->handlers.size++]
sizeof(conf->handlers.entries[0]),
(void*)&conf->handlers,
candidates);
of:
reached
(cand_str
cand_str[config_str_len]
config_str_len)
(strncasecmp(cand_str,
strlen(config_str);
node->data.scalar;
*cand_str;
*config_str,
vsscanf(node->data.scalar,
sscan_ret
sscan_ret;
fputc('\n',
vfprintf(stderr,
%s,
in
(cmd
[%s:%zu]
(config->hosts.size
cmd->description
cmd->cb
(void*)&configurator->commands,
**desc)
h2o_linklist_insert(&conf->configurators,
memset(c,
assert(sz
*c;
destroy_configurator(c);
(c->dispose
config->configurators.next);
h2o_linklist_is_empty(&config->configurators))
h2o_tolower(hostconf->hostname.base[i]);
hostname,
hostconf->hostname
config);
config->hosts.size++;
config->hosts.size
(void*)&config->hosts,
H2O_DEFAULT_HTTP2_MAX_CONCURRENT_REQUESTS_PER_CONNECTION;
H2O_DEFAULT_HTTP1_UPGRADE_TO_HTTP2;
config->max_request_entity_size
config->req_timeout
h2o_linklist_init_anchor(&config->configurators);
sizeof(*config));
DESTROY_LIST
host_config->loggers);
DESTROY_LIST(h2o_logger_t,
DESTROY_LIST(h2o_handler_t,
free(e);
memset(hostconf,
stream
on_config_http2_max_concurrent_requests_per_connection,
http2-max-concurrent-requests-per-connection,
ON));
NEW_ELEMENT(type);
HTTP/2,
unlimited));
limit-request-body,
H2O_TO_STR(H2O_DEFAULT_REQ_TIMEOUT)
on_config_request_timeout,
request-timeout,
configs);
per-host
on_config_paths,
h2o_config_create_configurator(conf,
files)
(h2o_config_get_configurator(conf,
on_config_http2_max_concurrent_requests_per_connection(h2o_configurator_command_t
on_config_http1_upgrade_to_http2(h2o_configurator_command_t
&ctx->globalconf->max_request_entity_size);
on_config_limit_request_body(h2o_configurator_command_t
timeout_in_secs
(h2o_config_scanf(cmd,
timeout_in_secs;
on_config_request_timeout(h2o_configurator_command_t
missing);
paths)
(yoml_get(value,
h2o_config_register_host(ctx->globalconf,
(node->data.mapping.size
H2O_CONFIGURATOR_FLAG_PATH,
&path;
h2o_buf_init(key->data.scalar,
ctx->hostconf->handlers.size;
num_handlers_before_config;
sizeof(node->data.mapping.elements[0]),
node->data.mapping.size,
qsort(node->data.mapping.elements,
(descending)
(representing
key
strcmp(x->key->data.scalar,
strcmp
ylen)
ylen
strlen(x->key->data.scalar),
sort_from_longer_paths(const
(deferred[i].cmd->cb(deferred[i].cmd,
(cmd->cb(cmd,
++num_deferred;
H2O_CONFIGURATOR_FLAG_DEFERRED)
H2O_CONFIGURATOR_FLAG_EXPECT_MAPPING)
sequence);
H2O_CONFIGURATOR_FLAG_EXPECT_SEQUENCE)
scalar);
H2O_CONFIGURATOR_FLAG_EXPECT_SCALAR)
(H2O_CONFIGURATOR_FLAG_EXPECT_SCALAR
flags_mask)
((cmd->flags
command:
key->data.scalar))
h2o_config_get_configurator(ctx->globalconf,
((cmd
command
node->data.mapping.elements[i].key,
setup_configurators(ctx,
node->data.mapping.size);
alloca(sizeof(*deferred)
MAPPING);
h2o_config_print_error(NULL,
*cmd;
flags_mask,
c->exit(c,
(c->exit
ctx)
c->enter(c,
(is_enter)
&ctx->globalconf->configurators;
is_enter)
setup_configurators(h2o_configurator_context_t
free(configurator->commands.entries);
configurator->dispose(configurator);
(configurator->dispose
ostream->next->do_send(ostream->next,
&req->_timeout_entry);
ostream);
ostr->do_send
ostr->next
bufs[i].len;
&req->_ostr_top);
req->host_config->filters.entries[0];
(req->host_config->filters.size
assert(req->_generator
((*handler)->on_req(*handler,
req->host_config->handlers.size;
req->host_config->hostname;
hostconf;
hostconf->hostname.len))
++hostconf)
ctx->global_config->hosts.size;
(ctx->global_config->hosts.size
ctx->global_config->hosts.entries;
&req->processed_at);
(*logger)->log_access((*logger),
++logger)
*hostconf,
**end
req->host_config->loggers.entries,
req->host_config
h2o_timeout_unlink(&req->_timeout_entry);
(void*)h2o_create_logger(host_config,
req->_ostr_top
(req->_ostr_top->stop
req->_generator->stop(req->_generator,
req->upgrade.base
sizeof(req->headers.entries[0])
src->headers.entries,
memcpy(req->headers.entries,
src->headers.size);
src->version;
COPY(path);
COPY(method);
(void*)sort_from_longer_paths);
COPY(authority);
req->buf.len
src->buf.base,
src->buf.len);
deferred_proceed_cb;
req->_timeout_entry.cb
req->conn
used)
(before
offsetof(h2o_req_t,
H2O_STRUCT_FROM_MEMBER(h2o_req_t,
8192
INITIAL_INBUFSZ
(int)(inbufcnt
upgrade);
conn->upgrade.cb
conn->upgrade.data
(void*)&sock->peername.addr;
expect
on_send_complete(conn->sock,
on_send_complete
memcpy(bufs
bufs[bufcnt++]
self->sent_headers)
flattened.base;
header->value.base,
header->name->len;
sizeof(configurator->commands.entries[0]),
header->name->len);
header->name->base,
connection);
req->res.content_length);
ctx->global_config->server_name.base,
%s\r\nserver:
HTTP/1.1
\r\n)
\r\nserver:
sizeof(HTTP/1.1
h2o_mempool_alloc(
flattened.base
crafted
headers_len
*header
req->conn->ctx;
flatten_headers(h2o_req_t
cb(data,
socket)
detaching
socket->data;
*socket,
on_upgrade_complete(h2o_socket_t
conn->req.http1_is_persistent)
&conn->_ostr_final.super);
assert(conn->req._ostr_top
on_send_next(h2o_socket_t
&conn->super.ctx->req_timeout,
reqread_on_timeout(h2o_timeout_entry_t
handle_incoming_request(conn);
(conn->_req_entity_reader
reqread_on_read(h2o_socket_t
detatching
destruct
conn->sock;
memcmp(conn->sock->input->bytes,
HTTP/2)
HTTP2_SIG
phr_parse_request
octet
(conn->super.ctx->global_config->http1_upgrade_to_http2)
PRI
with:
notify)
conn->_req_entity_reader->handle_incoming_entity(conn);
Request,
Invalid
fixup_request(conn,
inreqlen;
char**)&conn->req.path.base,
char**)&conn->req.method.base,
inreqlen,
phr_parse_request(
entity_body_header_index;
H2O_MAX_HEADERS;
headers[H2O_MAX_HEADERS];
reqlen,
defaults
0x101)
conn->req.upgrade
h2o_contains_token(connection.base,
(upgrade.base
conn->req.http1_is_persistent
(h2o_contains_token(connection.base,
contains_token
0x7d
conn->req.authority
(host.base
h2o_init_headers(&conn->req.pool,
0x100
minor_version)
fixup_request(h2o_http1_conn_t
(content_length
entity_header->value_len);
h2o_strtosize(entity_header->value,
content_length
create_chunked_entity_reader(conn);
entity_header->value_len,
(h2o_lcstris(entity_header->value,
(entity_header->name_len
sizeof(transfer-encoding),
unequal
create_entity_reader(h2o_http1_conn_t
handle_content_length_entity_read;
content_length)
create_content_length_entity_reader(h2o_http1_conn_t
reader->content_length,
conn->_reqsize)
reqsize
conn->_reqsize;
reader->decoder.consume_trailer
sizeof(reader->decoder));
&reader->super;
sizeof(*reader));
create_chunked_entity_reader(h2o_http1_conn_t
on_entity_read_complete(conn);
conn->_reqsize
conn->req.entity
init_host_config(h2o_hostconf_t
phr_decode_chunked(&reader->decoder,
reader->prev_input_size)
((bufsz
conn->sock->input;
(void*)conn->_req_entity_reader;
*reader
set_timeout(conn,
on_entity_read_complete(h2o_http1_conn_t
h2o_lcstris(conn->req.upgrade.base,
conn->req.upgrade.base
process_request(h2o_http1_conn_t
&conn->_timeout_entry);
(timeout
(conn->_timeout
close_connection(h2o_http1_conn_t
reinit)
init_request(h2o_http1_conn_t
st_h2o_http1_chunked_entity_reader
test_normalize_path);
test_decode_base64);
subtest(decode_base64,
test_lib__string_c(void)
&lt;
y,
world);
TEST(hello
ok(h2o_memis(escaped.base,
TEST(src,
test_htmlescape(void)
ftp://example.com/abc,
81);
/)
http://example.com,
/abc)
ok(port
ok(strcmp(scheme,
&path);
H2O_STRLIT(/a%6))
H2O_STRLIT(/a%62c));
H2O_STRLIT(/abc/../def?xx));
H2O_STRLIT(/abc/def/))
H2O_STRLIT(/abc/))
H2O_STRLIT(/abc/./def));
H2O_STRLIT(/def))
H2O_STRLIT(/abc));
H2O_STRLIT(/));
h2o_normalize_path(&pool,
h2o_decode_base64url(&pool,
VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIHRoZSBsYXp5IGRvZy4)
src.len,
h2o_base64_encode(buf,
dog.)
jumps
h2o_buf_init(src,
h2o_mempool_clear(&req->pool);
escape;
ENTITY_MAP
escaped.base[escaped.len]
escaped.base[escaped.len++]
escaped.len
memcpy(escaped.base
fill-in
escaping
ENTITY
quoted)
ENTITY(code,
(*s)
((unsigned)(unsigned
ENTITY('>',
&lt;);
ENTITY('<',
&#39;);
ENTITY('\'',
&amp;);
ENTITY('',
ENTITY_MAP()
65535)
http;
*scheme
Rewrite:
(char*)path;
(p[0]
detect
p[1]
'/'
((p[0]
Rewrite;
ret.base)
(hi
decode_hex(src[2]))
hi,
H2O_STRLIT(/./))
H2O_STRLIT(/../))
H2O_STRLIT(/..))
((src_end
x
'?')
rebuild_path(h2o_mempool_t
token_len))
h2o_next_token(haysack,
((token
token_len
needle_len)
(cur[off]
++off)
elements_end
cur;
*element_len
elements;
zero-width
H2O_TIMESTR_LOG_LEN);
assert(len
localt.tm_year
(Jan\0Feb\0Mar\0Apr\0May\0Jun\0Jul\0Aug\0Sep\0Oct\0Nov\0Dec\0)
%c%02d%02d,
%02d/%s/%d:%02d:%02d:%02d
sprintf(
-gmt_off;
'+';
gmt_sign
(gmt_off
gmt_sign;
60);
localtime_r(&time,
subtest(normalize_path,
assert(p
GMT,
gmt.tm_sec,
gmt.tm_mon);
emit_mon(p,
gmt.tm_mday,
emit_digits(p,
';
gmt.tm_wday);
(connection.base
05:24:04
Fri,
gmtime_r(&time,
gmt;
time)
digits
(JanFebMarAprMayJunJulAugSepOctNovDec)
wday
(SunMonTueWedThuFriSat)
wday)
*_num_elements
*emit_wday(char
map[(quad
map[quad
((uint32_t)src[0]
quad;
MAP_URL_ENCODED
*MAP_URL_ENCODED
abcdefghijklmnopqrstuvwxyz
ABCDEFGHIJKLMNOPQRSTUVWXYZ
*MAP
*_src,
decoded.base[decoded.len]
assert((char*)dst
decode_base64url_quad(remaining_input))
remaining_input[0]
UINT32_MAX)
decode_base64url_quad(src))
test_parse_url(void)
(uint8_t*)decoded.base;
decoded.len
decoded;
52;
'z')
'A';
'Z')
decode_base64url_quad(const
(v
'0')
*test++)
(h2o_tolower(*target++)
--test_len)
ret.base[slen]
h2o_malloc(slen
(slen
ELEMENT_TYPE_REMOTE_USER:
access-control-allow-origi,
24))
25:
content-dispositio,
18))
if-unmodified-sinc,
(h2o_tolower(name[18]))
19:
H2O_TOKEN_PROXY_AUTHENTICATE;
17))
proxy-authenticat,
18:
H2O_TOKEN_TRANSFER_ENCODING;
17:
H2O_TOKEN_CONTENT_LOCATION;
content-locatio,
H2O_TOKEN_CONTENT_ENCODING;
content-encodin,
H2O_TOKEN_WWW_AUTHENTICATE;
www-authenticat,
H2O_TOKEN_CONTENT_LANGUAGE;
content-languag,
16:
accept-encodin,
H2O_TOKEN_ACCEPT_LANGUAGE;
accept-languag,
(h2o_tolower(name[14]))
H2O_TOKEN_ACCEPT_CHARSET;
H2O_TOKEN_CONTENT_LENGTH;
content-lengt,
(h2o_tolower(name[13]))
14:
H2O_TOKEN_AUTHORIZATION;
H2O_TOKEN_X_REPROXY_URL;
x-reproxy-ur,
cache-contro,
'l':
H2O_TOKEN_IF_NONE_MATCH;
content-rang,
H2O_TOKEN_LAST_MODIFIED;
12))
last-modifie,
max-forward,
content-typ,
(h2o_tolower(name[11]))
H2O_TOKEN_RETRY_AFTER;
retry-afte,
11:
&req->conn->ctx->zero_timeout,
H2O_TOKEN_AUTHORITY;
:authorit,
connectio,
9))
set-cooki,
(h2o_tolower(name[9]))
10:
H2O_TOKEN_LOCATION;
'n':
H2O_TOKEN_IF_RANGE;
(h2o_tolower(name[7]))
8:
expire,
H2O_TOKEN_STATUS;
's':
H2O_TOKEN_REFERER;
:metho,
'd':
(h2o_tolower(name[6]))
7:
H2O_TOKEN_EXPECT;
accep,
serve,
6:
'w':
H2O_TOKEN_PATH;
H2O_TOKEN_RANGE;
rang,
(h2o_tolower(name[4]))
5:
'y':
hos,
H2O_TOKEN_FROM;
fro,
'm':
lin,
'k':
eta,
(h2o_tolower(name[3]))
H2O_TOKEN_AGE;
ag,
vi,
(h2o_tolower(name[2]))
3:
(len)
61,
H2O_STRLIT(www-authenticate)
58,
H2O_STRLIT(user-agent)
H2O_STRLIT(upgrade)
H2O_STRLIT(transfer-encoding)
H2O_STRLIT(strict-transport-security)
H2O_STRLIT(set-cookie)
H2O_STRLIT(retry-after)
H2O_STRLIT(referer)
H2O_STRLIT(range)
H2O_STRLIT(proxy-authorization)
H2O_STRLIT(max-forwards)
H2O_STRLIT(link)
H2O_STRLIT(last-modified)
H2O_STRLIT(if-unmodified-since)
H2O_STRLIT(if-modified-since)
H2O_STRLIT(if-match)
H2O_STRLIT(http2-settings)
H2O_STRLIT(from)
H2O_STRLIT(expires)
H2O_STRLIT(expect)
H2O_STRLIT(etag)
H2O_STRLIT(cookie)
H2O_STRLIT(content-range)
H2O_STRLIT(content-location)
H2O_STRLIT(content-length)
H2O_STRLIT(content-encoding)
H2O_STRLIT(content-disposition)
H2O_STRLIT(cache-control)
H2O_STRLIT(authorization)
H2O_STRLIT(allow)
H2O_STRLIT(age)
H2O_STRLIT(accept-ranges)
H2O_STRLIT(accept-language)
H2O_STRLIT(accept-encoding)
H2O_STRLIT(accept-charset)
H2O_STRLIT(:status)
H2O_STRLIT(:scheme)
h2o__tokens[]
SSL_CTX_set_next_protos_advertised_cb(ctx,
(unsigned)strlen(protocols);
on_npn_advertise(SSL
SSL_CTX_set_alpn_select_cb(ctx,
SSL_TLSEXT_ERR_OK;
*outlen
Found:
cand_len;
Found;
memcmp(in,
(cand_len
&conn->req.headers,
broken
in_end)
inlen;
*in_end
*protocols
*_protocols)
inlen,
*ssl,
on_alpn_select(SSL
SSL_get0_next_proto_negotiated(sock->ssl->ssl,
suffix.len
&data,
SSL_get0_alpn_selected(sock->ssl->ssl,
handshake_cb;
bio->ptr
BIO_new(&bio_methods);
bio
h2o_mempool_init(&sock->ssl->output.pool);
h2o_init_input_buffer(&sock->ssl->input.encrypted);
*bio;
ctrl_bio,
read_bio,
h2o_socket,
handshake_cb)
on_handshake_complete(sock,
assert(sock->ssl->input.encrypted->size
memset(&reader->decoder,
proceed_handshake);
handshake_cb(sock,
sock->ssl->handshake.cb
sock->ssl->handshake.cb;
do_read_stop(sock);
do_read_start(sock);
sock->_cb.write;
sizeof(sock->ssl->output.bufs));
bufs[i].len);
cb(sock,
deferred-calling
h2o__num_tokens
(by
bufs[i].base,
assert(sock->ssl->output.bufs.size
info->input;
info);
do_import(loop,
sock->ssl;
info)
(do_export(sock,
close(info->fd);
h2o_dispose_input_buffer(&info->input);
elements[num_elements].suffix
if-rang,
assert(info->fd
dispose_socket(sock,
SSL_get_error(sock->ssl->ssl,
(src->upgrade.base
h2o_socket_read_stop(sock);
(sock->ssl->output.bufs.size
close_cb(close_cb_data);
(close_cb
do_dispose_socket(sock);
set_timeout(h2o_http1_conn_t
sock->on_close.data;
sock->on_close.cb;
close_cb
h2o_dispose_input_buffer(&sock->input);
destroy_ssl(sock->ssl);
(sock->ssl
on_npn_advertise,
*close_cb_data;
(*close_cb)(void
dispose_socket(h2o_socket_t
free(ssl);
h2o_dispose_input_buffer(&ssl->input.encrypted);
SSL_free(ssl->ssl);
*ssl)
(int)sock->ssl->output.bufs.size,
sock->ssl->output.bufs.entries,
do_write(sock,
EIO;
SSL_ERROR_WANT_READ)
(SSL_get_error(sock->ssl->ssl,
(int)buf.len);
SSL_read(sock->ssl->ssl,
assert(sock->ssl->handshake.cb
assert(sock->ssl
free_bio(BIO
b->ptr
b->num
b->init
*b)
new_bio(BIO
BIO_CTRL_FLUSH:
(int)num;
BIO_CTRL_SET_CLOSE:
b->shutdown;
(cmd)
num,
ctrl_bio(BIO
(int)strlen(str));
write_bio(b,
h2o_buf_init(bytes_alloced,
sock->ssl->output.bufs.entries[sock->ssl->output.bufs.size++]
sock->ssl->output.bufs.size
(h2o_vector_t*)&sock->ssl->output.bufs,
bytes_alloced
*bytes_alloced;
h2o_consume_input_buffer(&sock->ssl->input.encrypted,
deferred[num_deferred].cmd
(int)sock->ssl->input.encrypted->size;
BIO_set_retry_read(b);
*ostream,
(sock->ssl->input.encrypted->size
b->ptr;
*out,
read_bio(BIO
socket/uv-binding.c.h
proceed_handshake(sock,
st_h2o_ssl_context_t
output;
input;
*encrypted;
handshake;
UIO_MAXIOV
clang
on_pool_connect,
h2o_socketpool_connect(sockpool,
sockpool;
ctx->io_timeout,
client->sock->data
error;
h2o_socket_connect(ctx->loop,
failure;
resulution
name
on_connect_timeout;
serv[sizeof(65535)];
timeout.cb,
_cb,
needs
client->_cb.on_connect
client->pool
client->ctx
memset(client,
client->_errstr);
assert(errstr
sendbuf
on_send_request);
reqbufcnt,
&client->_method_is_head))
conn->sock->input->bytes
&reqbufcnt,
((client->_cb.on_head
on_head_timeout;
h2o_socket_read_start(client->sock,
H2O_TOKEN_EXPIRES;
reader(client->sock,
client->sock->bytes_read
rlen);
(is_eos)
msg_len),
h2o_http1client_error_is_eos
client->_cb.on_body
is_eos
on_body_until_close)
(reader
3.3.3)
(RFC
on_body_content_length;
H2O_STRLIT(content-length)))
transfer-encoding);
unexpected
on_body_chunked;
H2O_STRLIT(chunked)))
(h2o_memis(headers[i].value,
H2O_STRLIT(keep-alive)))
headers[i].value_len,
H2O_STRLIT(connection)))
on_body_until_close;
reader
-2:
response);
-1:
(rlen)
,
on_error_before_head(client
rlen,
http_status,
on_head(h2o_socket_t
configurator->commands.size++;
errstr,
client->_cb.on_head(client,
on_body_chunked(h2o_socket_t
sock->bytes_read;
client->_errstr
client->_body_bytesleft
sock->bytes_read
garbage
sock->bytes_read)
(client->_body_bytesleft
&client->_timeout);
h2o_timeout_link(client->ctx->loop,
(sock->bytes_read
on_body_until_close(h2o_socket_t
timeout);
on_body_error(client,
ostr;
_timeout,
H2O_STRUCT_FROM_MEMBER(h2o_http1client_t,
*client
client->_cb.on_body(client,
on_body_error(h2o_http1client_t
free(client);
(h2o_timeout_is_linked(&client->_timeout))
client->sock);
received
trash
requests,
(client->sock
*client)
close_client(h2o_http1client_t
cursor,
memmove(headers->entries
--headers->size;
assert(cursor
h2o_find_header_by_str(headers,
h2o_set_header(pool,
slot->len
slot->base
name_buf->len
(char*)name;
name_buf->base
sizeof(h2o_buf_t));
(h2o_buf_t*)token,
name_len);
h2o_lookup_token(name,
*name_buf;
(h2o_lcstris(t->name->base,
&token->buf)
(headers->entries[cursor].name
headers->size;
cursor)
(h2o__lcstris_core(name,
entity_header_index;
req->res.headers.size;
src[i].name_len,
H2O_TOKEN_TRANSFER_ENCODING)
(entity_header_index
upgrade->len
src[i].value_len;
host->len
(char*)src[i].value;
host->base
assert(headers->size
entity_header_index
*upgrade)
slot->value.len
(char*)value;
headers->entries
headers->size
sizeof(h2o_header_t),
(h2o_vector_t*)headers,
h2o_mempool_release_shared(mimemap);
27:
foo);
h2o_mimemap_remove_type(mimemap,
ok(strcmp(h2o_mimemap_get_type(mimemap2,
ok(strcmp(h2o_mimemap_get_default_type(mimemap2).base,
mimemap2
example/overwritten)
example/overwritten);
RESERVE(0);
example/foo)
foo).base,
foo,
text/plain)
memset(buf,
h2o_mimemap_set_default_type(mimemap,
text/plain);
buf[sizeof(text/plain)];
application/octet-stream)
*mimemap2;
test_lib__mimemap_c()
mimemap->default_type;
kh_del(exttable,
*ext)
kh_val(mimemap->table,
iter).base);
kh_end(mimemap->table))
ext);
mimemap->table,
kh_get(exttable,
dupref(type);
h2o_mempool_addref_shared(dst->default_type.base);
src->default_type;
kh_val(dst->table,
dst->table,
kh_put(exttable,
sizeof(*dst),
p[1]);
p[0],
default_types;
application/javascript,
text/css,
css,
jpeg,
image/jpeg,
text/plain,
dupref(application/octet-stream);
mimemap->table
on_dispose);
*h2o_mimemap_create()
mimemap->table);
brown
kh_destroy(exttable,
h2o_mempool_release_shared((char*)ext);
*ext;
*mimemap
on_dispose(void
memcpy(ret.base,
dupref(const
*table;
KHASH_MAP_INIT_STR(exttable,
&h2o__tokens[0].buf
token_table.h
h2o_now(loop);
&entry->_link);
st_h2o_http1_content_length_entity_reader
h2o_linklist_insert(&timeout->_entries,
ascending
h2o_timeout__do_dispose(loop,
assert(h2o_linklist_is_empty(&timeout->_entries));
h2o_timeout__do_init(loop,
millis;
millis)
wake_at;
entry_wake_at;
entry_wake_at
timeouts;
max_registered_at)
(entry->registered_at
h2o_linklist_is_empty(&timeout->_entries);
timeout->timeout;
Close:
(h2o_socket_is_writing(conn->sock)
on_recv);
(handled);
wslay_event_want_read(conn->ws_ctx))
Close;
wslay_event_want_write(conn->ws_ctx))
h2o_socket_is_writing(conn->sock)
achieved
ostreams
progress
until
name_len))
handled;
wslay_event_context_free(conn->ws_ctx);
req->headers.entries[key_header_index].value.base;
(req->headers.entries[key_header_index].value.len
H2O_STRLIT(sec-websocket-key),
((key_header_index
h2o_lcstris(req->upgrade.base,
key_header_index;
**ws_client_key)
strlen(accept_key));
H2O_STRLIT(sec-websocket-accept),
h2o_add_header_by_str(&src_conn->req.pool,
src_conn->req.res.reason
src_conn->req.res.status
create_accept_key(accept_key,
conn->cb
conn->data
send_callback;
recv_callback;
conn->ws_callbacks.recv_callback
on_complete
sizeof(*conn));
accept_key[29];
*src_conn,
h2o_consume_input_buffer(&sock->input,
user_data;
element->suffix.len);
*arg,
conn->_write_buf;
h2o_realloc(conn->_write_buf,
deferred[num_deferred].value
(h2o_socket_is_writing(conn->sock))
fixed
(TODO:
conn->sock->input->bytes,
wslay_event_set_error(conn->ws_ctx,
*_conn)
sizeof(sha1buf),
sha1buf,
sha1buf);
WS_GUID,
24);
BIO
sha1buf[20],
create_accept_key(char
WS_GUID
<openssl/sha.h>
h2o_config_dispose(&globalconf);
http://default/index_txt/));
text\n)));
h2o_buf_init(H2O_STRLIT(/index_txt/));
client->sock->input->size
00c8ab71d0914dce6a1ec2eaa0fda0df7044b2a2)
1000000);
h2o_buf_init(H2O_STRLIT(/1000000.txt));
dfd3ae1f5c475555fad62efe42e07309fa45f2ed)
memset(sock->ssl,
conn->body->size),
ok(strcmp(sha1sum(conn->body->bytes,
text/plain));
kh_foreach(src->table,
h2o_buf_init(H2O_STRLIT(/1000.txt));
required);
h2o_buf_init(H2O_STRLIT(/index.html));
h2o_loopback_destroy(conn);
H2O_STRLIT(hello
ok(h2o_memis(conn->body->bytes,
text/html));
ok(check_header(&conn->req.res,
&globalconf);
t/00unit/file,
h2o_lcstris(res->headers.entries[index].value.base,
header_name,
*header_name,
mime-type);
default
on_config_mime_setdefaulttype,
file.mime.setdefaulttype,
on_config_mime_removetypes,
file.mime.addtypes,
map
file.mime.settypes,
index.txt));
index.htm
index.html
sequence
on_config_index,
file.index,
path);
directory
file.dir,
self->super.exit
h2o_mempool_addref_shared(self->vars[0].mimemap);
self->vars[-1].mimemap;
dup_strlist(self->vars[-1].index_files);
ret[i]
h2o_malloc(sizeof(*ret)
**s)
h2o_mimemap_set_default_type(self->vars->mimemap,
on_config_mime_setdefaulttype(h2o_configurator_command_t
h2o_mimemap_remove_type(self->vars->mimemap,
on_config_mime_removetypes(h2o_configurator_command_t
set_mimetypes(cmd,
on_config_mime_addtypes(h2o_configurator_command_t
h2o_mimemap_clone(self->vars->mimemap);
self->vars[-1].mimemap)
clone_mimemap_if_clean(struct
h2o_mempool_release_shared(self->vars->mimemap);
h2o_mempool_release_shared(newmap);
node)
(set_mimetypes(cmd,
h2o_mimemap_set_default_type(newmap,
*newmap
on_config_mime_settypes(h2o_configurator_command_t
argument);
*ext_node
value->data.sequence.size;
key->data.scalar);
h2o_mimemap_set_type(mimemap,
(value->type)
\.\,
given
'.')
assert_is_extension(h2o_configurator_command_t
mime-type,
\%s\
scalar
assert_is_mimetype(h2o_configurator_command_t
element->data.scalar;
argument
(element->type
node->data.sequence.elements[i];
(node->data.sequence.size
self->vars->index_files
free(self->vars->index_files);
on_config_index(h2o_configurator_command_t
self->vars->index_files,
ctx->path->base,
on_config_dir(h2o_configurator_command_t
handler->mimemap;
h2o_mimemap_clone(mimemap);
self->index_files[i].len)
req->res.reason,
(self->max_index_file_len
self->index_files[i]
mimemap;
self->mimemap
h2o_mempool_addref_shared(mimemap);
append_slash_and_dup(real_path);
self->real_path
append_slash_and_dup(virtual_path);
attributes
on_dispose;
index_files[0])
offsetof(h2o_file_handler_t,
default_index_files;
(index_files
h2o_buf_init(buf,
buf[path_len]
buf[path_len++]
memcpy(buf,
needs_slash);
h2o_malloc(path_len
path[path_len
needs_slash
strlen(path);
*path)
free(self->index_files[i].base);
self->index_files[i].base
h2o_mempool_release_shared(self->mimemap);
free(self->real_path.base);
on_dispose(h2o_handler_t
do_close(&generator->super,
Modified;
Not
OK,
200,
do_send_file(generator,
H2O_DEFAULT_REQ_TIMEOUT;
h2o_get_filext(rpath,
mime_type
generator->last_modified_buf,
&req->headers.entries[if_modified_since_header_index].value;
NotModified;
generator->etag_len))
generator->etag_buf,
*if_none_match
SIZE_MAX))
access
Access
found);
Not
File
req->path.len);
is_dir)
rpath[rpath_len]
redirect_to_dir(req,
index_file->base);
(int)req->path.len,
%.*s%.*s,
sprintf(path,
path_len
index.txt
path/index.txt/
path/
redirects
apache
(is_dir)
rpath,
index_file->len]
rpath[rpath_len
++index_file)
index_file->base
(index_file
(rpath[rpath_len
\r\ndate:
terminating
vpath.len
self->real_path.len;
self->real_path.len);
self->real_path.base,
self->max_index_file_len
exclude
self->real_path.len
alloca(
rpath
unterminated
(still
PATH_MAX)
(vpath.len
vpath
memcmp(req->path.base,
(req->path.len
well)
entity_body_header_index)
GET
if_none_match_header_index;
if_modified_since_header_index,
rpath_len;
body_suffix;
h2o_htmlescape(&req->pool,
bufs[1]
H2O_TOKEN_ACCESS_CONTROL_ALLOW_ORIGIN;
body_prefix;
H2O_STRLIT(text/html;
url.len);
Moved
301;
assert(url.len
(int)path_len,
(int)req->scheme.len,
%.*s://%.*s%.*s/,
sprintf(url.base,
req->authority.len
alloc_size
H2O_STRLIT(\>here</A>)
body_suffix
HREF=\)
<A
moved
document
Permanently</TITLE><P>The
Moved
html><TITLE>301
H2O_STRLIT(<!DOCTYPE
body_prefix
do_proceed(&self->super,
self->etag_buf,
self->last_modified_buf,
mime_type.base,
do_send_file(struct
(size_t)st.st_size);
(unsigned)st.st_mtime,
st.st_mtime);
h2o_time2str_rfc1123(self->last_modified_buf,
(S_ISDIR(st.st_mode))
&st)
sizeof(quoted)
(fstat(fd,
open(path,
st;
vec.base
self->bytesleft
do_close(&self->super,
MAX_BUF_SIZE;
MAX_BUF_SIZE)
(rlen
self->bytesleft;
rlen
is_final;
rlen;
index.htm,
st_h2o_file_configurator_t
**index_files;
st_h2o_file_config_vars_t
max_index_file_len;
appended
/
etag_buf[sizeof(\deadbeef-deadbeefdeadbeef\)];
last_modified_buf[H2O_TIMESTR_RFC1123_LEN
connection.len,
bytesleft;
MAX_BUF_SIZE
&encoder->super.next;
responses
&http_status,
H2O_STRLIT(HEAD)))
304)
method)
HEAD
4.4
0x100)
(req->res.content_length
outbufs,
0\r\n\r\n;
\r\n0\r\n\r\n;
inbufcnt);
memcpy(outbufs
outbufcnt++;
assert(outbufs[outbufcnt].len
%zx\r\n,
sprintf(self->buf,
outbufs[outbufcnt].len
outbufs[outbufcnt].base
(chunk_size
inbufs[i].len;
chunk_size
chunk_size,
alloca(sizeof(h2o_buf_t)
chunked_encoder_t
conn->_reqsize);
chunked_encoder_t;
st_chunked_encoder_t
h2o_timeout__do_link(h2o_evloop_t
h2o_timeout__do_dispose(h2o_evloop_t
&timeout->_link);
h2o_linklist_insert(&loop->_timeouts,
h2o_timeout_run_all(&loop->_timeouts,
(run_pending(loop)
(evloop_do_proceed(loop)
poll,
states,
run_socket(sock);
sock->_next_pending;
++n)
loop->_pending
read_on_ready(sock);
H2O_SOCKET_FLAG_IS_WRITE_ERROR)
SO_ERROR,
getsockopt(sock->fd,
sizeof(status);
phase
run_socket(struct
(int32_t)max_wait;
INT32_MAX;
INT32_MAX)
loop->_now)
wake_at
timeouts->next;
(uint64_t)tv.tv_sec
loop->_now
update_now(loop);
h2o_linklist_init_anchor(&loop->_timeouts);
&loop->_statechanged.head;
memset(loop,
h2o_malloc(sz);
h2o_parse_url(&pool,
create_socket_set_nodelay(loop,
EINPROGRESS))
0)->super;
&create_socket_set_nodelay(listener->loop,
&addrlen))
accept(listener->fd,
(void*)&addr,
sizeof(addr);
num_elements;
st_h2o_evloop_socket_t*)_listener;
conn->sock->input->size;
flags)->super;
&create_socket(loop,
TCP_NODELAY,
lingering
**dup_strlist(const
*create_socket_set_nodelay(h2o_evloop_t
assert(addrlen
fcntl(fd,
*create_socket(h2o_evloop_t
info->fd,
h2o_evloop_socket_create(loop,
sock->fd
info->fd
assert((sock->_flags
~H2O_SOCKET_FLAG_IS_READ_READY;
conf->loggers.entries[conf->loggers.size++]
memcpy(sock->_wreq.bufs,
sock->_wreq.alloced_ptr
complete,
&bufcnt)
element_index;
_bufs,
memcpy(bufs,
alloca(sizeof(*bufs)
H2O_SOCKET_FLAG_IS_DISPOSED;
close(sock->fd);
st_h2o_evloop_socket_t*)_sock;
arrives.
counters
avaiable.
notified
filter->on_setup_ostream(filter,
Notify:
sock->super.ssl->handshake.cb
&sock->super.input
sock->super.ssl
on_read_core(sock->fd,
H2O_SOCKET_FLAG_IS_ACCEPT)
read_on_ready(struct
H2O_SOCKET_FLAG_IS_WRITE_ERROR;
->
completed
sock->_wreq.cnt
&sock->_wreq.bufs,
(write_core(sock->fd,
assert(sock->_wreq.cnt
(*bufs)->base
(((*bufs)->len
assert(*bufcnt
++*bufs;
(*bufs)->len;
((*bufs)->len
(wret
iovec*)*bufs,
((wret
(int)*bufcnt;
iovcnt)
IOV_MAX;
*bufcnt)
**bufs,
free(sock->_wreq.alloced_ptr);
sizeof(sock->_wreq.smallbufs)
sock->_wreq.smallbufs
(sock->_wreq.smallbufs
EAGAIN)
(errno
buf.len))
buf.base,
h2o_reserve_input_buffer(input,
read_any
on_read_core(int
&sock->_next_statechanged;
sock->loop->_statechanged.tail_ref
(sock->_next_statechanged
link_to_statechanged(struct
y);
sock->loop->_pending
(sock->_next_pending
evloop/kqueue.c.h
*e
evloop/epoll.c.h
backends
update_now(h2o_evloop_t
link_to_pending(struct
_now;
**tail_ref;
*_pending;
*_next_statechanged;
*_next_pending;
smallbufs[4];
(timeout->_entries.next
added
timer
uv_close((uv_handle_t*)&timeout->_backend.timer,
&timeout->_backend.timer);
h2o_now(timeout->_backend.timer.loop),
timeout->timeout
on_timeout,
timeout->_entries.next);
H2O_STRUCT_FROM_MEMBER(h2o_timeout_entry_t,
*_mimemap)
schedule_timer(timeout);
h2o_linklist_is_empty(&timeout->_entries))
h2o_now(timer->loop));
h2o_timeout_run(timeout,
timer);
H2O_STRUCT_FROM_MEMBER(h2o_timeout_t,
*timer)
on_timeout(uv_timer_t
on_connect)
(void*)sock->uv.stream,
(uv_tcp_connect(&sock->_creq,
sock->uv.stream->loop;
cb(&sock->super,
sock->super._cb.write;
_creq,
stream->data
sizeof(sock->super.peername.addr));
memset(&sock->super.peername.addr,
sizeof(sock->super.peername.addr);
addrlen
sock->super.peername.len
memcpy(&sock->super.peername.addr,
memset(sock,
h2o_malloc(sizeof(*sock));
h2o_socket_close(&sock->super);
info->fd)
(void*)&info->peername.addr,
sock->super.peername;
info->peername
dup(fd))
remain
description
reported
value->data.sequence.elements[j];
events
says,
epoll(2)
overcome
how
consider
(void*)_sock;
do_export(h2o_socket_t
(void*)h2o_uv_socket_create((void*)tcp,
free(tcp);
(uv_tcp_init(loop,
puts_bio,
h2o_malloc(sizeof(*tcp));
*tcp
*create_socket(h2o_loop_t
(uv_buf_t*)bufs,
sock->uv.stream,
uv_write(&sock->_wreq,
assert(sock->super._cb.write
cb)
*_sock,
uv_read_stop(sock->uv.stream);
do_read_stop(h2o_socket_t
alloc_inbuf_ssl,
on_read_tcp);
SSL_ERROR_WANT_READ))
uv_read_start(sock->uv.stream,
(sock->super.ssl
do_read_start(h2o_socket_t
sock->uv.close_cb);
uv_close((uv_handle_t*)sock->uv.stream,
configurator;
on_write_complete(&sock->super,
st_h2o_uv_socket_t,
on_do_write_complete(uv_write_t
prev_bytes_read;
decode_ssl_input(&sock->super);
H2O_STRLIT(:authority)
sock->super.input->size;
prev_bytes_read
sock->super.input->size
sock->super.bytes_read
(nread
stream->data;
uv_buf_t*
h2o_reserve_input_buffer(&sock->super.ssl->input.encrypted,
alloc_inbuf_ssl(uv_handle_t
sizeof(buf));
memcpy(_buf,
4096);
h2o_reserve_input_buffer(&sock->super.input,
handle->data;
(void*)h2o_config_create_configurator(globalconf,
*handle,
schedule_timer(h2o_timeout_t
_wreq;
uv;
close_cb;
uv_stream_t
loop->ep
st_h2o_evloop_epoll_t*)create_evloop(sizeof(*loop));
(fd=%d)\n,
EPOLLIN)
((events[i].events
events[i].data.ptr;
H2O_SOCKET_FLAG__EPOLL_IS_REGISTERED;
&ev))
epoll_ctl(loop->ep,
ev.data.ptr
EPOLL_CTL_MOD
H2O_SOCKET_FLAG__EPOLL_IS_REGISTERED)
(changed)
EPOLLOUT;
EPOLLIN;
ev.events
ev;
ep;
st_h2o_evloop_epoll_t
<sys/epoll.h>
st_h2o_evloop_select_t*)create_evloop(sizeof(*loop));
READ/WRITE
&loop->writefds));
&loop->readfds));
assert(loop->socks[sock->fd]->_flags
sock->fd;
\r\ncontent-length:
loop->max_fd
sock->fd)
(loop->max_fd
write_pending(loop->socks[fd]);
0x200)
DEBUG_LOG(handling
&wfds))
off_non_ws;
read_ready\n,
DEBUG_LOG(added
assert(sock
loop->socks[fd];
&rfds))
socket,
latter
++fd)
returned:
DEBUG_LOG(select
&timeout);
select(loop->max_fd
sizeof(wfds));
memcpy(&wfds,
sizeof(rfds));
&loop->readfds,
&token_len,
memcpy(&rfds,
fds
timeout.tv_usec
timeout.tv_sec
update_fdset(loop);
wfds;
rfds,
st_h2o_evloop_select_t*)_loop;
WRITE
DEBUG_LOG(clearing
&loop->readfds);
FD_SET(sock->fd,
index_file->len
fd:
READ
DEBUG_LOG(setting
(loop->socks[sock->fd]
(sock->fd
update_fdset(struct
writefds;
loop->kq
st_h2o_socket_loop_kqueue_t*)create_evloop(sizeof(*loop));
sock->fd);
errno,
(fd=%d),
EVFILT_WRITE,
EV_DELETE,
EVFILT_READ,
changelist[2];
(void*)sock->loop;
evloop_do_on_socket_export(struct
???
*timeouts)
write_pending(sock);
H2O_TOKEN_CONTENT_DISPOSITION;
EVFILT_WRITE:
H2O_SOCKET_FLAG_IS_READ_READY;
events[i].ident);
assert(sock->fd
events[i].udata;
sizeof(events[0]),
sizeof(events)
ts.tv_nsec
ts.tv_sec
poll
sizeof(changelist[0])))
sizeof(changelist)
collect_status(loop,
((nchanges
update)
max_wait;
nchanges,
events[128];
st_h2o_socket_loop_kqueue_t*)_loop;
*_loop)
evloop_do_proceed(h2o_evloop_t
SET_AND_UPDATE
&loop->super._statechanged.head;
loop->super._statechanged.tail_ref
expec,
~H2O_SOCKET_FLAG_IS_POLLED_FOR_WRITE;
SET_AND_UPDATE(EVFILT_WRITE,
H2O_SOCKET_FLAG_IS_POLLED_FOR_WRITE)
even
H2O_SOCKET_FLAG_IS_CONNECTING)
(sock->_flags
read_ready
(sock->_wreq.cnt
&wfds,
~H2O_SOCKET_FLAG_IS_POLLED_FOR_READ;
H2O_SOCKET_FLAG_IS_POLLED_FOR_READ;
H2O_SOCKET_FLAG_IS_POLLED_FOR_READ)
cmd;
free(sock);
((sock->_flags
sock->_next_statechanged
sock->_next_statechanged;
loop->super._statechanged.head
loop->super._statechanged.head;
st_h2o_evloop_socket_t
(loop->super._statechanged.head
EINTR)
change_index,
image/gif,
changelist,
kevent(loop->kq,
filter,
sock->fd,
EV_SET(changelist
(apply_commands(&ctx,
*changelist,
kevent
collect_status(struct
kq;
DEBUG_LOG(...)
h2o_create_filter(host_config,
http1-upgrade-to-http2,
*host_config)
SkipMe:
*bufs;
send_chunk
reproxy_url.len).base;
reproxy_url.base,
rproxy->reproxy_url
(*handle_incoming_entity)(h2o_http1_conn_t
rproxy->super.do_send
rproxy->filter
57,
rproxy_t),
rproxy
h2o_delete_header(&req->res.headers,
req->res.headers.entries[reproxy_header_index].value;
reproxy_url
h2o_find_header(&req->res.headers,
SkipMe;
reproxy_url;
*rproxy;
assert(is_final);
&self->super.next);
SIZE_MAX;
Error;
body.base
(int)port,
*emit_mon(char
snprintf(NULL,
req->_ostr_top->next;
WSLAY_ERR_WOULDBLOCK);
body.len
body;
IMPLEMENTED!!!
&path))
h2o_ostream_send_next(&self->super,
throw
hp_start).base;
hp_start,
h2o_strdup(pool,
hp_end)
(*colon_at
++colon_at)
GMT
colon_at
type);
HTTP2_SIG.len
hp_end
((hp_end
hostport
h2o_malloc(sizeof(*sock->ssl));
hp_start
http://,
empty);
(strncmp(url,
*hp_start,
h2o_config_register_host(&globalconf,
**path)
parse_url(h2o_mempool_t
*reproxy_url;
rproxy_t
h2o_now(h2o_socket_get_loop(sock));
sizeof(entry->link));
memset(&entry->link,
&entry->sockinfo)
h2o_malloc(sizeof(*entry));
on_close
ExitConnect:
events,
counter
ready,
connecting
host,
pool->port.s,
getaddrinfo(pool->host.base,
AI_NUMERICSERV;
*res;
`capacity`,
repsect
setup_connect_callback(cb,
&entry->sockinfo);
*sock
on_close(void
on_deferred_connect_cb(&cbinfo->timeout);
failed;
connection
cbinfo;
on_deferred_connect_cb;
cbinfo->timeout.cb
sizeof(cbinfo->timeout));
*ptr)
cbinfo->errstr
*client_key)
cbinfo->sock
h2o_malloc(sizeof(*cbinfo));
cbinfo->data);
cbinfo->errstr,
timeout);
recv_callback(wslay_event_context_ptr
timeout,
*timeout)
on_timeout;
pool->_interval_cb.entry.cb
h2o_timeout_init(loop,
msec)
(pool->_interval_cb.loop
pthread_mutex_destroy(&pool->_mutex);
pthread_mutex_init(&pool->_mutex,
UINT64_MAX;
pool->timeout
pool->capacity
sprintf(pool->port.s,
pool->port.n
send_callback(wslay_event_context_ptr
sizeof(*pool));
memset(pool,
h2o_timeout_link(pool->_interval_cb.loop,
pthread_mutex_unlock(&pool->_mutex);
destroy_expired(pool);
timeout_entry);
H2O_STRUCT_FROM_MEMBER(h2o_socketpool_t,
fuction
`connect`
performed
frequency
decrease
on_timeout(h2o_timeout_entry_t
--pool->_shared.count;
destroy_attached(entry);
(entry->added_at
pool->_shared.sockets.next);
h2o_linklist_is_empty(&pool->_shared.sockets))
h2o_now(pool->_interval_cb.loop)
expire_before
lock
h2o_socket_dispose_export(&entry->sockinfo);
h2o_linklist_unlink(&entry->link);
H2O_TOKEN_HOST;
value_len)
destroy_attached(struct
*errstr;
connect_callback_t
vector->entries
src[i].name,
vector->size);
TYPE_MAP('h',
vector->entries,
H2O_STRLIT(accept)
vector->capacity
assert(vector->capacity
h2o_malloc(sizeof(*client));
(delta
inbuf->size;
(inbuf->_capacity
inbuf->size);
ts.str->rfc1123,
inbuf->bytes,
memmove(inbuf->_buf,
assert(inbuf->size
&req->headers.entries[if_none_match_header_index].value;
is_dir;
inbuf->_buf)
(inbuf->bytes
inbuf->_buf;
inbuf->bytes
inbuf->size
*_inbuf
_buf)
*_inbuf;
H2O_STRUCT_FROM_MEMBER(h2o_mempool_shared_entry_t,
h2o_mempool_addref_shared(p);
entry->bytes;
link_shared(pool,
(pool
entry->refcnt
ref;
ref->entry
pool->chunks->bytes
newp->offset
pool->chunks;
pool->chunks->offset
sz
16-bytes
newp->bytes;
newp->next
h2o_malloc(offsetof(struct
free(pool->chunks);
*next
&pool->_first_chunk)
client);
(pool->chunks
chunks,
next)
free(direct);
pool->directs,
*direct
ref->next)
pool->shared_refs;
*ref
(pool->shared_refs
(char*)fn
http://)
knetfile.c
req->conn->peername.len);
payload.data);
{34,
sizeof(on))
h2o_context_init(&ctx,
h2o_socketpool_return(client->sockpool,
__err_connect(socket);
res->ai_socktype,
H2O_TOKEN_CONTENT_RANGE;
(char*)calloc(n_col,
socket(res->ai_family,
__err_connect(func)
perror(select);
sha1_add(sha1nfo
&fds;
__x)[0]
fdr
tv.tv_usec
tv.tv_sec
left-to-right
*fdr
YOML_TYPE_SEQUENCE:
unlikely(x)
fds,
\x00\x04
is_read)
kurl_destroy()
17)
(incomplete));
defined(__MINGW32__)
kurl_dopen(fd)
incomplete
flags);
kurl_opt_t;
(strstr(url,
kurl_t;
returns
(void**)p;
**p;
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/;
hmm_Q(const
counts*/
level);
new_mask
counts
hmm_post_decode(const
*prob);
bgzf_close(BGZF*
*hp,
Upgrade
forward
*he);
h2o_timeout_is_linked(h2o_timeout_entry_t
hmm_delete_exp(hmm_exp_t
*hmm_new_exp(const
authority;
hmm_exp_t
initialize
*obs;
posterior
yaml_event_t
uint8_t*)s,
flattened
141
node
**b,
48)
**f,
*seq;
well.
r.tb,
acceleration,
KR_UM
ok(bufis(buf
bufs[0]
\x00\x00\x00\x64
auxiliary
transition
h2o_setup_next_ostream(self,
{49,
221.2135961699311;
p5)
HMM_TINY
FLOAT
(flag[i>>4]&=~(1ul<<((i&0xfU)<<1)))
HMM_VITERBI
leak
0.1.0-4:
0x3ffffffdu
*wreq,
fit
yoml_free(map);
bmGs[m
2008-01-15,
ks,
directives
0.1.0-7:
report
free(SA);
k))
c1)
SAIS_BWT(unsigned
(T
SA[0..n-1]
h2o_http2_handle_upgrade(h2o_req_t
induce
(SAIS_CORE((unsigned
SA[0]==m
*bmBc;
->port
sentinel;
ku->l_buf
RA[j--]
(SA[i]
ULLONG_MAX
recurse
H2O_HTTP2_FRAME_HEADER_SIZE;
problem;
ubyte_t;
decode_string(pool,
image/png,
payload->headers_len
lexicographic
probilities
1)]
substrings
possibly
(c1
free(x1);
SA[i];
Remove
items
registered_at;
SA,
leu[k]
conf->max_connections)
a>>24;
http2conn);
(tmp
send_chunk;
(0.2.6):
SAIS_CORE(const
per
Flush
AF_UNIX:
*ws_client_key
result->value
construct
L-type,
56,
(c0
0];
*b++
H2O_STRLIT(date)
SA
c0;
(a,c)
T[SA[i]
*host_config);
S-type;
2011
printf(upper-gamma(%lg,%lg):
j)
H2O_STRLIT(content-language)
_is_complete;
h2o_http2_priority_t;
-0.62,
induced
*SA,
sort
kurl_tell(fp)
kh_clear_##name(h)
sum;
end)
((uint32_t)src[1]
&vec,
h2o_loopback_run_loop(h2o_loopback_conn_t
*B,
*kh_init_##name(void)
last)
config_node,
start/end
/*************************
getCounts();
free(he->E[i]);
Find
req_timeout;
0?
++C[c
each
((const
penalty
entry->registered_at
takes
build_request(h2o_req_t
0.1.0-5:
*kopen(const
Double
chr(i)
T[i]
T
ksa_sa
ksa_core
lastChar;
ksa_sa64
n,
path_replace_length),
ksa_bwt64
SAIS_CORE
*msg
format)
_KSA64
easiest
h2o_socket_ssl_get_selected_protocol(sock);
supporting
optimization
h2o_http1_upgrade_cb
SAIS
Mori's
Rights
29},
(*input)->size
lower-case
pthread_mutex_lock(&t->lock);
world\n0\n\n,
kts_worker,
pthread_create(&t->w[i].tid,
t->w[i].t
fix
sizeof(kthread_t));
accept-range,
{71,
__sync_fetch_and_add(&w->t->w[min_i].i,
IS&quot;,
kftp@\r\n,
steal
h2o_socket_read_start(h2o_socket_t
assigned
slots
tests;
tasks[KT_MAX_TASKS];
S-type)
KNERR_COLON
data_header_slot,
kts_worker_t
escaped;
*s3keyid;
pending;
t->data.scalar;
ktint64_t;
0x1bu
*newp
rlen)
h2o_init_input_buffer(&sock->super.input);
he->A0[l]
kh_str_hash_func(key)
n_threads;
(ktf_worker_t*)alloca(n_threads
compose
register_handler(hostconf,
free(t);
219},
early
H2O_STRLIT(304)
__sync_fetch_and_add(&w->i,
kh_put(ipk,
t->n_threads);
st_h2o_evloop_select_t
t->w[i].i)
applications
hostconf->hostname.len;
(0.2.7):
min
fp->uncompressed_block;
2**(4*7)
*w;
uint8_t*,
h2o_mempool_init(&req->pool);
macros...
b\r\nc:
ktf_worker_t;
7;
kt_for_t
**************/
defined(_MSC_BUILD)
166},
1000000)%10)),
*seq);
kseq_t;
h))))
((generator
qual;
404,
WNOHANG);
__KSEQ_TYPE(type_t)
&seq->qual,
(ks_getuntil2(ks,
kmp_alloc(name,
option
'\n');
(char*)realloc(seq->qual.s,
seq->qual.s
(seq->qual.m
flags
terminated
bufcnt);
null
rounded
hd->s[1]
kroundup32(seq->seq.m);
getBuckets(C,
(seq->seq.l
enough
k0);
extensions);
'@')
append_unsafe_string(pos,
'+'
ksmall
(char*)malloc(seq->seq.m);
256;
CRYPTO_num_locks(),
mime_type.len);
seq->data.sequence.size
slower
FASTA/Q
&seq->comment,
w->pending,
&c)
entry->added_at
krealloc
&seq->name,
port;
execution)
{31,
else:
h2o__string_h
(++step))
ks_destroy(ks->f);
(!ks)
decide
SCOPE
src[i].value,
(ks)->f->begin
/**************************************
pthread_cond_init(&t->cv,
(KR_MM
kseq_rewind(ks)
(fabs(b
r.qe+1,
ks_getuntil(kstream_t
str->l;
'\r')
(char*)calloc(1,
(int)index_file->len,
kurl_destroy(void);
isdigit(ftp->response[0])
strcpy(buf,
(only
According
*r.value;
ks->begin,
CONNECTION_PREFACE.len)
ks->begin)
str->m
(str->m
extern
here!
t1);
defined(sun)
KS_SEP_TAB)
KS_SEP_SPACE)
memcpy(s->innerHash,
60},
'\n')
DEC(__clang_minor__)
rounding
ks->end;
Most
profile,
((settings_decoded
append?
str->l
199
*ks,
(fn
KIND,
ks_getuntil2(kstream_t
__KS_GETUNTIL(__read,
(int)ks->buf[ks->begin++];
shift,
printf([ht_khash_unpack]
__bufsize);
'c'?
AUTHORS
KS_SEP_LINE)
O_BINARY);
ks->buf,
ks->end)
h2o_http2_rst_stream_payload_t
ks;
(after
w->t->w[i].i)
char*)malloc(__bufsize);
c
_num_config_slots;
13.2,
ctx->globalconf->configurators.next;
ks->buf
pthread_exit(0);
bgzf_flush(fp))
f)
__bufsize)
st_h2o_loopback_conn_t,
((ks)->is_eof
ks_eof(ks)
begin,
(sizeof(Sun,
(seq->last_char
http://example.com:81,
isspace()
(void*)h2o_add_ostream(req,
KS_SEP_TAB
x1,
isspace():
Redirect;
KS_SEP_SPACE
yy);
Last
printf([ht_khash_int]
2009,
stream_id)
0.5;

kh_get(32,
y,
__attribute__((aligned(x)))
malloc(Z)
5.76,
2.58,
6(6):313-314).
non-Windows
seq->qual.m);
(in_end
1024);
strlen(s);
H2O_TOKEN_STRICT_TRANSPORT_SECURITY;
-0.43,
95
-3.25,
RISCos
'9')
effect.
ok(path
0.50,
block_end,
kl->mp
http2-setting,
-1.10,
1.72,
-0.74,
-1.54,
file.mime.removetypes,
encode_status(dst,
-1.79,
-2.39,
pos
5.5,
KF_MAIN
4.32,
(conn->_write.write_once_more)
(int32_t)b[n_b-1]
++ib;
nb1,
sorted
b[]
0.;
req->_ostr_top->stop(req->_ostr_top,
NULL);
126},
nb,
j
*qp;
host_config
FASTA
(new
Statistics
Search
if_modified_since->len,
1,
to_sync;
SSL_OP_NO_SSLv2);
(reqlen)
(buf[src]
log(1.-x))
exp(kf_lgamma(a+b)
2*m
node->line
*ksBM_prep(const
gamma(a+b):
req->version
web
x64
Recipe
bio_methods
(ai
processed_at;
_kf_gammaq(s,
(fabs(d
++slot->refcnt;
See
memcpy((v1).a,
wp_ozh_wsa_visit_lasttime=xxxxxxxxxx;
0.1.0-8:
D
D,
slot);
1.)
*x;
log(z)
*setup_connect_callback(h2o_socketpool_connect_cb
because
exp(s
KF_GAMMA_EPS)
However,
sum,
partial);
200,
_kf_gammap(double
h2o_buf_init(H2O_STRLIT(\x82));
kf_gammaq(s,z)*tgamma(s).
DEC(__DECC_VER/100000
*_max,
fopen(fn,
(uint8_t*)Hmax;
function,
0x08
at:
write(aux->ctrl_fd,
port2[10];
I:
online
13:
good
algorithm)
len<<4
Lentz's
void
kl_shift_##name(kl_##name##_t
Numerical
close(ku->fd);
_mm_cmpeq_epi8(t1,
196
Formulas
4.
(char**)malloc(sizeof(char*)
entry->name->base[name->len]
symbols,
ksmall
q2)
q5)
h2o_linklist_t
timeout
el
free(header_table->entries);
p2)
defined(__APPLE__)
need_shell
p4)
h2o_http1_upgrade(src_conn,
.5);
kt_spawn(kthread_t
still
44},
truncated
**Vmax,
x0
update_stream_output_window(h2o_http2_stream_t
kh_for
2.;
0.?
fabs(x)
caching
conn->req.path
167},
h2o_config_init(&config);
expntl,
x0,
.08838834764831844;
q6
0xfe,0xdc,0xba,0x98,
q3
q0
array,
p5
p4
header_table_evict_one(hpack_header_table);
p3
e
AS66,
h2o_buf_init(inbuf->bytes
enum_h2o_http2_stream_state_t
p->e
H2O_TOKEN_SET_COOKIE,
0.9999999999995183;
pid
errstr;
(z+1);
1259.139216722289
removing
(z+3);
->host,
slot->weight
0.1385710331296526
(bgzf_read_block(fp)
0.9934937113930748e-05
SAIS_CORE(T,
Log
kh_destroy(int,
(u,v,w)
w;
0.0?
failures:
tol2)
H2O_STRLIT(private));
e^{-t^2}
0.0)
fw);
max_iter
(int)bufs[i].len);
w)
@function
(fabs(e)
*tid;
h2o_http1_upgrade(h2o_http1_conn_t
st_h2o_linklist_t
mid)
free(mp);
0.1.0-8
tiny);
*host_config,
(tol1
FIXME
fa>fb
Z_FINISH);
gmt_sign,
beyond
seq->seq.m);
((u
kseq_init(fpq);
(b,c,u)
(fast,
immediately
SCOPE)
self->vars
bound)
fill_buffer(kurl_t
size;
++beg)
30)
fu
(x)|=(x)>>16,
fp->compressed_block.
parabolic
*server_name);
(2.0
index.html,
on_complete,
((**src
r?
kh_int_hash_equal(a,
*kts_worker(void
*out
tiny)
//printf(%d,%d\n,
*slot
{38,
key
want
golden
mark
func(c,
(kh_exist(h,
h1
conn->sock
fc
(ch
xx);
(h1
uv_timer_init(loop,
fa;
f(b)
fa)
mapper
func(b,
sell
func(a,
eold,
memset(&sock->ssl->output.bufs,
tol1,
v,
0.3819660113;
pthread_cond_wait(&w->t->cv,
dispose;
*keys;
KHASH_MAP_INIT_INT64(h2o_http2_stream_t,
67
several
ksq->name.s,
src[3];
interrupt
free(dx);
hints.ai_family
.5
inbufs,
(type:%d)\n,
0x02
fp->path,
*port,
strlen(connection)
he->E[b][k]
(n_calls
kl);
h2o_proceed_response(&stream->req);
*abc\n);
bmGs[i];
(fx1
H2O_STRLIT(:path)
series
*mid))
memcpy(x1,
++n_calls;
i-s
peername;
fx
radius
MGJ
n_evals);
initial
fx1=f(n,x1)
nucleotide
here:
back
direction
500
hmm_delete_data(hmm_data_t
unpackInt16((uint8_t*)&header[14])
(name_token
fx1)
*configurator)
retreiving
(ftmp
HEADER_TABLE_ENTRY_SIZE_OFFSET;
func(n,
headers[i].value);
dx[k];
202},
*is_dir)
*configurator;
*x1,
__kmin_hj_aux(kmin_f
((err
hit
*errstr);
curl_easy_pause(ku->curl,
*entry)
Johnson,
suggested
possible
0.0;
mp->max?
few
well
*eb
sock->input
quite
designed
AC_KGRAPH_H
direct->next;
finalostream_send(h2o_ostream_t
178
shutdown_ssl(h2o_socket_t
calloc(strlen(p)
payload->window_size_increment
((C
can
memcpy(entry->value->base,
downstream?
'_')
(CACM
h2o_send_error(&conn->req,
Bell
H2O_TOKEN_ACCEPT_ENCODING;
*conn;
pseudocodes
h),
kr_srand(11);
tab
Based
200;
******************************/
ktf_steal_work(kt_for_t
KNERR_BRACKET
t->w[i].i,
sprintf()
lrand48();
N;
atol(argv[1]);
N
0x71D67FFFEDA60000ULL;
tuned
found)
kr->mt[KR_MM
defined(__TI_COMPILER_VERSION__)
**slot)
(kr->mt[KR_NN
YOML_TYPE_SCALAR
KR_NN)]
(x>>1)
OpenSSL_add_all_algorithms();
KR_MM]
kr->mt[i
KR_LM);
((k
KR_UM)
h2o_linklist_insert(&pool->_shared.sockets,
pos,
6364136223846793005ULL
kr->mt[kr->mti]
&H2O_TOKEN_CONTENT_LENGTH->buf)
h_end;
0|
gmax)
mti;
CHUNKED_IN_TRAILERS_LINE_MIDDLE:
Least
curl_multi_fdset.3
KR_NN
table->entry_start_index
ss;
on_setup_ostream(h2o_filter_t
Makoto
YOML_TYPE_MAPPING);
remaining);
{107,
generator.
kmath.h
<math.h>
*node)
ks_combsort(name,
*_unused)
5000);
reads
(Windows)
SSE2-32bit,
st_h2o_loopback_conn_t
recent
%20s\t%20ld\t%10.6f\n,
*knet_dopen(int
*fn,
*name;
(w->i
(str_len
world\r\n0\r\n\r\n,
arc_t
{134,
quad
SSL_new(ssl_ctx);
defined(_SGI)
look
knetFile;
20;
h2o_socket_t
quality
defined(__aix)
6\r\nhello
*http_host;
retry
strdup(buf);
reproxy_header_index;
(uint32_t)src[2]
*response,
no_reconnect,
pasv_ip[4],
toLowerSSE(text
char*
ctrl_fd,
knetFile_s
unbuffered
send(fd,
7);
(ks->end
deallocating
<winsock2.h>
close(fd)
int
write(fd,
headers[0].value_len,
memcpy(p,
elen;
require;
conn->peer_settings
kl_shift(name,
he->m;
kl_pushp(name,
kl_destroy(name,
b\nhello
kl_next(iter)
msg,
klist_t(name)
https;
kliter_t(name)
H2O_STRLIT(/abc/def/.));
h->flags)
p->data;
COPY(scheme);
*d
buf_end),
--kl->size;
freeing
(h2o_socket_is_reading(conn->sock))
ks_introsort(double,
184
*d)
&q->data;
kl->mp,
24)
kl_destroy_##name(kl_##name##_t
kl->head
kmp_init(name);
cases
*kl_init_##name(void)
tlen,
password)
H2O_TOKEN_METHOD;
kl_##name##_t;
**p
kl1_##name;
kltype_t,
linked
KLIST_INIT(name,
mp,
head
kmp_destroy_##name(mp)
\r\n\r\n,
kmp_destroy(name,
algorithm
kmp_init_##name()
(e->dispose
kputsn(numbuf,
kmp_init(name)
gmt.tm_hour,
profile
__max_16(ret,
mp->max);
*entry;
sizeof(kmptype_t
(type_t*)malloc(sizeof(type_t)
delim;
mp->max)
free(C);
kmp_free_##name(kmp_##name##_t
ctrl_fd;
{163,
mp->buf[--mp->n];
sizeof(kmptype_t));
bgzf_read_init();
*kmp_alloc_##name(kmp_##name##_t
(t->n_tasks
n_b,
h2o_config_configure(h2o_globalconf_t
ok(bufis(headers[1].name,
free(mp->buf);
TEST(\x81,
knet_win32_init()
++k)
n_threads)
mp->n;
__push_back(-1);
*mp)
sizeof(kl_##name##_t));
buf_start,
FD_ZERO(&fds);
https)
header[BLOCK_HEADER_LENGTH],
ftp->max_response?
kmp_##name##_t;
h2o_realloc(vector->entries,
**buf;
%.*s
kmptype_t
task->data
-2.43,
h2o_now(h2o_evloop_t
fb))
kmpfree_f)
sentinels.
preBmGs()
free(P)
2008-2009,
negative
(int*)calloc(hd->L+1,
end-of-file;
copy_length;
delimitor
yoml_type_t;
delim
ctx->global_config->hosts.entries,
=((uint64_t)1
bgzf_flush_try(BGZF
0x7fffffff,
some
array[i]
c==1
10-20%
r.score
NUM_ELEMENT_TYPES;
Only
!'
INT_MAX);
size.
st_h2o_sendfile_generator_t,
bgzf_is_bgzf(const
on_req;
EOF
path))
defined(__OpenBSD__)
assert(connection_index
present
2008-08-31
marker
whence);
bgzf_seek(BGZF
exit:
0123456789-_;
H2O_TOKEN_PROXY_AUTHORIZATION
Set
h2o_buf_init(ts->str->rfc1123,
_KR_MAIN
0x7u
III:
&pe);
(ia
0x7fffddu
H2O_TOKEN_CONNECTION;
bgzf_tell(fp)
Unix/Mac,
netwrite(fd,
proceed_handshake(h2o_socket_t
observations
made,
209},
_data_
*priority,
Write
length);
(k
kept
bgzf_read(BGZF
**********************/
*fp);
printf([ht_timing]
level;
adjecent
credential
33
compression
--conf=file
sizeof(*new_entries)
46},
(EOF)
reading,
routines
/******************
Xenix
writing;
'r'
(*n_cigar
ks->buf[i]
FILE*
hd;
hash
*cache;
*b,
-(a
loop->_pending;
strlen(cmd);
block_address;
kseq_read(seq))
open_mode:8,
BGZF_ERR_MISUSE
on_config_keepalive,
BGZF_BLOCK_SIZE
<zlib.h>
h2o_socket_is_reading(h2o_socket_t
collect
H2O_HTTP2_FRAME_FLAG_ACK)
(w->pending
SAMtools
improved
later
written
(int*)(a
*new_entries
Broad
&max,
b[])
ksplit_core(s->s,
fb<fc,
*n)
64,
31)
170},
proxy
solve
EOS,
http)
errcode:16;
buf[i];
(fb
on...
/=
(__kbstack_t*)realloc(__kstack,
*kl,
x%10
config_str_len,
*secret,
kputsn_(const
(len--)
source.
assert(!cannot
kputc_(int
config->_num_config_slots);
node->next;
out;
last_len,
*ks_str(kstring_t
entry->value
(s->m
b)?
44)
eh_t;
t->n_slots
ks_tokaux_t
*vals;
COMMON_CODE(14,
304);
subsequent
h2o_ostream_t;
persons
sizeof(s)
st_h2o_hpack_static_table_entry_t
except
similar
(char*)calloc(0x10000,
encoder->super.do_send
*_str,
**_prep);
*str,
KS_ATTR_PRINTF(2,0);
tmt;
_bgzf_tell((_bgzf_file_t)fp->fp);
118
(mode))
kvsprintf(kstring_t
sep,
++j;
&ctx);
log(hp->e[b][k]);
kbtree_##name##_t;
2.0
zi[j
something
initialised
&str);
20
puts_bio(BIO
&u);
129
on_write(h2o_socket_t
matrix
case
expected
char*.
extrapolation
simple
__attribute__((__format__
*g,
decode_int(&p,
__GNUC_MINOR__
h2o_evloop_run(loop);
KSTRING_H
KSORT_INIT(str,
Co.,
kl->head;
KSORT_INIT_STR
payload->data
KSORT_INIT(type_t,
results
KSORT_INIT_GENERIC(type_t)
e)
knaux_t
conn->super.ctx->global_config->http2_max_concurrent_requests_per_connection;
*ksstr_t;
timeout?
1e-290
self->super.proceed
*hmm_new_data(int
ks_mergesort_##name(n,
ks_mergesort(name,
9,
memcpy(__KB_PTR(b,
(pop--);
z
failure
h2o_mempool_release_shared(ref->entry->bytes);
H2O_TOKEN_ALLOW,
(int)r,
pop
'/'))
bigmagic
top,
EX_CONFIG
TESTED!!!
h2o_timeout_link(req->conn->ctx->loop,
&v[3],
236
a[j]
0x1ffffefu
k)
(g->xmax
KBIT_H
FD_SET(fd,
fp->block_offset;
*hh);
skip
200
ll)
*low));
STAGE
high;
__err_connect
S
(__sort_lt(*low,
*client;
AI_NUMERICSERV
*low))
kk;
pthread_mutex_unlock(openssl_thread_locks
h2o_http2_window_t
-tol1);
H2O_HTTP2_ERROR_NONE);
only
index_file->len);
44,
wiki-popcount_2,
top->depth;
numtests_in_subtest,
decode_hex(buf[src]))
SO_LINGER,
addr.s_addr
(t-i
zs.zalloc
top->depth
i-1;
*mat,
nature.
socket:%s:
top->right
(aux->n++);
kftp_pasv_prep(knetFile
__sort_lt(rp,
st_h2o_http2_headers_payload_t
rp));
(__sort_lt(*i,
node->data.mapping.elements[i].key;
l>>1;
resulting
ku->l_buf;
client->_can_keepalive)
bgzf_getline(BGZF
++i;
*i)?
continue;
(fp->compress_level
<<=
(connect(fd,
*stack;
file
g_defr
{65,
COPY(upgrade);
opened
l[i]
gap;
(http://lib.stat.cmu.edu/apstat/245).
seq;
11;
eu[k]
&pool->_interval_cb.timeout);
do_swap;
1.2473309501039786540366528676643;
(h2o_lcstris(token,
strings,
format,
doc->data.sequence.elements[1];
initialization.
*(j-1);
*j
mandatory.
--j)
32
*(j-1));
__sort_lt(*j,
2008-09-15
swap_tmp;
(uv_tcp_getpeername((uv_tcp_t*)stream,
((v).a[(i)])
(prev_num_connections
&stream->_link.slot->blocked_streams;
__ks_insertsort_##name(type_t
parsing
(netread(fp->fd,
{93,
paths,
(lsize
ks_heapmake_##name(size_t
uv_buf_t
l[k+1]))
__sort_lt(l[k],
(temp
*filter
a2[1],
*fn_secret)
bgzf_read()
segmentation:
*i
curr;
++p);
96},
(wake_at
table->hpack_size
maximized
bgzf_open(const
*k++;
length
sizeof(priolist->list.entries[0])
*j))
H2O_STRLIT(h2c-14)))
HTML-escapes
eb)
nbytes);
&ts,
finalostream_send;
conn->ws_callbacks.on_msg_recv_callback
very
UV_RUN_DEFAULT);
gmt.tm_year
(step<<1)?
h2o_file_handler_t;
type
int_data[i]);
*int_data;
*eb;
HEADER_TABLE_ENTRY_SIZE_OFFSET
WOULDBLOCK
*ea,
Host
kv_resize(type,
{35,
suffix
(__sort_lt(*(i+1),
Block
131},
*i;
h2o_malloc(sizeof(*conn));
global.k[i]
*p++
ftpaux_t;
eb;
cb,
introsort
*i,
pool->directs;
a2[1-curr];
a2[curr];
j);
temp?
C.
is_read==0).
OPENSSL_VERSION_NUMBER
*a,
*buf,
(h2o_http2_stream_has_pending_data(stream))
(h2o_tolower(name[10]))
*hmm_simulate(const
*a2[2],
h2o_http2_conn_t,
KSORT_INIT(name,
0x3333333333333333llu);
ks_heapsort_##name(n,
hd);
b)
ks_rewind(ks)
parse
kick-out
ks_isort_stack_t;
*left,
q7
1));
y->is_internal;
cmd->flags
kr_sample(_kr,
1)],
(0.1.1):
{190,
2008-09-13
stable.
Linux
0x7fffdcu
f]
Mac
(void*)&conf->loggers,
KS_ATTR_PRINTF(2,3);
177
my
introsort.
(kr->mti
impact
conn->ws_callbacks.send_callback
x.key
l[i];
khttp_connect()
Accelerated
realloc(cigar,
(0.1.2):
(and
((xtra&KSW_XSTART)
sizeof(size_t)
dst_buf->len
on_head_timeout(h2o_timeout_entry_t
previous
msg_len,
s->s;
mergesort().
knaux_t;
*element
(0.1.3):
chr(p
offsetof(h2o_http1_conn_t,
end_loop16;
2008-11-16
shuffle/permutation
digest
(0.1.5):
tcnt[0]
2011-03
hpack_header_table->num_entries)
sample
<attractor@live.co.uk>
MIT
defined(_SGI_COMPILER_VERSION)
n-1,
kn_format(node,
printf(\t%d,
(kr->mt[i+1]
init
p->n,
(_qle)
1]&0xf))
printf(erfc(%lg):
(z+4);
http_host[l]
recursion
stream_id,
hmm_data_t;
get
kn_format(const
strlen(numbuf),
p->d);
(decoder->_hex_count
rol32(b,
conn->_write.streams_with_pending_data.list.size;
(p->d
precedence).
numbuf);
&node[p->child[i]],
k-small
free(he);
kl->head->next
&kh_val(h,
kputc(',',
<sys/select.h>
reference
handler;
*_error
self->upstream.port
add_node(p,
ku->l_buf
*******************/
__push_back(aux->n);
h2o_hpack_encode_string(dst,
D;
Hmax
j;
__push_back(x);
aux->node[stack[i]].parent
conn->super.ctx
stack[i];
error,
handling
(pthread_mutex_trylock(&pool->_mutex)
sizeof(int));
gold1
byte
aux->node[x].child
*arg);
cigar;
m);
link_shared(h2o_mempool_t
src)
aux,
aux->n,
strncpy(http_host,
45
t)
'(')
',')
(*p)
(home
(char*)nhx;
*dst++
stands
pthread_mutex_unlock(&t->lock);
step;
h2o_ssl_register_alpn_protocols(SSL_CTX
__sort_lt)
(conn->_write.pool
YOML__TYPE_UNRESOLVED_ALIAS
cur_tests->failed
fw
H2O_TOKEN_LAST_MODIFIED
stack
*elements_end
2));
st_h2o_mempool_shared_ref_t));
__push_back(y)
*ret;
msgarg
(a[ia]
*aux;
hd->s
d,
*_error)
*mimemap)
sig[29];
%zu\r\n,
nbeg);
socket_connect()
strncpy(r->name,
(uint64_t)sym->code
check_flatten(h2o_mempool_t
strtod(p
(nfail
']');
probing
nend
(create_listener()
&conf->global_config);
'[')
NGHTTP2_HUFF_SYM
++p)
h2o_timeout_unlink(&conn->_write.timeout_entry);
(ctx->ssl_ctx
conn->_prevreqlen);
r->d
HMM_POSTDEC
239},
90
tol
offsets[n++]
m)
_ok(int
on_config_keepalive(h2o_configurator_command_t
this!\n));
header,
aux->node
kthread.h
*value;
kl_init(name)
kl_pushp_##name(kl)
1.,
kh_n_buckets(h)
aux->max)
r->name
yaml_parser_t
*config);
delta;
0.1.0-6:
*yoml__parse_mapping(yaml_parser_t
rret;
knhx.h
rol32(value,
q;
hostconf->hostname.base,
kurl_read(f,
(uint8_t*)calloc(l_buf,
settings->member
start,
struct;
ks_combsort_##name(n,
sizeof(kseq_t));
(kurl_seek(f,
16)
*append_unsafe_string(char
f
sizeof(self->buf));
<url>\n);
key_t,
hmm_par_t;
hmm_Viterbi(const
UNIX_SV
1)
length]
gethostbyaddr((char*)&addr,
h2o_res_t
[-c
yoml_type_t
path,
&p,
str;
{127,
strtol(optarg,
'c')
((c
mask)
opt;
*p;
request_gathered_write(conn);
slot_index;
54},
kputsn(sig,
kputsn(p->name,
((e
h->n_occupied
resources.
(h2o_buf_t*)h2o_hpack_static_table[static_table_name_index
{233,
((fp)->offset)
kputsn(:,
str.s,
YYYYMMDD
server.key)
s3_sign(secret,
_shared;
kputsn(bucket-1,
supplied
perror(open);
self->index_files;
colon,
kputsn(Date:
&tmt));
localt.tm_mday,
((fp
str.s
sizeof(h2o_handler_t))->on_req
*element_len,
str.l
Date
h2o_send_error(req,
strlen(obj),
*token_len
KSW_XSTART:
int)
676.5203681218835
ftp_open(fn);
obj
example.com)
rseq
144},
kputsn(bucket,
st_h2o_uv_socket_t*)_sock;
alphabet
fmt,
(h2o_memis(req->authority.base,
active)
target[i]
kputsn(https://,
curl
d
101;
strlen(id)
(id_secret
KNERR_MISSING_LEFT
_mm_and_si128(tmp1,
initial_window_size,
s3_read_awssecret(fn_secret);
*j,
id_secret
table->entry_start_index;
{230,
SA[i]=0
loop;
__kb_split_##name(b,
char
[int]
AWS
acquire
'/';
'9'))
bucket;
bt1_countInU64(x[i],
{0,0,0};
*obj;
put
(*rr
http://lib.stat.cmu.edu/apstat/245
H2O_STRLIT(/post-test)))
(size_t)content_length);
s->l,
nlocks);
5.58106146679532777
\r\nconnection:
(uint8_t*)fp->compressed_block;
memcpy(s->s
s->m);
SWPS3;
(to_sync)
http://sdcc.sourceforge.net
%s\r\nconnection:
H2O_TOKEN_CACHE_CONTROL;
http://ndevilla.free.fr/median/
s->m
s->m)
MSVC
(v).m))
kputs(const
DEC(__clang_major__)
kstring_t
0x80);
st_yoml_mapping_t
str_len
kstring_t;
socket_wait(int
list;
&stream->_link.link);
l,
l);
hd->b
swap_input_buffer(h2o_input_buffer_t
updatestates
buf,
C,
(char*)malloc(l);
buf
Pike
*v;
uv_run(ctx->loop,
'\n';
buf[l]
127,
fread(buf,
0x6fu
uv_now(loop);
sizeof(pool->chunks->bytes)
fopen(path,
sentinel.
/.awssecret);
home),
&seq->seq,
strcat(strcpy(path,
(kseq_read(kst)
responsible
arg
2008-03-10
12;
strlen(home)
h2o_buf_is_token(result->name))
(str->s
getenv(HOME);
230},
home
limits
{4,
191
*home;
STATUS_HEADER_MAX_SIZE
buf[128],
on_write);
point
'='
bits,
host_config->handlers);
160
slot_index
krand_t
'=';
proof)
6;
currently
sprintf(tmp,
pipe(pfd);
kh_foreach(mimemap->table,
256,
257
0x3f)
q->H0;
DEC(__HP_cc
STDIN_FILENO;
19?
entries
rebuild_path(pool,
s.m
(j
kv_init(v)
sha1_write(&s,
lock;
(ks->begin
%d,
epoll
s;
str
kl_init_##name()
j,
*digest;
KT_MAX_TASKS)
out[29])
')
s3_sign(const
0x7ffffe4u
*hmm_expect(const
*last_event);
Viterbi
/*******************
*target,
*timeout
h2o_context_t::handlers.
L-1;
(seq->qual.l)
HMAC_OPAD);
KNF_TYPE_FTP
h2o_socket_read_start(listeners[i].sock,
',';
restriction,
0xB5026F5AA96619E9ULL
h2o_timeout_unlink(h2o_timeout_entry_t
(*on_req)(h2o_handler_t
HMAC_IPAD);
aux->node[x].child[m]
146
*vars;
kurl_fileno(fp)
memcpy(s->keyBuffer,
{255,
ty)
l_key)
char)protocols[i].len;
f?
key,
uint8_t*
headers;
sha1_init_hmac(sha1nfo
0xffffffeu
(e
(kts_worker_t*)calloc(t->n_threads,
xx,
capacities
h2o_proxy_send_with_pool(h2o_req_t
NPN
(a>>8&0x0000ff00)
bio,
a<<24
H2O_STRLIT(vary)
opt.s3key_fn
3);
fb,
_mm256_and_si256(t0,
13);
ok(doc->data.sequence.elements[0]
Insert
56)
append)
(kl->head->next
sha1_write1(s,
++s->byteCount;
(loop
*kmemmem(const
sha1_write1(sha1nfo
evloop_do_on_socket_create(sock);
url;
thread_ids
memcmp(self->virtual_path.base,
3]
http://www.danielsoper.com/statcalc/calc36.aspx
(kurl_isfile(ku))
e=E'(i,j)-gape
mp->buf[mp->n++]
key)))
KSORT_SWAP(type_t,
s->state.w[0]
log(A[l]
config_str,
rol32(a,
on_deferred_connect_cb(h2o_timeout_entry_t
s3aux_t;
dst)
BGZF_MAX_BLOCK_SIZE
'c'
0x04
c)
decoding
src_end)
puts(dump);
sizeof(conn->_write.bufs));
kf_lgamma(b)));
60)
d)));
(max_wait
(there
g;
candidates;
10;
pool_entry_t,
(b
(z
sock->input->size
(d
self;
{44,
swap_tmp
Gecko/20100401
place
':')
cells
s->buf.w[i&15];
text
**y)
mt[KR_NN];
s->buf.w[(i+2)&15]
slightly
bytes_to_consume
s->buf.w[(i+13)&15]
0x7fffe0u
Basic
(p->name)
s->state.w[2],
strlen(key->data.scalar));
(saint_t)k,
s->s[s->l]
_cb;
ENTITY('&',
b
(32
global_config
(((value)
below)
prev_initial_window_size;
bgzf_close(BGZF
s->bufOffset
ret
*ks);
sizeof(ftpaux_t));
%lg,
0x7ffffeau
table[]
window_update)
ret[0]
((kl)->tail)
sha1_init(sha1nfo
kputc(')',
*seq)
*port)
keyBuffer[BLOCK_LENGTH];
byteCount;
get_max_wait(h2o_evloop_t
b[HASH_LENGTH];
0);
{204,
__AC_KHASH_H
list.entries[i];
partly
kn_parse(s,
H2O_STRLIT(/index.html)
data_size
http1_is_persistent;
BLOCK_LENGTH
expect_preface(h2o_http2_conn_t
accept
__kmin_hj_aux(func,
wslay_event_context_server_init(&conn->ws_ctx,
DEC(__IBMC__
<===\n);
based
fn;
simulate
HMAC-SHA1
te2;
/*****************
ku->err;
sizeof(REQ)
&res))
ku->fd;
kurl_eof(const
KURL_SEEK_OUT,
improve
rehashing
hh
(r
strlen(content-length)
HMM_INF
cur_off);
H2O_HTTP2_FRAME_TYPE_CONTINUATION,
workers
kurl_read(ku,
mergesort
small,
concurrently
new_off;
jump
KR_LM
(seek_end
0x89,0xab,0xcd,0xef,
(h2o_find_header(&req->res.headers,
library.
*p,
mime_type)
*config
error:
preV
extensions
lastest
(*cur
C[i]
st_h2o_mempool_shared_entry_t,
emitting
ctx->globalconf->req_timeout
include
245
SEEK_END),
kurl_isfile(ku))
n_col,
needle_len);
header_table->entry_start_index,
nghttp2
new_off
kstream_t
fails,
<stdio.h>
h2o_hostconf_t
Nong
*_n
kurl_seek(kurl_t
handle_ping_frame,
ku->p_buf;
5;
0x1fffdfu
ku->p_buf)
0x3fcu
rest;
rest);
ku->p_buf,
(ACM
(buf)
rest)
nbytes)
bu1[l];
h2o__websocket_h
3.
{145,
&fds);
*m_cigar
232
(like
(len
ku;
h2o_init_request(h2o_req_t
fn
(failed)
conn->req._ostr_top
SSL_CTX_new(SSLv23_server_method());
add_node(p
qe;
(uint8_t*)calloc(ku->m_buf,
%b
2*CURL_MAX_WRITE_SIZE
ks->f
(!kurl_isfile(ku)
T,
26;
conn->super.ctx->global_config->http2_max_concurrent_requests_per_connection)
fp->retr
dispose_socket
globalconf;
free(a.url);
hp->e[(int)hd->seq[1]][l]
kh_key(h2,
ku->hdr);
CURLOPT_HTTPHEADER,
199)
{125,
mu1,
194},
LMS
curl_slist_append(ku->hdr,
te,
(is_huffman)
a)
SA[--B[c1
&reqbufs,
kurl_close(ku);
a.auth
free(argv[0]);
h2o_config_print_error(cmd,
kl_##name##_t
CPU
opt->s3secretkey
provided)
0),
factor;
local
(opt?
100)
s3_parse(url,
curl_easy_init();
h2o_socket_read_start(sock,
48
(!kurl_isfile(ku))
cbinfo->cb
((int)*t
combsort
gape,
Integer
yoml_free(*target);
(is_file
indeterminate.
lazy-F
q
yoml
n)
12(11):637-638).
p
www.kittyhell.com\r\nUser-Agent:
is_file
cond)
domain
last_stream_id);
*q;
site
(b).key)
bgzf_seek
60
*_secret,
process
*_id,
buf[16];
assert(stream->state
H2O_HTTP2_ERROR_INCOMPLETE;
consumed);
kurl_opt_t
32},
kseq_t
!isgraph(*p))
++q)
*frame)
14))
res->ai_protocol))
kputsn(obj,
sizeof(kstream_t));
test_normalize_path(void)
curl_slist_free_all(ku->hdr);
(ku->fd
h2o_timeout_dispose(pool->_interval_cb.loop,
aux->max?
(ku
iter;
CURL_MAX_WRITE_SIZE);
printf(\n);
*str;
actually
KMEMPOOL_INIT(name,
nanosleep(&req,
cursor
sizeof(lng))
malloc(sizeof(krand_t));
++__i)
req.tv_sec
kh_put(32,
BLOCK_LENGTH;
mat[a];
here
Direct
(maxfd
aux
recv(fd,
*id,
0xf0,0xe1,0xd2,0xc3
\037\213\010\4\0\0\0\0\0\377\6\0\102\103\2\0\0\0;
0x7ffffefu
FD_ZERO(&fdw);
s->state.w[i];
a2[0]
FD_ZERO(&fdr);
file,
(curl_to
&curl_to);
to.tv_sec
h2o_accept_ssl(&ctx,
1];
va_end(args);
fdr,
0xf0f0f0f0f0f0f0full)
*client_ctx;
(l
parser
*compressed_block;
ku->buf
(ku->l_buf
sizeof(config->hosts.entries[0]),
/
(uint8_t*)settings_decoded.base,
boundary
*k,
res,
a.date,
read()
future?
t1
rewriting
1:
c->super.exit
man
0x6bu
Linux,
ssl_ctx);
seq->qual.l)
warpper
2:
Mac.
new_entries;
ku->m_buf)
Bug
(uint8_t*)realloc(ku->buf,
ku->buf,
mp)
handshake
h2o_buf_init(H2O_STRLIT(\x82\x86\x84\x41\x8c\xf1\xe3\xc2\xe5\xf2\x3a\x6b\xa0\xab\x90\xf4\xff)),
trailing
defined(__TRU64__)
ku->l_buf);
Netlib
kbi_DNAcount64(x[i],
revised
masks
slowloris
returns,
says:
kh_init(int);
SHA1_Update(&ctx,
nmemb;
x)
vend,
process_slot(const
*ku
6;comment=hi\r\nhello
http://lib.stat.cmu.edu/apstat/66
AF_UNSPEC;
ku->off0);
h2o_http2_encode_frame_header((uint8_t*)outbuf->base,
H2O_HTTP2_ERROR_INTERNAL
buf.base
0x7fffe8u
curl_easy_setopt(ku->curl,
);
CONNECTION
(off
on_accept(uv_stream_t
*maybe_eos)
H2O_STRLIT(\xf1\xe3\xc2\xe5\xf2\x3a\x6b\xa0\xab\x90\xf4\xff)
success.
ku->curl);
packet).
rc
h2o_ostream_send_next
fabs(d)
(_bgzf_seek(fp->fp,
table->entry_start_index,
rc;
ks->begin
pthread_cond_t
_bgzf_write(fp,
re-authorize
fd_set
S3,
MIPSpro
FIXME:
ku->off0)
__VA_ARGS__,
seq->seq.m)
sock->super.ssl->input.encrypted->size
EMIT_HEADER(end_headers)
developers.
B[i]
do_seek)
''
ubyte_t*)_str;
[gzgets]
prepare(kurl_t
while
~defined(_USE_KNETFILE)
ok(phr_parse_request(s,
curl_global_cleanup();
defined(__SINIX__)
kurl_destroy(void)
{0,0};
*b64tab
numbuf[128];
safe
[buf,
txt,
thread
win32
/**********************************
k2)>>2)
value->len);
2.506628274631001
assert(!unexpected
node->next)
SEEK_CUR)
(double)(t2-t1)/CLOCKS_PER_SEC,
a[n-pop-1],
bufis(const
band
free(ku);
(s
*date,
*hdr;
knhx1_t;
err;
done_reading;
conn->_input_header_table.hpack_capacity
p_buf;
(num_handlers_before_config
(*h2o_configurator_exit_cb)(h2o_configurator_t
{140,
m_buf
j++);
iff
l_buf
rr;
recommended
CURL_MAX_WRITE_SIZE*2
remote
<0
mp->max
ll;
H2O_TOKEN_IF_MATCH,
self->upstream.sockpool
normal
400,
YAML_SEQUENCE_START_EVENT:
UINT32_MAX;
*ks)
link_to_statechanged(sock);
0x3ffffe6u
might
*khttp_parse_url(const
p_buf
step)
equals
actual
++j);
buffer;
(kbnode_t*)calloc(1,
(fabs(q
H2O_TOKEN_VIA;
2008
h2o_buf_init(
off_t
knet_dopen(fd,
CURL
{224,
multi
yoml_free(seq);
H2O_TOKEN_ACCEPT_RANGES;
ia
kurl_t
4096
t->to_sync
recv()
reqread_start(conn);
fp->offset
printf(%d,
-
socket_connect(fp->host,
(default)
kroundup32
defined(__INTEL_COMPILER_BUILD_DATE)
memcpy(buffer
mcnt
kurl_isfile(u)
type_t
fd;
pseudorandom
06
APIs
*high,
kurl
strlen(data));
<ctype.h>
*ts);
<fcntl.h>
alloc_inbuf_tcp(uv_handle_t
n_threads,
_mm_set_epi32
kt_for(int
h2o_linklist_unlink(&c->_link);
kt_sync(kthread_t
(void*)(client_ctx
(*func)(void*,int,int),
h2o_evloop_create(),
*loop,
n_threads);
147
*kt_init(int
path;
s->state.w[1],
H2O_TOKEN_STATUS
sizeof(type)
yaml_parser_delete(&parser);
free(ks->buf);
%s\r\ndate:
-0.31,
*elements;
{73,
(KU_DEF_BUFLEN<<1)
&t->w[i]);
kmp_free_##name(mp,
ok(req.path.len
is_eos;
kthread_t;
write,
ks_ksmall_##name(n,
terminate
stream,
w,
MIE_ALIGN
*m_cigar,
uv_loop_init(test_loop);
kputsn(GET\n\n\n,
\n===>
2))
*elements[1];
a,
_mm_set1_epi8(q->shift);
(kseq_read(ksq)
kf_betai_aux(double
gapo,
'.',
H2O_STRLIT(refresh)
*query,
kseq_destroy(kseq_t
(ctx->_timestamp_cache.uv_now_at
H2O_VECTOR(h2o_configurator_command_t)
req->entity
end);
CRLF
ks_heapadjust(name,
case,
/************************
frame.length,
aligned
ks_shuffle_##name(size_t
((a[abc],d1)x:0.5,((b[&&NHX:S=MOUSE],h2)[&&NHX:S=HUMAN:B=99][blabla][&&NHX:K=foo],c));
(ftp->ctrl_fd
bowtie-0.9.8.1
one
TYPE_MAP('l',
sha1nfo;
simply
*m_cigar?
*hp_end,
end-of-file
exclusive;
na1
*new_keys
*h2o_file_get_mimemap(h2o_file_handler_t
ssl:
eh[j]
element
22,
goes
lib/rproxy.c
H2O_HTTP2_ERROR_CANCEL
adjust
38
sizeof(chunked_encoder_t),
higher
track
only)
KSW_XSUBO:
KSW_XBYTE:
h2o_strdup(&req->pool,
Guide
guarantees
non-negative
KSW_X*
attempted.
Handsaker
http://example.com:81/abc,
positions.
~j
str->l,
two-byte
kh_begin(h)
xtra==0,
__x)[0];
isdigit(aux->response[2])
l;
needle,
conn->super.peername.addr
alignment
pasv_ip[0],
extra
gape
reader->super.handle_incoming_entity
h2o_consume_input_buffer(&conn->sock->input,
EM
L;
inbound
public-domain
(maximum
penalty;
special
necessary;
gap
pasv_port,
15);
h2o_http2_data_payload_t
10.
*offsets
\v,
255
cannot
H2O_CONFIGURATOR_NUM_LEVELS
{52,
tlen
(typically
H2O_HTTP2_FRAME_TYPE_WINDOW_UPDATE
input)
(uint32_t)len,
Linux/Mac,
H2O_TOKEN_HTTP2_SETTINGS
Intermediary
*bmGs,
query
304
end
gamma(b)
SA[i]))
test_response(void)
O,
((h)->vals[x])
{58,
st_h2o_evloop_select_t*)sock->loop;
is_complete(const
_kswq_t;
*ku;
ks->is_eof)
*--b
(size_t)(gap
'h':
0x80000
2nd
conn->max_open_stream_id))
print
KSW_XSUBO
_id,
h2o_socket_close(sock);
0x20000
KSW_XBYTE
output)
__AC_KSW_H
h2o_res_t;
<<
beta
`format`
h2o_mempool_clear(&sock->ssl->output.pool);
0x1ffdu
0.15,
x[i]
kb_putp(name,
s,
he->A[k][l]
r.value->base,
kf_gammap(double
newsize
gamma
g_defr;
11))
h2o_linklist_is_linked(&entry->_link);
use.
*********************/
0x3fau
Special
DO
modifications,
/*********************
defined(_MPRAS)
Brent's
do_swap
*(*on_context_init)(struct
SET(MAX_FRAME_SIZE,
cnt/2;
kmin_brent(kmin1_f
uv_loop_new();
error_code;
netwrite(ftp->ctrl_fd,
Hooke-Jeeves'
h2o_http1client_connect_cb
max_calls);
free(table->entries);
*data,
alias
void*);
version);
KF_TINY)
(int8_t*)q->qp;
double*,
accelerate
H2O_VECTOR(h2o_buf_t)
Check
(*kmin_f)(int,
double
1e-7
KMIN_EPS
do_dispose_socket(h2o_socket_t
_mm_and_si128(t0,
((direct
supplying
Takuji
0.5
ELEMENT_TYPE_BYTES_SENT,
addr,
/**************************
(client->sockpool
h2o_now(ctx->loop);
stack)
kr_rand(krand_t
q->qp
krint64_t
allocate
255)
a[0]))
h2o_configurator_command_cb
conn->upgrade.data;
a.date);
x)[n]))
*(_cnt))
(uint8_t*)ret.base
ktf_worker,
*(_cnt)
mode,
&loop->writefds);
((*(_cnt))++
_cnt)
argv,
_krand_t;
(--cnt_left
ok(memcmp(b.base,
h2o_mempool_alloc(&sock->ssl->output.pool,
(p->n)
new_flags
url_encoded)
krint64_t;
(bgzf_flush(fp)
1e-14
memset(config,
p->n;
80);
Pseudo-random
*_bufsz)
ks_introsort_##name(size_t
ksq->seq.m;
PICOTEST_FUNCS;
__read)
cnt);
++cnt,
_dummy;
numtests_in_subtest);
H2O_TOKEN_LINK;
SW
(**test)();
KO_HTTP;
src_end;
arr
test_name);
0x01
window_size_increment)
a[0];
is_get?
*host
numtests_in_subtest
he->Q0);
rp
`path`
kl;
(m)>>4)
strlen(test_name));
colon_in_test_name
sock->_flags
(int)(colon_in_test_name
(a)=(b);
strchr(test_name,
evloop_do_on_socket_export(sock);
DEC(_COMPILER_VERSION
descriptor
(req->_ostr_top->next
0]]
*conn,
KTHREAD_H
test_name
h2o_access_log_register(ctx->hostconf,
{20,
fill_buffer(ku)
++test,
memcpy(key_src+24,
(strcmp(fn,
(test
1]
chr(i);
end.
presummably
p0
*bytes;
an
alloca(strlen(fmt)
*escaped_fmt
*_fd)
all_success
cache_t)
HMM_BACKWARD;
#__VA_ARGS__
<alloca.h>
(yoml__resolve_alias(&doc,
gapo)
aliases
*head,
((doc
Mersenne
kf_betai_aux(b,
SOL_SOCKET,
(*target)->data.alias);
sock->_wreq.bufs
h2o_vector_reserve(&req->pool,
(*target)->data.sequence.size;
**target,
kk)
Software
event.type;
shrink_factor
{199,
h2o_file_send(h2o_req_t
entry->name
_unused)
_mm_srli_epi32(b,
yoml__parse_sequence(parser,
event.data.scalar.anchor,
<sys/stat.h>
H2O_VECTOR(h2o_filter_t*)
on_send_next);
ku->done_reading
deferred_proceed_cb(h2o_timeout_entry_t
{79,
yoml__new_node(YOML_TYPE_SCALAR,
rol32(t,
*tests[]
content-length);
YAML_SCALAR_EVENT:
decoder;
r,
771.3234287757674
yoml__strdup(event.data.alias.anchor);
vvar,
H2O_TOKEN_WWW_AUTHENTICATE,
sizeof(*node),
h2o_hpack_header_table_t
yoml__new_node(YOML__TYPE_UNRESOLVED_ALIAS,
t;
YAML_ALIAS_EVENT:
t->name->len,
2)))
yaml_event_delete(&event);
sec-websocket-key
max_wait
YAML_DOCUMENT_START_EVENT))
-(gapo
memset(req,
kh_resize(name,
YAML_STREAM_START_EVENT
examples.
host[80],
assert(ku->p_buf
unchanged.\n);
he->E[b][l]
yaml_parser_parse(parser,
event
wait
11);
dst_index
fclose(fp);
kh_exist(h,
YAML_NO_EVENT;
V=Version,
delimiter)
two
event;
map;
ks_shuffle_##name(n,
H2O_MAX_HEADERS
to_read
map->data.mapping.elements[map->data.mapping.size].value
map->data.mapping.elements[map->data.mapping.size].key
(map->data.mapping.size
(n_running
h2o_context_init(h2o_context_t
ib
kh_put(name,
realloc(map,
localt;
sizeof(knaux_t));
map
beg;
COMMON_CODE(8,
tid)
YAML_MAPPING_END_EVENT)
client->_cb.on_connect(client,
DEC(__INTEL_COMPILER/100)
']','\0'};
((key
43);
map->data.mapping.size
114
event->data.mapping_start.anchor,
k1
data.mapping.elements),
p));
header_table->entry_start_index;
check?
khttp_parse_url()
SHA1(key_src,
FTP
*A0;
on_config_timeout_keepalive,
new_node;
data.sequence.elements)
just
MinGW's
dst[28]
close_cb)
compatibility
value.len);
edition,
free(__kstack);
&unhandled))
parse_int(const
12.50734324009056
yoml__parse_node(parser,
char)*s
on_config_mime_settypes,
unhandled;
event);
y[i-1][j];
event->data.sequence_start.anchor,
data.sequence.elements),
KHASH_INIT(ipk,
--*bufcnt;
yoml__new_node(YOML_TYPE_SEQUENCE,
*seq
y
node->_refcnt
self->fd
<curl/curl.h>
h2o_timeout_init(ctx->loop,
node->column
event->start_mark.line;
node->type
*node
LIKELY(j
ks_shuffle(name,
*anchor,
ea)
*yoml__new_node(yoml_type_t
do_send_file(self,
strdup((char*)s);
&abc\n
*parser,
max<<1
h2o/http2.h
8));
2)
{169,
(yoml__resolve_alias((*target)->data.sequence.elements
1)
(1.
KSORT_INIT_GENERIC(int)
seek_end
dispose_host_config(hostconf);
637.3336333788311;
mid,
doc->data.sequence.elements[0]->data.mapping.elements[1].value;
zs.zfree
t-i)
&maxfd);
i);
st_h2o_http2_ping_payload_t
h2o_linklist_init_anchor(&slot->active_streams);
doc->data.sequence.elements[0];
YOML_TYPE_SEQUENCE);
0;}
{249,
self->vars,
c:
0x100000
printf(K-S
VVRRPP
d)
knet_seek(knetFile
h2o_mempool_init(h2o_mempool_t
h2o_config_init(&globalconf);
doc->data.mapping.elements[0].value;
token_len,
2);
cs
f\n);
self->etag_len
(last_len
sha1_final_hmac(&s);
EOS
b\n
sscanf(fp->response,%*d
a:
---\n
h2o__memory_h
B,
p2
h2o__tokens[H2O_MAX_TOKENS];
ok(doc->type
ok(doc
gamma(a)
123},
(h2o_logger_t)
Chaos
disabled
buf[i]
strlen(s));
factor
(yaml_char_t*)s,
cs)
(client->_method_is_head
nevents
_krand_t
ret);
yaml_parser_set_input_string(&parser,
e=E'(i,j)
cand_len
*doc;
u4;
_write._pools[0]));
node->next
priolist->list.entries[i]
cooki,
fdw,
khint32_t
pthread_join(t->w[i].tid,
H2O_STRLIT(/reproxy-test)))
b[1..L-1],
(node->type
strdup(fn);
*nbeg,
EV_DELETE);
on_accept(h2o_socket_t
new_off)
LONG_MIN);
*yoml_get(yoml_t
quick
F_SETFL,
plen
localt.tm_sec,
(pid
name))
(frame->length
SET_AND_UPDATE(filter,
file_size;
yoml_find_anchor(node->data.sequence.elements[i],
H2O_STRLIT(connection)
name)
strcmp(node->anchor,
(node->anchor
*name)
HTTP/1.x
sizeof(saint_t))
free(node->data.alias);
0x5555555555555555ULL;
lead
Z_DEFAULT_COMPRESSION;
0x3fffe6u
yoml_free(node->data.mapping.elements[i].value);
cand_len)
HTTPS
yoml_free(node->data.mapping.elements[i].key);
node->data.mapping.size;
get_max_wait(&loop->super));
free(b);
process_request(conn);
payload->priority.weight
*kl_pushp_##name(kl_##name##_t
c))
h2o_timeout_t.
*alias;
yoml_mapping_t
fc;
why
sequence;
listen,
*anchor;
(needs_slash)
column;
handler
max_l
h2o_linklist_insert(&conn->_write.streams_without_pending_data,
yoml_mapping_t;
invoke
conn->_ostr_final.do_send
176.6150291498386
21,
l
*j));
H2O_TOKEN_SCHEME;
(read(aux->ctrl_fd,
*****************/
st_yoml_mapping_element_t
st_yoml_sequence_t
(proto.len
st_h2o_hostconf_t
(gzread(fp,
let
max_request_entity_size;
0x33333333);
1.755667163182642;
H2O_SOCKET_FLAG_IS_CONNECTING);
YOML_TYPE_SEQUENCE,
*token
cmd->name
yoml_h
free(aux);
(*cb)(void));
h2o_contains_token(const
h2o_malloc(sizeof(*self->upstream.sockpool));
__FILE__,
aware
%s
_ok(cond,
ok(cond)
easy
pipe
%u\n
bgzf_dopen((fd),
prev_input_size;
h2o__linklist_h
_ok(!
(test.failed)
&h2o__tokens[H2O_MAX_TOKENS].buf;
field
done_testing();
cb();
name);
++test_level;
0x1ff8u
safe:
cur_tests
(rest+2)],
H2O_STRLIT(x-reproxy-url)
cur_tests;
req->res.status
128
*parent_tests;
cur_tests->num_tests);
BGZF;
listener->addrlen
~(unsigned)HMM_BACKWARD;
printf(1..%d\n,
done_testing(void)
`path`
keepalive)
phr_parse_request(const
++cur_tests->num_tests);
shrink
&headers->entries[cursor].value;
not
string;
7,
,
CURLPAUSE_CONT);
from
priolist->list.entries[i];
cases.
on_ws_message(h2o_websocket_conn_t
Notify;
253},
vprintf(fmt,
kr->mti
ks_heapmake(name,
fmt);
on_config_mime_addtypes,
*(i+1);
header->name->len
va_start(arg,
va_list
fp->block_address
h2o_http2_window_update(window,
H2O_HTTP2_ERROR_PROTOCOL);
curl_multi_remove_handle(ku->multi,
54
indent(void)
h2o_mimemap_get_default_type(h2o_mimemap_t
test_level
decode_ssl_input(sock);
test_t
KSEQ_INIT(type_t,
10
Non-linear
30},
fc)
h2o_socket_close(client->sock);
picotest.h
sock->_cb.write
status);
open(url,
tab[4];
h2o_ssl_register_npn_protocols(SSL_CTX
(ALPN
socket(AF_INET,
--strLength;
(l_key--)
handshake_cb);
record
polled
h2o_socket_is_writing(h2o_socket_t
dir
sprintf(fp->retr,
**str_data;
n_slots;
KS_ATTR_PRINTF(fmt,
value,
emit_wday(p,
partial
600,
releases
')';
copy_length);
m=minor))
whom
counters.
(int*)calloc(m,
'\0';
level
threads!
starts
(((((((q7
self->virtual_path.len
*h2o_socket_connect(h2o_loop_t
defined(__BORLANDC__)
KS_SEP_LINE,
fabs(dx[k]))
++*num_headers)
','
upgrad,
==
update
MSVC
<sys/event.h>
KF_TINY
(yoml__resolve_alias(&(*target)->data.mapping.elements[i].key,
defined(_MSC_VER)
determines
st_h2o_socket_ssl_t,
DEC(__GNUC__)
/wp-content/uploads/2010/03/hello-kitty-darth-vader-pink.jpg
host:%s\n,
servlen
(kts_worker_t*)data;
-payload.error_code);
ELEMENT_TYPE_EMPTY,
146},
AS245,
cb;
&self->buf_sending,
addrinfo));
*type
*_num_elements)
VVVRRRPPP
req
Ec[k]
^
element_size,
***
__TI_COMPILER_VERSION__
BGZF_ERR_ZLIB
(strstr(fn,
DEC(_RELEASE_MINOR)
p6
((info->fd
((v1).m
sizeof(pthread_t));
encode_huffman(uint8_t
offsets
performance
PGI
49
obtaining
protocols[i].len
(void)argv;
h2o_proxy_register_configurator(h2o_globalconf_t
means
free(le[b]);
DEC(__IBMC__/10
BGZF_CACHE
VisualAge
key;
55,
*doc,
generator
core
H2O_STRLIT(/)
800
body
run_pending(h2o_evloop_t
zOS
num_listeners;
he0
url)
0x3ffffe5u
flags)
DEC(__DECC_VER
ksw_align().
*_ostr_top;
(avail
n_threads
DEC(__DECC_VER/10000000)
stream->_link.slot);
(ks->is_eof
h2o_send_inline(req,
gzopen(argv[optind],
calloc(1,
__HP_cc
uv_loop_delete(loop);
defined(__HP_cc)
10000,
enable_push,
H2_PROTOCOL_IDENTIFIER;
(mult
h2o_evloop_create();
H2O_HTTP2_FRAME_FLAG_PRIORITY
opt->s3keyid
Embarcadero
KNF_TYPE_LOCAL
path:%s
whose
((ref
mapping,
*h2o_mimemap_clone(h2o_mimemap_t
(cnt_left
dies
defined(__PATHCC_PATCHLEVEL__)
low)
kh_clear(name,
(c->enter
kb_intervalp_##name(b,
DEC(__PATHCC_MINOR__)
w->t->func(w->t->data,
DEC(__PATHCC__)
kstream_t;
COMPILER_VERSION_TWEAK
charge,
&path)
but
0x1,
SETTINGS_HOST_BIN
0x6ed9eba1
capacity;
10)
dx,
memcmp(target
now);
2009-09-26
Q0,
proxy.timeout.io,
-6
`make
OTHERWISE,
whence
*hh));
expected
n_running,
COMPILER_VERSION_MINOR
self->up_req.bufs;
seq->seq.m
*req,
++obj);
memset(conn,
defined(__INTEL_COMPILER)
__m128i*)Am1Tbl);
%lf\n,
/[rwu0-9]+/:
needle_len))
defined(__18CXX)
*protocols;
(*bufcnt
fabs(x[k])
(!ks->is_eof)
create
value->len
use,
112.0792914978709;
Alias
exit;
127},
h2o_mempool_init(&pool);
&zero_timeout,
localt.tm_mon
&sock->super;
(C
opt_ch;
a)))
(added
free(kl);
res
Hooke
*frame);
h2o_http1client_ctx_t
_mm256_add_epi8(x,
0x5a827999
*allow_psuedo,
kb_putp_##name(b,
conn->_is_complete
depend
yoml__resolve_alias(&(*target)->data.mapping.elements[i].value,
d\n
((((((p6
COMPILER_VERSION_PATCH,
h2o_fatal(const
setup_signal_handlers(void)
*alloced_ptr;
Return
(path
h2o_add_header(&self->src_req->pool,
ctx.loop
no
specific
**test,
table->num_entries)
(int)headers[i].name_len,
test_lib__mimemap_c);
printf(%.*s:
10)%10)),
WHETHER
hmm_backward(const
memory.
p[k]
object
h2o_mempool_release_shared(entry->name);
*)T)[i]
tid);
ftp_open_end;
80},
new_capacity
ku->l_buf)
aux->error
%.*s\n,
pointing
free(argv);
mu1
printf(HTTP/1.%d
tokens.pl
*n;
write_cb);
insufficient
h2o_config_scanf(cmd,
client->sock->input->size);
Nodes
KBTREE_INIT(int,
window_size_increment;
cigar[(*n_cigar)-1]
k2;
fwrite(client->sock->input->bytes,
(h2o_tolower(name[12]))
(cbinfo->cb)(cbinfo->sock,
st_h2o_mempool_shared_entry_t
*url,
(slot_index
sizeof(*mimemap),
do_send(struct
(type_t*)top->right;
But
http://www.mozilla.org/security/announce/2006/mfsa2006-33.html
errstr
*errstr)
fp->block_offset
0xfffffe8u
further
assert(client
scores
h2o/token.h
(tol2
h2o_http1client_connect(ctx,
including
kh_end(h));
oldp;
p,
strcat(escaped_fmt,
&H2O_TOKEN_AUTHORITY->buf)
h2o_socket_import(loop,
ctx->_timestamp_cache.value;
s->byteCount
h2o_http1client_connect_with_pool(ctx,
++cand_index)
--dst)
start]
_mm_and_si128(b,
max_cur_frame_size;
ks_combsort_##name(t
H2O_HTTP2_ERROR_COMPRESSION
in.len,
h2o_add_header_by_str(pool,
******************/
client->sock->input->size,
event->start_mark.column;
fill_size
defined(__ADSPBLACKFIN__)
ksw_extend(int
*k;
(unsigned)port);
freeaddrinfo(res);
((kr_rand(_kr)
%s:%u\r\n\r\n,
s
ksa_core64
((stream_max
10);
free(q);
GET
exp(z
e;
31
req->len
&quot;AS
t-i
((i
%a,
COMPILER_VERSION_MAJOR
str_len,
usage(h2o_globalconf_t
%d
(FLOAT**)calloc2(hp->n,
(node->type)
(yet)
n_col;
*header_table);
ks_introsort(int,
0L);
root
(cs
&port,
directly
(header[3]
expire_before)
1.
*ssl_ctx)
OS,
status,
0x8000
existing
non-printable
fb;
seq[i]
indicating
possible.
x)[mid],
ks->buf[i];
ma[query[k]]);
129},
main_tests,
getopt_long(argc,
hp->m;
*fp
**buffer);
ws_callbacks;
free(*buffer);
*path;
bgzf_set_cache_size(BGZF
h2o_http2_decode_goaway_payload(h2o_http2_goaway_payload_t
header->value.len);
*scheme,
Vmax[1][k]
vec;
HEX(__SUNPRO_C
h2o_timeout_unlink(&pool->_interval_cb.entry);
h2o_lcstris(const
s[sizeof(65535)];
int_packed_t,
bufOffset;
qb;
secret
stream
request
tiny;
if
correct);
(D
H2O_TOKEN_ACCESS_CONTROL_ALLOW_ORIGIN
301);
*globalconf;
h2o_http1client_body_cb
*);
epoll(DEL)
importantly,
*client,
0xff);
silent,
subtest(lib/t/test.c/loopback,
KSTRING_T
1L);
hp->a
URL:
documentation
2);
void*
**qry)
*numbuf)
94},
duplicates
'A'
sockets
(uv_tcp_open((uv_tcp_t*)sock->uv.stream,
kh_end(h))
arrived
H2O_TOKEN_CONNECTION,
6.31,
31},
when
H2O_TOKEN_LINK
curl_multi_perform(ku->multi,
KU_DEF_BUFLEN
Analog
kl_end(kl)
guarantee.
addrlen;
ks_lt_generic)
*client_key);
test_htmlescape);
false
(count
mime-type
KLIST_INIT(32,
**handler
*qry==NULL,
chunked_test);
51,
144
ksort.h
*doc)
h2o_mempool_alloc(&conn->req.pool,
memmove(__KB_KEY(key_t,
<unistd.h>
H2O_STRLIT(/abc/../../def));
{229,
k3);
root,
((fd
addr.sin_port
h2o_create_handler(hostconf,
avoid
kh_clear_##name(kh_##name##_t
tmp2;
c0,
_conf;
ks_lt_str)
src[i].name_len);
`certificate-file`);
sock
no_argument,
sock)
(xtra&0xffff)
h2o_http2_decode_rst_stream_payload(h2o_http2_rst_stream_payload_t
st_h2o_evloop_t
char**
t.w[i].i
accept
fpt,
0))
sockaddr*)&addr,
b);
Technology
(top
MERCHANTABILITY
c0
(keyLen
h2o_http1_accept(&ctx,
(uv_accept(listener,
(*kmin1_f)(double,
delta);
&method_len,
port[10];
H2O_SOCKET_FLAG__EPOLL_IS_REGISTERED
YOML_TYPE_SCALAR:
Darwin
buf[0]
http
strstr(url,
_mm_add_epi32(tmp1,
++header)
252},
H2O_STRLIT(POST))
It
tol1)
filter->_config_slot
((*target)->type)
never
sprintf(body.base,
elements,
read(fd,
Recursively
AF_INET6
s?
*));
(M=major,
seq,
fpr;
callback
gapoe
%l
kswr_t;
seed)
>
notify
pipelined
&generator);
H2O_STRLIT(websocket));
enum
ref->next
kl1_##name
H2O_STRLIT(text/plain));
&len);
st_h2o_websocket_conn_t
vpath.base
#elif
pending
\0&quot;&amp;&#39;&lt;&gt;);
close_cb);
*method_is_head)
host,
SIZE_MAX);
*he1);
s->state.b;
itself,
test_len);
aux->error;
nothing
memset(timeout,
memcpy(dst,
socket
elements_len,
*window,
mag01[(int)(x&1)];
[1..255],
scoring
error
(setup_ssl(server.crt,
assert(0);
0.07,
defined(_M_ARM)
str_data;
test_chunked_per_byte,
{61,
remove
fx1;
readable
h2o_memis(req->path.base,
L
`port`);
delta
&H2O_TOKEN_PATH->buf)
(key->type
chunked_test(h2o_handler_t
KF_GAMMA_EPS
This
sizeof(*handler));
client->_can_keepalive
1.0
_mm_subs_epu8(e,
b->root
++buf)
kmp_destroy_##name(kmp_##name##_t
kr_srand0(krint64_t
84},
*handler
works
unpackInt16((uint8_t*)&header[16])
L-type;
h2o_handler_t
I/O
getnameinfo((void*)&listener->addr,
select(fd+1,
end
:%g,
server.
*))
*cbinfo
ssl_ctx,
digest[i+1]
6.37396220353165;
str.m
39,
225},
CHUNKED_IN_CHUNK_CRLF:
destroy_expired(h2o_socketpool_t
(h2o_vector_t*)&conn->_write.bufs,
cURL
0xffffff9u
block
&opt);
0x6du
KURL_NULL;
_first_chunk;
sizeof(sockaddr)))
following
H2O_STRLIT(HEAD));
sockaddr*)&sockaddr,
*oldp,
config.thread_ids
a.url);
nbeg,
defined(_ULTRIX)
*loop
(h2o_tolower(name[16]))
(i-s
2,
H2O_HTTP2_FRAME_FLAG_ACK
*key_file)
copyright
*cert_file,
n_slots)
ku->off0,
0.1.0-7
1.0/HMM_TINY)
KSW_XSTART
*yoml__parse_node(yaml_parser_t
{210,
(v).m),
at
st_h2o_filter_t
800,
16));
uv_tcp_init(server->loop,
BGZF
HEADER_TABLE_OFFSET)
conn
gzopen(argv[optind+1],
index_file->base,
h2o_malloc(sizeof(*test_loop));
compress_level:8,
h2o_buf_is_token(const
y)[b->t
ready
h2o_buf_init(H2O_STRLIT(\x82\x86\x84\xbe\x58\x86\xa8\xeb\x10\x64\x9c\xbf)),
on_connect(uv_stream_t
SSL_CTX_free(ssl_ctx);
content-length
KU_MAX_SKIP)
h2o_http2_conn_get_stream(conn,
cur_tests->failed;
self->upstream.sockpool,
effort
h2o_mempool_shared_entry_t;
__read,
kurl.h
wslay_event_queue_msg(conn->ws_ctx,
st_h2o_http2_conn_t
H2O_HTTP2_SETTINGS_MAX_FRAME_SIZE
fpq
real_path
regularized
hmm_pre_backward(hmm_par_t
yoml_t
(kb_get(int,
ksw_align()
service
kf_betai(a,b,x)
(h2o_buf_t*)client->data;
KURL_SEEK_OUT
__sync_add_and_fetch(&conf->state.num_connections,
disposed
65535,
h2o/websocket.h
block_end
strlen(key));
YYYY=Year,
(h2o_http2_window_get_window(&stream->output_window)
h2o__null_input_buffer
*fmt);
//h2o_evloop_destroy(loop);
/,
h2o_mempool_release_shared(mimemap2);
kst->name.s,
remaining_input[2]
optarg;
basic
z,
url);
on_connect(h2o_http1client_t
h2o_socket_ssl_server_handshake(sock,
__m256i
uv_run(loop,
(uint64_t)imax<<32
UV_RUN_NOWAIT);
kurl_read(fp,
*retr,
51)
H2O_STRLIT(204)
(h2o_evloop_run(ctx.loop)
lack
&c->_link);
175
`paths`
PARSE(H,
ok(allow_psuedo
(t->type
*buf);
H2O_STRLIT(if-range)
(b,u,c)
read
res->ai_addrlen,
{244,
*data_header_slot
ret.base
placed
__hash_equal)
success)
kl->mp);
res->ai_addr,
(char*)realloc(str->s,
uv_write_t
~defined(_WIN32)
bgzf_flush(BGZF
h2o_normalize_path(&req->pool,
usage_print_directives(h2o_globalconf_t
h2o_socket__write_on_complete(h2o_socket_t
h2o_socket_connect(loop,
AC_KSEQ_H
argv[0]
by
larger
*s3_read_awssecret(const
&cbinfo->timeout);
printf('%s'\n,
*timeout);
0.1659470187408462e-06
wreq_free_buffer_if_allocated(struct
knet_close(fp);
Usage:
VVRRPPPP
a2[0],
req->conn->peername.addr,
HTTP/1.0\r\n\r\n)
*sock)
+=
&p);
PURPOSE
diff
*res
(FLOAT**)calloc2(hp->m
++ll;
order:
7)
h2o_socket_write(sock,
deferred,
++top;
phr_decode_chunked(&dec,
hashTbl[hash(name,
(due
kk
strerror(status));
connect
`man
(h2o_buf_is_token(r.name))
*h2o_http1client_connect_with_pool(h2o_http1client_ctx_t
bufs[3];
35)
read(ku->fd,
('0'
*send_data
related
ftmp;
eos)
0x7fffd9u
a
chunked_test_runners[i]
link;
ks_combsort_##name(size_t
(!ret)
ai->ai_next)
*ctx
*--p
*mode);
platform[
sock->input->size,
too
Do
format
position
returning
H2O_TOKEN_USER_AGENT
hmm_gof_t;
H2O_TOKEN_PROXY_AUTHORIZATION;
_config_slot;
stack[top++]
port
0x3fbu
(ON/OFF)
client_ctx->io_timeout
h2o_hpack_parse_headers(h2o_req_t
task.n;
st_h2o_res_t
Regularized
store
kftp_connect(ftp);
*real_path,
&priority,
interpetation
H2O_TOKEN_ETAG
abcdefgcdgcagtcakcdcd;
exit_loop;
(unsigned*)calloc(data_size,
2007-11-20,
ok(t->type
listeners
&l);
(T[i]?
kroundup32(ku->m_buf);
format_node_recur(const
'\n'
h2o_http2_decode_ping_payload(&payload,
h2o/string_.h
supported
*dret)
228},
15))
\int_x^{\infty}
ku->hdr
0x3fffe9u
after
Fixed
++table->num_entries;
COMPILER_ID
write
n);
(gap
expect_preface;
loop->_statechanged.tail_ref
h;
chr(n
offsetof(struct
%.*s%.*s
h2o__tokens
Massachusetts
links
minsc;
@note
*p
&connection,
*cmd,
memset(&action,
original
26)
info->ssl;
take
T[n
H2O_STRUCT_FROM_MEMBER(h2o_http1_conn_t,
20)
'%s'
defined(__NetBSD__)
CURL_WRITEFUNC_PAUSE;
78
AN
h
KNHX_H_
loopback_on_send(h2o_ostream_t
19,
0xfffffe4u
date[64],
test_lib__file_c()
communicate
34,
86.78073220294608;
*(j-1)
entry_start_index;
15,
<time.h>
assert(h2o_linklist_is_empty(&conn->_write.streams_without_pending_data));
kbnode_t;
yoml__strdup(event.data.scalar.value);
43,
0x16u
max_fd;
bound,
uv_listen:%s\n,
205},
shall
O_NONBLOCK))
*T,
*opt)
41,
n
necessary
sizeof(int_unpack_t));
H2O_STRLIT(/chunked-test)))
H2O_HTTP2_SETTINGS_MAX_CONCURRENT_STREAMS
2|BLK_LEN|
fill_buffer(ku);
IOV_MAX
'f')
self
SunPro
mime
31,
50,
H2O_DEFAULT_REQ_TIMEOUT
<x86intrin.h>
emissions
reject
add_header(pool,
-11
28,
Exit;
(*m_cigar)<<1
h2o_timeout_dispose(h2o_loop_t
++j)
h));
h2o_socket_read_stop(h2o_socket_t
18,
*res,
14,
doc->data.mapping.elements[1].value;
23,
buf[28];
49,
id_secret;
embed
st_h2o_mempool_chunk_t
function
h2o_mimemap_set_default_type(h2o_mimemap_t
forgot
YOML__TYPE_UNRESOLVED_ALIAS:
zs;
(++src
khint_t;
40,
ku->m_buf;
(hh
cleared.
53,
application
kfree((void
KS_SEP_MAX)
((c0
off_non_ws
_fn_
h2o_http2_headers_payload_t;
1024
42)
http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/VERSIONS/C-LANG/mt19937-64.c
ErrExit:
(info->ssl
38,
difference
self->vars[0].index_files
H2O_TOKEN_MAX_FORWARDS
h2o_socketpool_init(sockpool,
2,
-1,
sha1_init_hmac(&s,
(or
:status:
free(node->data.scalar);
*reqbufcnt,
deferred
input
cmp
*unhandled
*file,
_mm_movemask_epi8(t1);
MUST
(event.type)
79},
34)
16);
guarantee
-=
access
t2
number
((n)
assert(keyLen
toLowerSSE(text);
35,
write
index)
.7003830644436881;
_mm256_movemask_epi8(t);
1900,
(opt_ch)
v[5];
n_cigar>>1;
k
minor_version))
h2o__t__test_h
_MSC_VER
h2o_malloc(sizeof(self->vars->index_files[0])
sizeof(defer_accept_flag))
timeouts
1400
do_close(h2o_generator_t
subtest_success;
kr->mti;
*qry
*req)
0x80
getaddrinfo(host,
h2o_conn_t;
<stddef.h>
max_rseq
match_case_small_str(const
H2O_STRLIT(/abc/def))
Error)-1);
->fd;
HTTP/1.2147483647)
buf[i]);
(%c)\n,
fb);
DEC(_MSC_BUILD)
kv_pop(v)
defined(_MSC_FULL_VER)
2<<4
put(__m128i
*id_secret
*ext);
H2O_STRLIT(/a%6?));
0x5cu
fwrite(sock->input->bytes,
19},
(normal)
16));
mode);
__err_connect(setsockopt);
*type)
h2o_timestamp_t
done_reading
score;
h2o_mimemap_remove_type(h2o_mimemap_t
Am1Tbl[4]
__kstream_t
name,
0x4,
toLowerAVX(const
receives
(to.tv_sec
(h2o_memis(if_modified_since->base,
1));
__AVX2__
_mm_add_epi8(x,
reader->content_length);
*w
h2o_header_t;
min_guarantee
memmove(stream->_data.entries,
x);
getaddrinfo
{101,
*(const
whenever
bucket
stream;
aux->response[n++]
&offsets);
*xmin)
h2o_buf_is_token(name);
*expand_line_buf(char
__m128i*)p);
!w->t->to_sync)
ks.l
picotest_h
n_nodes;
{253,
virtual
*h2o_mempool_alloc(h2o_mempool_t
H2O_HTTP2_SETTINGS_HEADER_TABLE_SIZE
t1;
ksw_i16(kswq_t
applies
Cray
*h2o_mempool_alloc_shared(h2o_mempool_t
H2O_HTTP2_SETTINGS_HOST.initial_window_size);
w->t->w);
&reuseaddr_flag,
attempt
57},
11,
']';
*
234
*create_generator(h2o_mempool_t
++__kp->i;
amA,
*C,
a[][]
{75,
Borland
Zp1,
(x)|=(x)>>8,
H2O_CONFIGURATOR_FLAG_GLOBAL,
kf_lgamma(b)
h2o_http2_conn_enqueue_write(conn,
'A')
*aux
(entry->flags
{59,
('a'
upstream
update_status(struct
updates
(conn->sock->input->size
h2o_http2_stream_state_t;
on_recv(h2o_socket_t
++decoder->_hex_count;
machine),
*kn_parse(const
sha1_final(s);
heavily
0x8f1bbcdc
disclaimer
amA
uv_tcp_t
header_table_index
*inbufs,
r.score2
st_h2o_socket_loop_kqueue_t
__sync_fetch_and_add(&t->w[min_i].i,
free(hd->v);
he1->m
copied
H2O_HTTP2_STREAM_STATE_RECV_BODY,
khash_t(ehn)
>>
defined(__riscos__)
name->len,
(argv[1][0]
DEC(__clang_patchlevel__)
UINT32_MAX,
_link,
b[L]
large,
(arg
H2O_TOKEN_SET_COOKIE;
present;
sock->_cb.read
AF_INET;
^=
//
h2o_http2_window_consume_window(h2o_http2_window_t
(8192+4096*(H2O_MAX_HEADERS))
&hints,
alloc_buf(pool,
(status)
14695981039346656037ULL;
0xFFFF)
inflate_block(fp,
compatible
unsigned
h2o_buf_t,
(mp->n
fde;
reason
k);
milliseconds
H2O_USE_LIBUV
PathScale
hp_end;
__max_8(imax,
2008-09-22
st_h2o_http1_conn_t
y->n;
80);
gmtime_r(&t,
read
h2o_websocket_conn_t
0x3F;
another
DEC(__TI_COMPILER_VERSION__/1000
*f;
((n)>>24
host;
HEX(__VISUALDSPVERSION__>>8
<intrin.h>
seq_nt4_table[(int)ksq->seq.s[i]];
*_arc;
free(a.auth);
uv_close_cb
conn->open_streams
emit
(ret
printf(incomplete-beta(%lg,%lg,%lg):
pthread_join(config.thread_ids[i],
new
&config);
NI_NUMERICHOST
*entity_header)
pthread_create(config.thread_ids
DEC(__HP_cc/100
O_RDONLY))
be
header
create_socket(loop,
ku
conn->_write.timeout_entry.cb
<string.h>
config.num_threads;
h2o_websocket_create_accept_key(char
config.num_threads);
EVFILT_READ:
alloca(sizeof(pthread_t)
(0.1.0):
{149,
registered
n_row,
log[H2O_TIMESTR_LOG_LEN
H2O_STRLIT(GET))
destroyed
*low,
data,
B
amount
ON
_timeout_entry,
register_handler(h2o_hostconf_t
kill(aux->pid,
238
serv,
Nishimura
*expected)
(conn->_http1_req_input->size
setup_signal_handlers();
((entry->flags
0x01,0x23,0x45,0x67,
http://www.iar.com
uint8_t*)huffcode.base,
BIO_TYPE_FD,
curl_to
bgzf_check_EOF(BGZF
config_yoml)
113},
(h2o_config_configure(&config.global_config,
*ku,
exit(EX_CONFIG);
na)
dec
_method_is_head;
calculate
destroys
27,
SIG_IGN);
ending
*_qle,
vs.
m_b)
h2o_timeout_init(ctx.loop,
Adapted
a:
_mm_movemask_epi8(t2);
*dx,
connection.
s)[0]
argv
I/O
ks->l
-8
uv_tcp_init(ctx.loop,
ok(bufis(headers[1].value,
fmt
argc
h2o_mempool_alloc(&req->pool,
(!fp->no_reconnect)
(*h2o_http1client_body_cb)(h2o_http1client_t
listener->fd
slot->name
instead
*n_calls
last_char
3;
vector->capacity);
5000
kh_destroy_##name(h)
(never
DEC(__TI_COMPILER_VERSION__/1000000)
clears
maximum
options
scanf-style
assert(entry->refcnt
xtra,
doc->data.sequence.elements[0]->data.sequence.elements[1];
load_config(config_file))
NULL.
H2O_HTTP2_ERROR_SETTINGS_TIMEOUT
conn);
kf_gammaq(double
uv_timer_start(&timeout->_backend.timer,
(char*)realloc(s->s,
m
saint_t;
*seq,
.03526249659989109;
threads
h2o__evloop_h
{188,
(0.2.0):
**reqbufs,
(1
block_length;
i+1
k1);
h2o_linklist_is_linked(&stream->_link.link));
*h2o_http2_npn_protocols;
ref-count
argv[])
socket_connect(const
format:
h2o_buf_t
{89,
TODO:
sstat;
((b
symbol
t.n
num-threads,
The
:
printf([%d]
f[1]
stream->stream_id,
h2o_http2_encode_frame_header(header_buf,
p->len))
RA[SA[i+1]];
max
(sock
return;
create_content_length_entity_reader(conn,
write_bio(BIO
0x26u
SSL_CTX
*self,
none),
(ks)->begin
(h2o_parse_url(&pool,
address
(y);
code;
port:
settings_index;
header_table_get(hpack_header_table,
&scheme,
http_open(const
*host,
H2O_HTTP2_SETTINGS_INITIAL_WINDOW_SIZE
h2o_linklist_init_anchor(&conn->_write.streams_without_pending_data);
*http_host,
getenv(http_proxy);
Added
*sock;
(status
t.data
kbi_popcount64()
as
0xVVRRPP00
247
h2o_headers_t;
uv_os_fd_t
treated
&bufsz);
ctx->_module_configs[filter->_config_slot];
x,
scalar,
198
_mm_cmpeq_epi8(t,
icc
alpn_protocols[]
3-clause
set)
fpq;
(mandatory),
1000000;
user
KBTREE_INIT(str,
21);
xmin,
server
(%u,
&ctx->req_timeout);
hp->e[bb],
puts(str.s);
h2o__null_input_buffer;
*_tle
defined(__PGIC_PATCHLEVEL__)
~define(_USE_KNETFILE)
[openmp
(qry
kcalloc(N,Z)
upgrade;
erfc(x),
run_loop,
client_key);
stream_id);
(listener->family
stream_max),
k,l\in[0,n)
sizeof(*c));
h2o_config_init(&config.global_config);
(ks)->end
_mm256_cmpgt_epi8(x,
(size_t)(-1);
(new_n_buckets
(*h2o_http1_upgrade_cb)(void
keys:
{57,
different
keepalive_timeout;
RESERVE(sizeof(255.255.255.255)
_mimemap;
*path_len
last_stream_id;
free(pool->host.base);
*buf;
ADVANCE_TOKEN(*method,
H2O_HTTP2_FRAME_TYPE_SETTINGS,
st_h2o_mempool_shared_ref_t
x
type_t)
L);
subtest(request,
in
gai_strerror(err));
t->w[i].pending
(scanf,
fills
against
offset
note(comment);
sizeof(kstring_t));
(*on_setup_ostream)(struct
mime_type;
the
ok(status
h2o_dispose_request(&conn->req);
q2
toLowerAVX(text);
defined(__linux__)
((v).m)
I
{80,
failures
servname
hereby
top->left
&t,
kf_lgamma(s
req->conn->peername.addr->sa_family
h2o_now(uv_loop_t
&io_timeout
fu[k]
++cursor)
self->vars->mimemap,
((a)
*create_conn(h2o_context_t
(p
mergesort:
tb,
hd->s[u];
Other
(below)
(ssl_ctx
*he0,
addr;
khash_t(32)
successful,
problem
pool->chunks->next;
h2o_hpack_flatten_headers(
disactivates
kl1_##name,
Ltd
*hmm_new_par(int
score
syscalls
89
delegates
req->scheme.base,
215},
(kr->mt[kr->mti
streams_without_pending_data;
*stream)
:statu,
h2o_http2_goaway_payload_t
(h2o__tokens
H2O_TOKEN_IF_RANGE
(headers->size
**_inbuf,
setup_ecc_key(SSL_CTX
decode_hex(int
S-type
{0};
_timeout_entry;
*,
x)[i])->n
reason);
29
sizeof(transfer-encoding)
specified
defined(__sinix__)
of
ks_heapadjust_##name(0,
H2O_TOKEN_UPGRADE;
Advanced
sock->_wreq.bufs;
known
ctx->ctx->global_config);
_bgzf_close(fp);
B[c1
kst->seq.s[i]
(mimemap
send
stops
(int*)realloc(stack,
hd->b[1][l]
4|
(char**)calloc(data_size,
headers[0].name_len,
TEST(,
describing
subtest(lib/string.c,
localt.tm_hour,
h2o_http2_decode_ping_payload(h2o_http2_ping_payload_t
Options:\n
key-file))
will
*in++;
use
le[(int)hd->seq[1]][k]
s->state.w[3],
req->path
kl)
millis);
port,
EC_KEY_new_by_curve_name(NID_X9_62_prime256v1);
(change_index
kurl_close(fp)
246},
&z[i
DOIT()
0x20
`host`));
h->keys[x]
0;;
1000;
__m256i*)Am1Tbl);
vprintf(escaped_fmt,
limitation
__m128i
H2O_TOKEN_SCHEME,
H2O_TOKEN_CONNECTION)
doc->data.sequence.elements[0]->data.mapping.elements[1].key;
*cur_tests
H2O_HTTP2_CONN_STATE_OPEN);
__BORLANDC__
&h2o__null_input_buffer)
find
m2);
HMM_VERSION
Count
s->buf.b[s->bufOffset
*key,
prints
*kmp_init_##name(void)
bug
*entry);
KURL_INV_WHENCE
*node;
interpolation
complete
doc->data.sequence.elements[1]);
h->flags
*yoml_find_anchor(yoml_t
algorithms
&gmt);
on_socketclose;
(FIXME
h2o_timeout_t
27
*headers,
ignored
0x7fffe1u
NULL)
declaration
,value,
aux.ctrl_fd
close_connection(h2o_http2_conn_t
add_size
%.*s:
H2O_HTTP2_ERROR_ENHANCE_YOUR_CALM
h2o_http1_upgrade(req_conn,
build
assert(priolist->refcnt
count;
name;
h2o_http1client_error_is_eos)
:pat,
H2O_HTTP2_FRAME_FLAG_END_STREAM)
expansion
\n
free(str.s);
35
S-substrings
0xf)
socket/pool.c
&defer_accept_flag,
payload.headers,
{-5.13,
ostr
i-1
ftp->pasv_ip[2],
ctx->hostconf
max_response,
yy));
*desc);
get_token_to_eol(const
*new_node;
output_window;
sock->ssl->ssl
loop->_now;
free(http2conn);
187
HTTP2_SIG.base,
<=
memcpy(conn->_write_buf,
H2O_TOKEN_AUTHORITY,
*ku);
((t
(HTTP/1,
nlocks;
(hd->p)
&r,
RESERVE(sizeof(18446744073709551615)
once
_some_
mapping);
devices
newmap;
assert(inbuf
adapted
defined(__hpua)
Institute
*ctx;
s->s
seq->last_char
1].value;
Bob
complex
BLOCK_FOOTER_LENGTH
k)&3));
h2o
h2o_config_get_one_of(cmd,
YOML_TYPE_MAPPING)
yoml_get(config_node,
escape
(complete));
must
&gt;);
(natural
pthread_mutex_lock(&w->t->lock);
H2O_HTTP2_STREAM_STATE_REQ_PENDING);
doc;
Permanently;
(FLOAT**)calloc2((m
continue
20:13:21
hmm_post_state(const
h2o_context_dispose(h2o_context_t
ERR_print_errors_fp(stderr);
khash_t(str)
conncections
2^k
80;
key_src[60];
tol1;
256
tr,
on_config_dir,
tv_at;
buffer.
1\n
info_platform
hints.ai_protocol
h2o__http2_h
\%08x-%zx\,
rb))
protocol
7890,
{117,
*load_config(const
*port
conn->req.scheme
conf->configurators.next;
st_h2o_http2_stream_priolist_t
*handler)
.65)))));
open(fn,
t->n_threads
heapsort!\n);
kt_spawn/kt_sync
6},
(i--);
SAIS_MAIN(const
sprintf(port,
H2O_STRLIT(/))
h2o_find_header(&res->headers,
{129,
bytes)
h2o_http2_stream_proceed(h2o_http2_conn_t
*alloc_buf(h2o_mempool_t
EC_KEY_free(key);
directive
y0
any
(sup
54,
kb_generic_cmp)
zero_timeout,
stream/doc
(not
slen)
on_setup_ostream;
papers
gzread,
*key
H2O_HTTP2_CONN_STATE_OPEN
0x02,
uses
221},
begin;
s3aux_t
{51,
EPOLL_CTL_DEL,
conditions:
max
sep
SIGCONT
nbeg
req->host_config->handlers.entries,
(socket_wait(ftp->ctrl_fd,
-HMM_INF;
DEC(_SGI_COMPILER_VERSION/100)
304;
(j<<1)
scheme
free(stream);
better
TORT
offsets;
sockaddr_un))
!defined(_KO_NO_NET)
key);
43)
cost
listener->socktype
__KS_TYPE(type_t)
0]
task
pool_entry_t
defined(__IBMC__)
value
A
IS
BGZF/GZIP
kf_erfc(x));
emits
45,
gmax;
on_connect(h2o_socket_t
defs
internally.
polling
DEC(__WATCOMC__
defined(__aix__)
*_conf)
pthread_mutex_init(openssl_thread_locks
represented
h2o_http2_conn_unregister_stream(h2o_http2_conn_t
*ret)
select:
memset(logger,
h2o_decode_base64url(h2o_mempool_t
NULLs)
(sock->peername.len
/;
h2o_http2_decode_headers_payload(h2o_http2_headers_payload_t
uint16_t
EPOLLOUT)
h2o_req_t;
way
enable_push;
DEC(__PGIC_MINOR__)
h2o_ssl_register_npn_protocols(ssl_ctx,
17
*h2o_realloc(void
(intentionally
chunked-
destination
h2o_timeout_run_all(h2o_linklist_t
for
_avail;
printf(curl
func(u,
NOT
(table->entry_start_index
(radius
sock->loop;
requested
(servlen
(peername.addr
h2o_socket_read_stop(listeners[i].sock);
openssl_thread_locks
assert(self->client
sizeof(kmp_##name##_t));
IAR
'w')
++k2)
listen(listener->fd,
c,
success
(ks_isort_stack_t*)malloc(sizeof(ks_isort_stack_t)
(h2o_memis(if_none_match->base,
defined(_M_X64)
defined(__ADSPTS__)
hpack_max_capacity;
memcpy(__KB_KEY(key_t,
sentinels
memmove(buf
kseq_bench
&pool,
contain
h2o_evloop_t;
{231,
*config)
port
++block;
toLowerSSE(const
((j-i)>>1)
238},
inbufcnt;
(strcmp(type,
kh_end(g))
Applications
hmm_data_t
necesssary)
h2o.conf;
{17,
uv_default_loop();
chr(i+1);
(char*)realloc(ftp->response,
H2O_TOKEN_ALLOW
H2O_STRLIT(http))
stdout);
v6only_flag
swap
is:
+
s->buf.w[(i+8)&15]
ssl_ctx
1/2
5.18,
(kr->mt[0]
faster
32)
sizeof(*hostconf));
*default_types[]
deflateEnd(&zs);
h2o_token_t
sockaddr*)&conf->listeners[i]->addr,
config->http2_max_concurrent_requests_per_connection
0x3fffdau
_entries;
((mode
listener;
7},
yaml_char_t
kr_srand0(seed,
matched
wake_at)
(n_cigar_)
follows
'1':
((uint64_t)1
timeout)
memmove(priolist->list.entries
chr(i+1)
%s
*_req_entity_reader;
*peer_settings)
207
jpg,
decimal
type))
ok(t->_refcnt
m_b<<1
kb_interval(int,
SSL_FILETYPE_PEM)
IN
32,
((capacity)
(kbnode_t**)realloc(stack,
on_read(h2o_socket_t
lseek(ku->fd,
*p);
parser;
*openssl_thread_locks;
max?
&H2O_TOKEN_METHOD->buf);
long)pthread_self();
2008-02-07,
fu,
time(0);
is
128,
su))
req);
p->base,
port))
value
fs
53)
cigar[n_cigar-1-i]
parse_request(buf,
table->entry_capacity)
uint32_t
2)
config_t
sigdelset(&mask,
there
sizeof(on));
strlen(servname);
func(q,
huffmann
h2o_init_headers(h2o_mempool_t
kstrstr(s,
hmm_exp_t;
mp->buf
*inbuf
expotential
*fields,
pthread_join(tid[i],
kroundup32(x)
((int)(b[n_b-1]>>32)
(strchr(node->data.scalar,
routine
symbol,
reuseaddr_flag
unlinks
fn,
Permission
*encoder;
long
io_timeout;
hmm_delete_par(hmm_par_t
swap,
strchr(mode,
3.76,
*s3key_fn;
&n_calls);
va_end(ap);
conn->open_streams,
ANY
*key_file
value:
khttp_connect_file(fp);
*decoded,
AS
_length_
h2o_configurator_t
*ssl_ctx);
0x36
__KG_BASIC(name,
36
{62,
defined(__GNUC_PATCHLEVEL__)
312
H2O_TOKEN_ACCEPT
compiler
*outbufs
SOFTWARE
free(slot);
KHASH_INIT(name,
assert(dst
seek
done)
kbi_popcount64(x[i]);
returned
0x00FF)
conn->_write.pool
stream))
__DECC_VER
(__kp
hosts,
substantial
(1.0/9007199254740992.0))
__m256i*)amATbl);
on_msg_callback(wslay_event_context_ptr
input_window;
_npn_list_of_protocols;
h2o_http2_decode_window_update_payload(h2o_http2_window_update_payload_t
&pool->_first_chunk;
h2o_mempool_addref_shared((char*)ext);
NONINFRINGEMENT.
htons(7890);
h2o_evloop_run(h2o_evloop_t
*correct)
q,
__m256i*)key);
comparisons
exist
now,
&v[5]);
per-request
init_openssl();
POSSIBILITY
(z+5);
printf(%s
qlen)
(h2o_http2_decode_window_update_payload(&payload,
(i
(dret)
max_payload_size
h2o_timeout__do_dispose(h2o_loop_t
WITHOUT
optind;
reproxy_test);
H2O_HTTP2_ERROR_NONE
H2O_HTTP2_CONN_STATE_OPEN,
defined(__linux)
self_tid
third_req;
block)
k2,
*ctx,
H2O_USE_ALPN
Redistributions
parse_input(conn);
Software,
u,
MM=Month,
req->entity.len);
sizeof(addr_un->sun_path))
modify,
handle_frame_skip(h2o_http2_conn_t
kts_task_t;
sizeof(struct
separator:
clones
knet_fileno(fp)
rights
h2o_config_init(h2o_globalconf_t
strtoint64(p);
(uint16_t)src[0]
should
merge,
1))
YAML_MAPPING_START_EVENT:
servname,
h2o_req_t
H2O_CONFIGURATOR_FLAG_EXPECT_MAPPING,
sizeof(*ctx->_module_configs)
(__GNUC__
(v).m<<1
*kseq_init(type_t
(mode[0]
RESERVE
fb)
_refcnt;
Software.
ll
free(hd->b);
40)
H2O_TOKEN_EXPIRES
tol2,
boolean
ksplit_core(char
IMPLIED,
R=Revision,
};
knet_read(knetFile
Compaq
assert(req->len
world\n,
he->E[(int)hd->seq[u]],
0xFFFF))
0xFFFFFFFF80000000ULL
low
send_data
aux->tab[1]
(sz
h2o_http2_conn_unregister_stream(conn,
-255
req->host_config->loggers.size;
pthread_mutex_init(&t->lock,
ctx->ctx;
copies
flushed
h2o_linklist_init_anchor(&timeout->_entries);
sometimes
*addr,
fp
(gzgetc(fp)
h2o_http2_stream_t;
<errno.h>
already
bgzf_read_block(BGZF
++d);
knet_close(knetFile
*data)
Error;
(opt/hooke.c).
on_send_request(h2o_socket_t
token_char_map
MERCHANTABILITY,
tid
148},
run
proto;
(uint8_t)buf[i],
conf,
getaddrinfo(argv[1],
reading
#include
public
/\x7fhello
with
fx1
uint8_t
static
sizeof(
elements
private
reqlen;
accept_key,
max_connections
add
deleted
H2O_STRLIT(/abc/../def));
H2O_STRUCT_FROM_MEMBER(h2o_token_t,
H2O_HTTP2_SETTINGS_##label:
out
in-flight
poller
`port`
*h2o_access_log_register(h2o_hostconf_t
(lo
a[]
sizeof(huffbuf))
global-level
linklist
payload.length;
const
adds
conn->_write._pools));
file;
AC_SCHMM_H_
id
'\t')
mu2,
_mm_cmpgt_epi8(*(const
its
-0.17,
((config_yoml
240
seq->seq.l);
h2o__http1client_h
Changed
&w->t->lock);
255?
ku->m_buf);
dispose
H2O_STRLIT(GET)
s->state.w[4];
st_h2o_mempool_direct_t
WARRANTY
either
(token
2008-09-05
max{H(i-1,j-1)+S(i,j),
\x04
configurator->commands.entries
(bits))))
++n_evals;
member,
((r
HEX(__VISUALDSPVERSION__>>24)
representation
*config_yoml;
memcpy(s->state.b,
encode_huffman((uint8_t*)buf,
0x7ffffedu
calculates
(char*)calloc(nend
H2O_VECTOR(h2o_header_t)
rp,
h2o_timeout_cb
+0000,
(listener->family)
BSDOS
free(at);
sizeof(h2o_buf_t);
(state
person
and/or
ks_mergesort_##name(size_t
122
long.);
*l;
ok(r
DEC(__HP_cc/10000)
SET(HEADER_TABLE_SIZE,
(the
kl_destroy_##name(kl)
(memcmp(magic,
being
*entry
*q[2]
off0
*test
host:
<yaml.h>
t.w
printf(%s\t%d\t%d\t%s\t%d\t%d\t%d\t%d\t%d\n,
delivered
write;
&q[0]);
','))
key_file);
alloc_inbuf_tcp,
reverse
&fd)
ok(headers[2].name
on_error_before_head(client,
_data;
h2o_mempool_addref_shared(void
*s);
(int)lrand48();
b[BLOCK_LENGTH];
35},
st_h2o_header_t
}
defined(__UNIX_SV__)
CURL_MAX_WRITE_SIZE
0x1000
h2o_http2_encode_goaway_frame(conn->_write.pool,
{200,
yoml__parse_mapping(parser,
NULL;
ok(t->data.sequence.size
shallow
*configurator
*g
1024));
A));
offsetof(s,
*flags;
multi-sentinel
on_alpn_select,
0x67u
138
h2o_globalconf_t;
((flag[i>>4]>>((i&0xfU)<<1))&2)
0.
encoding);
*socks[FD_SETSIZE];
doc->data.sequence.elements[0]->data.mapping.elements[0].key;
power
KSEQ_DECLARE(type_t)
k2);
flattened;
ctor)
cand_str
st_h2o_http2_window_t
no
ctx->loop
OR
*proxy_send_prepare(h2o_req_t
deal
{143,
systems.
sizeof(h2o_timestamp_string_t),
NO
`path`);
clear
0x70u
__m128i*)Zp1Tbl,
handle_window_update_frame(h2o_http2_conn_t
*src_req)
setsockopt(fd,
CRYPTO_set_id_callback(openssl_thread_id_callback);
*text,
without
msg_cb);
etag_len;
(__sort_lt(a[1],
&listener);
type;
*target
aux->node;
somewhere
++i)
173},
*t;
&h2o_hpack_static_table[0].value
key-file:
hash(const
(global.k[i]
family;
*status
kh_begin(h);
ok,
sizeof(kh_##name##_t));
comparisons.
u
__SUNPRO_C
hex
defined(__PATHCC__)
chr(i))
P=Patch
break
pthread_mutex_lock(openssl_thread_locks
((tmp
data[8];
max_iter;
h2o_socket_ssl_get_selected_protocol(h2o_socket_t
t0);
(extension));
decodes
hashTbl[]
((n)>>8
a<b<c,
41
swap_input_buffer(
(*cb)(void))
*low);
hp->m,
fs)
*my_h2o_lookup_token(const
AND
post_test(h2o_handler_t
recognized:,
0xfffff1u
GNU
ksstr_t,
optional
h2o_evloop_t
uncomment
copy
DD=Day
*body);
config->req_timeout);
KF_TINY;
dynlock
*hostconf;
path_replace_length,
(colon_at
h2o_http2_stream_reset(h2o_http2_conn_t
_ostr_final;
permit
assert(compressed_length
quickly
aux->type
off,
defined(__HAIKU__)
TEST(input,
FOR
SIG_IGN;
handled
setup_ecc_key(ssl_ctx);
t))
info_compiler[argc];
Note
1].suffix.len++]
/*
#
DEC(__INTEL_COMPILER/10
0x29u
connects
conn->_write._pools
free(ks->qual.s);
TYPE_MAP('s',
ja,en-us;q=0.7,en;q=0.3\r\nAccept-Encoding:
appropirate
sharing
ftmp
*candidates);
load
H2O_VECTOR(void)
(__sort_lt(*j,
h2o_mempool_addref_shared(entry->name);
num_accepts
2014
SA;
on_pool_connect(h2o_socket_t
h2o_mempool_release_shared(void
http://www.danielsoper.com/statcalc/calc23.aspx
a;
associated
req->upgrade.len
3,
MIE_ALIGN(x)
reqlen
Key
(cur
0x1fffdcu
H2O_STRLIT(/abc))
&mask,
assert(sock->on_close.data
(a.k.a.
twiddling
SEEK_SET
a[i-1]
0xa;
(ks)->f->is_eof
t1,
kputc(int
flags;
fn)
&eh[j];
strlen(p->name),
a.url
pool->chunks->offset;
defined(__SCO_VERSION__)
eh[mj+1]
compute
next
(bytes_written
kfree
max_frame_size;
(update_status(loop)
closes
(*stop)(struct
mat[25];
p->child[j]);
st_h2o_http2_rst_stream_payload_t
aux->pid)
strlen(y->key->data.scalar);
fu1[l]
OUT
value.base,
via
above
self->upstream.config.io_timeout);
(h2o_tolower(name[5]))
generated
(void
URL;
performs
first
transfer-encodin,
virtual_path
*c
fp))
h2o_http2_window_get_window(&stream->output_window)
*l
ok(header_table.hpack_size
-2;
ID
`ssl`
collection
(c)
prev_num_connections
nbytes;
h2o_http2_npn_protocols);
(*_read_expect)(h2o_http2_conn_t
sdcc,
h2o_configurator_exit_cb
bio->init
cert_file);
k;
disclaimer.
h2o_mempool_addref_shared(type.base);
--n)
H2O_STRLIT(access-control-allow-origin)
AC_KMATH_H
specifies
node->data.sequence.size;
all
snprintf(req->base,
H2O_SOCKET_FLAG_IS_WRITE_ERROR
(remaining
signal(SIGPIPE,
src->entity;
&host,
whitespaces)
sizeof(kbnode_t*));
subtest(parse_url,
reproxy
bt1_countInU64(uint64_t
bgzf_write(BGZF
*yoml__parse_sequence(yaml_parser_t
assert(hp);
0x7ffffe9u
attaches
sizeof(saint_t)))
iterations
unhandled))
*user_data);
MIPS
token
intentional;
tr/A-Z/a-z/
my_netread(fp->fd,
(end)
*fdw
12:
hp->n
do,
*_prep;
instructions
are
reallocate
Q
(1ul<<shift)
parser.problem);
yaml_parser_set_input_file(&parser,
granted,
hpack
(*func)(kswq_t*,
H2O_TOKEN_CONTENT_TYPE,
(res
priority;
&to))
client;
NonPrintable:
on_config_listen_setup_ssl(cmd,
key_t
literal
h2o_dispose_request(h2o_req_t
H2O_TOKEN_IF_MATCH;
vpath,
input.
H2O_HTTP2_STREAM_STATE_RECV_BODY;
193
refcounted)
&conn->_ostr_final.super;
size_t
141},
signo)
compressed_length;
-H
longopts,
req->bytes_sent
_MSC_FULL_VER
(i.e.,
enqueue_goaway_and_initiate_close(conn,
sending
windows
info->input
(h2o_socket_is_writing(&sock->super)
h2o_mempool_t
arrives
EXPECT_CHAR
h2o_context_t
kl_begin(kl)
2013
0xffffffbu
<sys/socket.h>
flag
kh_key(mimemap->table,
node);
*aux);
233},
distribute,
(frame.flags
bufsz);
kswq_t
<port>\n,
on_read);
p[query[j]];
blocked_streams;
former
0x7fau
H2O_HTTP2_STREAM_STATE_RECV_PSUEDO_HEADERS,
OF
IS,
belongs
h2o_hpack_encode_string(uint8_t
h2o_http2_alpn_protocols);
a.date
on_config_max_connections(h2o_configurator_command_t
free(mem[ret]);
otherwise,
H2O_SOCKET_FLAG_IS_ACCEPT);
102
read;
conn->peer_settings.initial_window_size;
*src_req;
4,
num_connections;
st_h2o_http2_goaway_payload_t
point.
mapping
(config.num_threads
enum_yoml_type_t
*h,
55
'%')
wreq_in_flight,
publish,
%xx
EPOLL_CTL_ADD,
II:
removes
STDOUT_FILENO);
headers[1].value_len,
<arpa/inet.h>
host[NI_MAXHOST],
lng
hpack_capacity;
BGZF_ERR_HEADER;
kl->tail
test_name_len
Z_OK)
failed;
(unaligned:
H2O_TOKEN_CONTENT_LENGTH
`type`
Copyright
hash_func(a)
payload;
*ctx)
Gateway
_statechanged;
((a
defined(_AIX)
__KSEQ_BASIC(SCOPE,
he->A[k];
is_internal:1,
FROM,
*table)
action;
*sep,
protocol;
block.
HEX(__CODEGEARC_VERSION__>>24
1000,
;
h2o_http2_encode_goaway_frame(h2o_mempool_t
*kstrtok(const
memcpy(new_entries,
strcmp(key->data.scalar,
(m1
yoml_sequence_t;
_input_header_table;
YOML_TYPE_SCALAR)
b->root->is_internal)
task->n
listener->protocol))
<sys/un.h>
input_length,
&r))
H2O_TOKEN_VIA
2.
h2o.conf)\n
w->t->w[i].i,
e,
9(9):684-685),
!__hash_equal(h->keys[i],
keyLen)?
lies
knet_tell(fp)
h2o_generator_t
ctx.loop,
it
d);
do_send
c);
free(node->anchor);
H2O_HTTP2_STREAM_STATE_END_STREAM:
comment,
__err_connect(getaddrinfo);
(fp->block_offset
encode32u(dst,
sizeof(serv),
h2o_time2str_log(char
VVRRTPPPP
self->sent_headers
on_close(h2o_websocket_conn_t
{243,
12)
deep.
stored
*servname
++name,
config_t,
mandatory
strdup(*q?
>=
chr(q
**index_files,
kp
0x7ffff0u
hmm_pre_backward()
(!isgraph(*p))
yoml__strdup(anchor)
H2O_USE_NPN
phr_parse_request(REQ,
__INTEL_COMPILER_BUILD_DATE
blocked
program
0.1\n
*pos,
||
destructor
147},
(conf->thread_ids[i]
&n_running);
kh_del(str,
builds
may
KHASH_MAP_INIT_STR(name,
call
strcpy(tmp,
*ctx);
fp->offset>0)
kts_worker_t;
ai->ai_socktype;
443);
defined(__ultrix__)
which
off0;
h2o_handler_t;
(vvar)
*msg;
key_file
assert(conn->state
sizeof(yoml_t*)
KMIN_EPS,
a)
SOFTWARE.
4.5.6
8,
*aux,
bmBc
H2O_CONFIGURATOR_FLAG_PATH
yoml-parser.h
PRIu64,
strerror(errno));
SA[m
h2o_http2_window_t;
6,
sigemptyset(&action.sa_mask);
Configuration
246
(inbufcnt
conf->num_listeners);
field));
kputc('0',
err);
free(hd);
main(int
uv_ip4_addr(127.0.0.1,
(i)
addr_un->sun_path,
H2O_TOKEN_ALLOW;
kt_for_t;
fd)
kh_destroy(cache,
0x3ffffe2u
*peer_settings);
**************************************/
*anchor);
state;
save
SA[i],
check_header(const
H2O_MAX_REQLEN
KSEQ_INIT2(static,
make
BGZF_BLOCK_SIZE,
0x6au
printf(buf[%d]=%02x
SDCC
h2o_http2_stream_send_pending_data(h2o_http2_conn_t
*s,
{12,
&loop,
cv;
p)
32);
protocols)
ok(minor_version
yoml__resolve_alias(yoml_t
(newp
H2O_USE_KQUEUE
20);
path)
(*p
ID_VOID_MAIN
defer_accept_flag
argv[1],
26,
h2o/token.h
*sockpool,
conf->listeners[conf->num_listeners++]
*fmt,
28)
minimum.
keepalive);
Ltd.
(uv_fileno((uv_handle_t*)sock->uv.stream,
&wsaData);
h2o_mempool_alloc(&pool,
max_concurrent_streams
context
kopen(argv[1],
impossible
*filter)
defined(__CYGWIN__)
LIMITED
(u
realloc(mem,
[OpenSSL]
req->path.len,
high
socket(listener->family,
req;
H2O_HTTP2_CONN_STATE_IS_CLOSING)
CONTRACT,
1024,
command)
modifying
H2O_HTTP2_STREAM_STATE_SEND_HEADERS;
h2o_http1client_ctx_t;
sha1_hashBlock(sha1nfo
(Unix)
&conf->num_threads);
h2o_http2_conn_state_t
ks_introsort(name,
NULL))
i,
(placed
s->m)))
sizeof(*conf->listeners)
Read
#ifdef
the,
tcp;
_bgzf_fileno(fp)
++kr->mti)
_body_bytesleft;
*stack,
help\n
h2o_init_input_buffer(h2o_input_buffer_t
INCIDENTAL,
113
flush_pending_ssl(h2o_socket_t
ts
h2o_linklist_insert(h2o_linklist_t
date
calculator
--h->size;
{0.22,
%s:\n,
test_chunked_consume_trailer);
*bucket,
initializes
mag01[2]
exit(0);
start
required
i;
hp->a[k];
sockaddr_storage
len)];
init_host_config(hostconf,
free(str_data);
aux->n;
H2O_HTTP2_STREAM_STATE_SEND_BODY,
winsock.h,
sha1_hashBlock(s);
uv_loop_init(&loop);
pthread_kill(conf->thread_ids[i],
now)
reproxy_header_index);
(curr
*reqbufcnt
start_request(&ctx);
unlinking
in_addr
Hooke-Jeeves
(min
_unused1[32];
~j;
furnished
frame->payload
*_req_body;
0x7FFFFFFFULL
<openssl/err.h>
on_config(h2o_configurator_command_t
command
_mm_subs_epu16(e,
setup
file.
0));
segfault.
memset(&header_table,
(h2o_buf_is_token(name))
search
unused
now;
ctx;
&headers[*num_headers].value,
req->method.len,
sock->on_close.cb
ku->m_buf
(void*)protocols);
Initial
directories
max_headers)
_KO_NO_NET
(he
SSL_set_bio(sock->ssl->ssl,
(*conn->cb)(conn,
curl_multi_fdset(ku->multi,
__ac_iseither(h->flags,
(S_ISSOCK(sstat.st_mode))
index_files[1];
status)
&req->entity,
(__kp+1)->x
and
doc)
Forbidden,
**_offsets);
decode16u(const
62))
text.
(fp->type
kr_srand0(5489ULL,
test_request(h2o_buf_t
KSW_XSTOP:
bits
pthread_t
Don't
(v0).a,
do_write(h2o_socket_t
(a))
configuration
(stack[i]
string);
h2o_http2_encode_ping_frame(h2o_mempool_t
ks.s
ident->base,
unix)
(dx[k]
':',
HEX(__SUNPRO_C>>12)
(h2o_socket_is_reading(listeners[i].sock))
*H0,
h2o_send_error(self->src_req,
minimization
send_data,
HTTP2
cmd->description;
((v).n++))
h2o_buf_init(H2O_STRLIT(/index_txt));
SHALL
free(ks->comment.s);
ARISING
'a')
54)
pool->_interval_cb.loop
defined(__clang__)
stream->is_half_closed
destroy_ssl(struct
64
r
keep-alive
*ll,
negotiation
((y
-1.0;
(see
h2o.h
(read(fd,
SET(MAX_CONCURRENT_STREAMS,
window_size_increment);
0x1ffau
h2o__socket_h
host:
201
1-dimenssion
',');
_secret
line;
*/);
225
*_test,
dynamic
08:49:37
ret)
kf_gammaq(y,
yoml;
fuk
ss
3.50};
num_threads
{
bufs
onto
********************/
c:l:a:))
{97,
SIGCONT);
H2O_HTTP2_ERROR_PROTOCOL_CLOSE_IMMEDIATELY
(req->_generator
hd->f
h2o_globalconf_t
free(entry);
&v6only_flag,
H2O_TOKEN_X_REPROXY_URL,
Zp1Tbl[4]
--m,
pfd[0];
(req->_generator->stop
output.pool));
stream;
assert(loop->socks[sock->fd]
a2[1]
8
(buf
**********************************/
enable
FILE
H2O_VECTOR(h2o_handler_t*)
holder
b->t)
int
getaddrinfo(hostname,
t,
sup;
h2o_socket_cb
deletes
wret;
&s);
pthread_sigmask(SIG_BLOCK,
143},
76},
e\n);
_mm_store_si128(Hmax
name
new_capacity)
\log{\Gamma(z)}
limited
lib/file.c
step
yoml_find_anchor(doc,
++l)
spec.)
cert_file,
kmpfree_t)
signal_ignore_cb(int
179},
mid
empty
(__sort_lt(l[k],
mask;
on_connect);
free(fp->port);
USE
32;
{227,
19
defined(__ultrix)
*head
SSL_library_init();
hd->b[u],
last_start;
220.2068679123761;
start_request(h2o_http1client_ctx_t
(0.1.4):
unrecognized
kftp_send_cmd(knetFile
off
h2o_http2_conn_register_for_proceed_callback(conn,
list);
*event)
free(kr);
kh_put(h2o_http2_stream_t,
128},
hostname
overflow
certificate-file))
*_offsets;
((n)>>12
Dai
*)
log(sum));
sock->data
(do_swap
introsort,
listener_ctx_t
(*h2o_websocket_msg_callback)(h2o_websocket_conn_t
self->_vars_stack;
callbacks
mapping;
(char*)hp_end;
0x2,
he->m
gmt.tm_min,
-1)
decoder->_hex_count
ago
best
kr_drand(_kr)
H2O_TOKEN_LOCATION,
**buffer)
hmm_par_t
impossible).
define
_mm256_cmpeq_epi8(t,
(Macintosh;
KMIN_MAXCALL
buffers
H2O_TOKEN_CONTENT_LOCATION,
PARSE(Host:
defined(SCO_SV)
st_h2o_socket_t
kbi_DNAcount64()
%%%c\n,
h2o_timeout__do_init(h2o_evloop_t
strdup();
KU_MAX_SKIP
buf+10000,
assert(h2o_http2_stream_has_pending_data(stream));
\n));
entry
(++cursor;
slot->value.base
(deflateEnd(&zs)
DEC(_MSC_FULL_VER
*req);
yaml_parser_initialize(&parser);
KO_PIPE;
switch
socktype;
type_t,
zero_timeout;
prep[0];
183},
closed,
htonl(0x7f000001);
sock->on_close.data
A[l]
(errstr
sizeof(ktf_worker_t));
listener->family
2616
min_i
mode
0x1fffe0u
@abstract
sprintf(self->etag_buf,
SSL_load_error_strings();
main
((max_payload_size
0xffffecu
endif
on_config_hosts,
CURLM
<sys/types.h>
*kl)
(*h2o_configurator_dispose_cb)(h2o_configurator_t
socket/evloop.c.h
w->pending
--top;
indexed
DEC(_RELEASE)
socket.,
does
(uv_close_cb)free);
mimemap
query[i]
*nhx,
'
servname);
*fn);
listener->data;
kh_del(int,
value->data.scalar
check
execute_or_enqueue_request(conn,
(__KB_PTR(b,
kr->mt[0]
update_stream_output_window(stream,
100000)%10)),
yoml_free(doc);
Am1,
\t,
__m128i*)key);
H2O_TOKEN_CONTENT_TYPE;
sequence
xtra
part
eh[end].h
present,
sha1_final(s),
scalars);
k;for
epoll_create(10);
(s->bufOffset
bind(fd,
(fu[k]
tmp,
conn->body->size,
errored
fp->compressed_block
conn->num_responding_streams
imax)
fa,
*q,
memory);
__func)
ok(out
failue.
CURLOPT_NOSIGNAL,
ks_isort_stack_t
note(Subtest:
aux->response
reduced
memset(new_flags,
ok(strcmp(buf,
192},
*bufs,
probing.
active_streams;
(struct
assert(!unix
hd->status
bug!
memset(&cbinfo->timeout,
open
<limits.h>
drained
headers[4];
headers[i].name,
LIABILITY,
listen(fd,
100},
sysexits.h
reqread_start(h2o_http1_conn_t
keep
on_config_http1_upgrade_to_http2,
--slot->refcnt;
functions
memset(addr_un,
ELEMENT_TYPE_STATUS:
ok(strcmp(t->data.scalar,
assert(m
kr->mt[kr->mti++];
sizeof(int_packed_t));
mandatory
sent.
len)
*stream,
(i--
pool);
line)
l_buf?
kmpfree_f(mp->buf[k]);
0x3fffd5u
*cur);
__utma=xxxxxxxxx.xxxxxxxxxx.xxxxxxxxxx.xxxxxxxxxx.xxxxxxxxxx.x;
(h2o_tolower(name[17]))
worker
on_body_timeout(h2o_timeout_entry_t
addr_un->sun_family
0x74u
defined(__BeOS)
++entry->refcnt;
-5.81,
entry);
H2O_STRLIT(:method)
client->data
sigaction(SIGCONT,
memcpy(addr_un->sun_path,
h2o_chunked_register(h2o_hostconf_t
h2o_evloop_socket_create(ctx.loop,
https
(double)(i
conf->listeners[i]->ssl_ctx;
KURL_NO_AUTH
h2o_evloop_t,
h2o_mempool_clear(&ssl->output.pool);
(ks)
h2o__socket_pool_h
s->state.w[4]
->is_ready==0,
(l_key
(event.type
kr_rand(_kr)
[sizeof(key_t+val_t)+.25]*n_buckets.
HEX(__SUNPRO_C>>8)
blocking
h2o_realloc(conf->listeners,
hints,
based)
str.s;
s->buf.w[i&15]
47,
tol1
third_req)
H2O_DEFAULT_MAX_REQUEST_ENTITY_SIZE;
on_config_listen(h2o_configurator_command_t
(r.name
host))
*ai;
*timeout,
0x27u
nodes,
Watcom
(st.st_size
registers
(target[0]
printf(v
req->res.reason
_KO_MAIN
Am1
(cnt
events[256];
strdup(21);
SOCK_STREAM;
event.type
fv);
positions
--help)
**slot);
(entry_wake_at
fails.
NULL-terminated
sent_headers;
(rest
t
*h2o_evloop_create(void);
reproxy-url
H2O_TOKEN_REFRESH
0x3333333333333333ull);
c:h,
0x7fffff0u
name_len,
200000000;
<uv.h>
fs,
ku->multi
closest
__BGZF_H
free(he->A0);
((error
*h)
self_tid)
srand48(1331);
max_processed_stream_id;
H2O_TOKEN_ETAG;
examples/doc_root,
FD_ZERO(&fde);
(--node->_refcnt
r))
*kb_getp_##name(kbtree_##name##_t
},
16;
hostconf->hostname.base[i]
ext_node->data.scalar
resolve
H2O_TOKEN_AGE,
eold
H2O_SOCKET_FLAG_IS_DISPOSED
cnt_left
H2O_TIMESTR_RFC1123_LEN))
SA[i]==0,
q3)
*on_config_listen_setup_ssl(h2o_configurator_command_t
rr.te,
Error,
listening
path
*protocols);
defined(SDCC)
&conf->max_connections);
msg.base);
(*buffer
putchar('\n');
EXPRESS
*on_context_init(h2o_handler_t
2*sizeof(void*)
conf->listeners
url.base,
curl_easy_cleanup(ku->curl);
h2o_mempool_release_shared(type.base);
mu3);
on_config_listen_exit;
(port
*desc
address:
gai_strerror(error));
mutex
ctx,
200);
(plen
req->res.headers.entries,
93},
*reason,
HTTP/1.0\r\nHost:
likely
y0;
num_headers)
cs);
methods
printf(a
h2o_h
HTTP2_SIG.len)
ai
(should
*dst_end
compiler[
s);
*h2o_create_filter(h2o_hostconf_t
info_platform[argc];
ctx->loop,
AS245
\x00\x03
max_connections;
str[i+j];
License
<pthread.h>
*unhandled)
_mm_storeu_si128((__m128i*)buf,
OK
s->f
printf(%d\n,
H2O_HTTP2_ERROR_FRAME_SIZE
argc,
padding_length);
WARRANTIES
H2O_VECTOR(type)
_pools[2];
on_body_content_length(h2o_socket_t
defined(__FreeBSD__)
3)))
212
num_listeners
h2o_http1_finalostream_t;
0xF)),
peer_settings->initial_window_size;
stat
multiline);
offsetof(yoml_t,
fx)
could
!
compiled
signal_ignore_cb;
string
ks_getc(ks))
according
kg_print_##name(kgraph_t(name)
printf(#
global_config;
kmptype_t,
1;
h2o_configurator_enter_cb
listeners[i].ctx
*mp,
ai->ai_addr,
h->vals[i]
compilers
h2o_http2_data_payload_t;
Try
(!__ac_isempty(new_flags,
{46,
uv_run(ctx.loop,
#ifndef
DEC(SDCC/100)
proxy-authorizatio,
*_tle);
(h2o_memis(req->method.base,
'\177'))
reason,
(SA[i])
*token,
ai->ai_addrlen);
printf(return
configs
(so
HAVE_MEMMEM
client_key,
fd,
config_str
10240*1,
unknown
(diff)
228
H2O_TOKEN_PROXY_AUTHORIZATION,
H2O_TOKEN_DATE
fail
50;
&fde,
c->exit
{220,
farthest
seconds
on_config_listen_exit(h2o_configurator_t
*)&listener->addr;
H2O_HTTP2_FRAME_TYPE_DATA
exit_loop)
on_upgrade_complete);
IPPROTO_TCP))
&res)
terminated)
pthread_cond_broadcast(&t->cv);
r)
test_chunked_per_byte(int
table,
method
to_sync
insert
AI_ADDRCONFIG
Identify
HTTP/1.1\r\nhost:
needed
entry->sym;
32+name_len+value_len
49)
(*obj
conn->_input
handle
++node->_refcnt;
__ac_set_isboth_false(flag,
occured
GET)
free(ks->name.s);
(z+2);
inreqlen
DEALINGS
unless
ks_heapadjust_##name(size_t
Algorithm
h2o_logger_t;
NI_NUMERICSERV);
h2o_http2_decode_rst_stream_payload(&payload,
190
k2
(an
*bgzf_read_init()
start_request(client->ctx);
---
uv_tcp_init(loop,
(!
kurl_destroy();
*_listener)
fp->retr,
err,
free(ku->buf);
flags:
(ks_getc(ks)
pool->chunks
_mm256_loadu_si256((const
0xfffe8u
30%,
defined(_WIN32)
hmm_lk(const
parse_url(&req->pool,
encoder
(ctx->_timestamp_cache.tv_at.tv_sec
187},
(*buf
TCP)
h2o_input_buffer_t
sock->uv.close_cb
help,
H2O_USE_LIBUV)
*test_name
conf->num_listeners;
ks_destroy(kstream_t
~15;
-7
EVENT
AI_PASSIVE;
kputuw(unsigned
(void*)(str
23)
conf->listeners[i];
aux->max_response?
h2o_loopback_conn_t
URLs
num_headers;
(0
30);
2*w+1;
Get
(*q
util
Return:
w->t->n_slots;
st_h2o_http2_frame_t
b64tab[(int)digest[i]
*chunks;
*r;
kurl_buflen(kurl_t
h2o_socketpool_connect(h2o_socketpool_t
Store
1000)%10)),
*dret,
(SSL
229},
ok(strcmp(doc->data.scalar,
bind(listener->fd,
*)h->vals,
{212,
doc->data.sequence.elements[0]->data.mapping.elements[0].value;
ready)
nread;
memcpy(output,
long.
ks_lt_generic(a,
(uv_accept(server,
between
goto
*laa
st_h2o_hpack_header_table_t
_output_header_table;
info.
fu;
\n);
n_row;
fd
cigar[i]
*entries;
(++s->bufOffset
connection_index,
**argv;
path:
&sockaddr);
%s\n,
min,
self->client
(__sort_lt(*k,
SSL_CTX_set_tmp_ecdh(ssl_ctx,
uv_loop_t
(prob
h_end
sizeof(reuseaddr_flag))
zlib
v
tcp)
u;
TCP_DEFER_ACCEPT,
(events[i].filter)
resources
More
h2o_setup_next_ostream(h2o_filter_t
failed
is_final
addr.sin_addr.s_addr
_pos_.
descriptors
**at;
Z_DEFAULT_COMPRESSION
register
architecture,
epoll_wait(loop->ep,
(!new_keys)
&entry->_link)
&&
33,
failed
score2,
IPV6_V6ONLY,
skipTable[*search];
(buf,
h2o_init_request(&conn->req,
ourselves
kstrtok()
h2o_add_header_by_str(&self->src_req->pool,
occurrences
DEC(__PATHCC_PATCHLEVEL__)
on_accept);
size)
free_bio,
(argc
ostream->next;
++ia,
10000000)
../t/test.h
none
dx
serv[NI_MAXSERV];
SCO
stream-level
listener->addrlen,
sizeof(host),
sure
chunk)
implementation
none)
temp
(lstat(servname,
s[i];
YAML_SEQUENCE_END_EVENT)
h2o_get_timestamp(h2o_context_t
0x15u
the
_mm_subs_epu16(h,
notice
h2o_buf_init(H2O_STRLIT(/index_txt_as_dir/));
(kseq_t*)calloc(1,
h2o_mempool_init.
%s:%s:
*)&listener->addr,
(node
yoml_parser_h
fabs(fa
l_buf;
ADVANCE_TOKEN(*path,
h2o_send_inline(h2o_req_t
using
listener->socktype,
H2O_STRLIT(s)
(hd
*addr_un
kf_lgamma(a)
req->authority.base,
s[l
ku->fd
DISCLAIMED.
-DBGZF_CACHE.
close_client(client);
...;
==0
assert(req->_ostr_top
1013904223L;
j-1
h2o_buf_t;
listener->protocol
(s),
7230
(identifier)
we
2.30,
x)[n])
*sock,
sizeof(*sock));
node
File:\n
(h2o_contains_token(headers[i].value,
(uint8_t*)key,
&conf->configurators;
*************************/
VVRRPPPPP
H2O_STRUCT_FROM_MEMBER(h2o_configurator_t,
0xFF)
SEEK_SET);
on_accept))
HASH_LENGTH;
(target_len
self);
always
/*--------------------------------------------------------------------------*/
OK\n,
introsort()
sha1_write(sha1nfo
*elements
bound;
403,
\tc));
realloc(seq,
h2o_vector__expand(pool,
ok
&rem);
ELEMENT_TYPE_REMOTE_ADDR);
*client_ctx,
SOCK_STREAM,
produced
decode32u(frame->payload)
kb_putp_##name(kbtree_##name##_t
((self
0x3fffe3u
(with
h2o__num_tokens;
2.)?
response.
max-connections,
st_h2o_logger_t
0x5c
*h
(0123456789abcdef)[bin[i]
strlen(sig),
arg->opcode,
if-modified-sinc,
m2
*added
uint8_t(h2o_tolower(p[i]));
@return
conn->sock->input->size
*method_len);
--help
*kb_init_##name(int
h2o_malloc(sizeof(*newp));
{21,
(req->path.base
khiter_t
handle_rst_stream_frame,
h2o_configurator_command_t
usage_print_directives(config);
*tab
SA[m..n-1]
kr);
(!isspace(*p))
request_gathered_write(h2o_http2_conn_t
sum
license.
conn->_write._pools);
sizeof(:///)
std::sort
matching
&sstat)
3)
fabs(b)
s->state.w[0],
output.
(isspace(s[i])
global_t;
(int)(drand48()
&mask);
AI_ADDRCONFIG;
*fp;
0x76,0x54,0x32,0x10,
**desc;
list,
H2O_HTTP2_FRAME_FLAG_END_STREAM
(indexed
h2o_http1client_head_cb
on_context_init
h2o/socket.h
(x)|=(x)>>2,
filters;
*h2o_socket_import(h2o_loop_t
*kurl_dopen(int
yoml_free(config_yoml);
0x5eu
.,
*run_loop(void
(*h2o_socket_cb)(h2o_socket_t
seek()
{173,
&io_timeout,
src_end))
argv[2],
sockaddr_un);
seq->seq.s[seq->seq.l]
*host_config;
(strcmp((a),
(FLOAT**)calloc2(hd->L+1,
socket/uv-binding.h
free(t->w);
max;
(rest)
H2O_SOCKET_FLAG_IS_POLLED_FOR_WRITE
file:%s:%s\n,
curr
on.
(uint8_t)*data++);
expand);
hostconf
<url>\n,
_STR(...)
_mm_cmpeq_epi8(t2,
h2o_http2_conn_register_stream(h2o_http2_conn_t
(const
yoml_parse_document(&parser,
block_offset;
k,
*result,
host2[80],
&client_key)
sizeof(action));
_KSW_MAIN
fabs(0.5
h2o_find_header(const
stable
header_table->num_entries;
v[6],
(whence
(conf->num_threads
initialized
0137u)
181},
sockaddr_un
sigaction(SIGPIPE,
khttp_parse_url(fn,
config_file
h2o_strtosize(colon_at
seq->data.sequence.elements[seq->data.sequence.size++]
that
st_yoml_t
count,
phr_parse_response(sock->input->bytes,
0)
epoll)
high)
H2O_STRLIT(no-cache)));
decrements
{76,
w->t->to_sync,
440.4137358247522;
pthread_sigmask(SIG_SETMASK,
*_n,
https)
*listeners
0xF)
__m256i*)Zp1Tbl,
req->host_config->filters.size)
on_socketclose(void
?
h2o_config_scanf(h2o_configurator_command_t
(1024
*h2o_create_logger(h2o_hostconf_t
_mm_loadu_si128((const
flush_pending_ssl(sock,
Value
0xfffffe9u
mask
Jeeves
parse_headers(const
config
addrinfo
Search
(h2o_is_websocket_handshake(req,
_src;
native
depending
lib/access_log.c
sizeof(h2o_hpack_static_table[0])].value;
ctx->global_config);
seq->seq.s[seq->seq.l++]
this,
up
g->ymin
(0.1.6):
client
h2o_access_log_register(&config.default_host,
ai->ai_addrlen;
pthread_mutex_t
fwrite(buf,
h2o_config_define_command(
sock->super._cb.write
pos->prev;
(!match_case_small_str(name,
__KS_GETC(__read,
h2o_mimemap_get_type(h2o_mimemap_t
(h2o_linklist_is_linked(&entry->_link))
TO
time);
0xffffff)
included
d;
parse_headers(buf,
inserts
(client->_cb.on_body(client,
++h)
('Z'
block,
(__ac_isempty(h->flags,
h2o_dispose_input_buffer(&stream->_req_body);
tmp;
TEST(x
note(decode_int);
(int)headers[i].value_len,
knet_read(fp,
<inttypes.h>
parent_tests
eb
68},
<stdlib.h>
points
encode
h2o_accept_ssl(ctx->ctx,
thing
51},
h2o_mimemap_t
wake
(knaux_t*)calloc(1,
KURL_MAIN
**cmd2argv(const
2011-04-10
(isspace(str[i]))
H2O_CONFIGURATOR_FLAG_GLOBAL
__kp->x)[__kp->i]
num_threads;
(v).n
'N',
host.base,
*h2o_context_get_handler_context(h2o_context_t
negated
considered
(iter
*curl;
malloc(N
so,
knet_win32_init();
sock,
aux->fd;
h2o_consume_input_buffer(h2o_input_buffer_t
size:
timeout;
*proxy,
test.failed,
&pb,
*loop;
(!new_vals)
alloca(sizeof(*listeners)
improvement,
Windows
793.8265125199484;
kltype_t
property
h2o_proxy_send(req,
split
&h2o__tokens[h].buf;
residue
ksq->seq.l
103},
t->n_threads;
(handles
&ctx;
*h2o_config_create_configurator(h2o_globalconf_t
|=
++a)
KNF_TYPE_HTTP
((new_node
*head;
listeners[i].sock->data
node->data.scalar
HP-UX
seq
bracket
h2o_file_register_configurator(&config.global_config);
<
fp->cache_size
h2o_socketpool_init(h2o_socketpool_t
h2o_http1client_t
path_len)
_bgzf_open(fn,
configurator->commands.size;
(ktf_worker_t*)data;
h2o_socket_is_reading(listeners[i].sock))
__sync_fetch_and_sub(&conf->state.num_connections,
(*dispose)(struct
aux->tab[3]
if-matc,
(inbuf->size
hints.ai_flags
iovcnt
(int)tmp;
prefix
_reqsize;
'\177')
sizeof(saint_t)
missing\n);
**argv)
nb1
inbuf->_capacity);
upper
H2O_STRLIT(The
yet
*bgzf_open(const
&dret)
h2o__http1_h
31;
%ld,
sizeof(hmm_data_t));
longopts[]
required_argument,
data);
(b)->root;
&body,
failed\n);
256)
gettimeofday(&tv,
*)h->keys,
%s\t%d\t%d\t%g,
SDCC
DEC(SDCC/10
EV_ADD);
(*num_headers
ks_heapadjust_##name(i,
process_slot(w->t,
free().
h2o_linklist_insert(&slot->blocked_streams,
DEC(_SGI_COMPILER_VERSION/10
%d,
(may
plen)
DEC(_SGI_COMPILER_VERSION
DEC(_COMPILER_VERSION/100)
inclusive.
*base;
self->super.enter
identification
g_magic[19]
('A'
seq->name.s);
millis
HTTP/1.1
CHUNKED_IN_CHUNK_EXT;
-2
->http_host
a[n-pop-1]
defined(_COMPILER_VERSION)
macro.
t.w[i].t
identify
platform
KNF_TYPE_HTTP)
208
defined(__sgi)
defined(__hpux)
sent
unknown
x1[k];
(;
used.
nodes
Construct
getting
ks_str()
*mp;
main()
positive
rather
flags,
headers[i].name_len,
hexbuf[SHA_DIGEST_LENGTH
&event))
h2o_set_header_by_str(h2o_mempool_t
than
within
array
yy[]
h2o_create_handler(host_config,
H2O_HTTP2_STREAM_STATE_RECV_HEADERS:
h2o_http2_stream_state_t
array.
size);
registering
on_context_init(ctx,
COPYRIGHT
H2O_TOKEN_RETRY_AFTER,
_wreq,
info_compiler
46)
h2o__uv_binding_h
log-style
Ak[l]
sizeof(addr));
INFO
++t)
&localt);
converge
compress_level
h2o_socket__write_pending(h2o_socket_t
y[i][j];
st_h2o_configurator_t
...)
free(hd->seq);
detach
1));
content-encoding
:
constructed
on_handshake_complete(h2o_socket_t
things
h2o_proxy_config_vars_t;
*h2o_get_filext(const
(conn->max_open_stream_id
'q':
COMPILER_VERSION_MINOR,
+0900)
H2O_TOKEN_VIA,
AF_UNIX;
name.
st_h2o_req_t
(h2o_buf_t*)&name_token->buf;
supported\n);
WSAStartup(MAKEWORD(2,
&quot;Software&quot;),
certificate
defined(linux)
HMM_BACKWARD
Linux
Cygwin
(uint32_t)src[1]
ctx->globalconf->http1_upgrade_to_http2
h2o_linklist_is_linked(h2o_linklist_t
SA[--B[c
*frame,
COPY
max)
F(i,j+1)
defined(WIN32)
++curr;
*)RA,
*h2o_evloop_create(void)
*node);
connection,
*hd);
p->next)
self->vars->mimemap);
non-existing
defined(__NetBSD)
Smith
rid
is_file?
NetBSD
url,
malloc(n
-c
address),
st_h2o_timeout_entry_t
data
h2o/socketpool.h
fv,
defined(__AIX)
*reqbufs
bufcnt
defined(__sgi__)
((unsigned
various
25,
-12345);
into
(default:
reserve
note(const
((v).a[--(v).n])
ai->ai_protocol;
absent
(max_cur_frame_size
BGZF*
defined(__hpux__)
available.
b->root,
__INTEL_COMPILER
layer
abstraction
run_loop(&config);
defined(_M_AMD64)
**qry);
(v).m
-3.83,
h2o_send
(speciallized
q0);
exit(1);
H2O_HTTP2_FRAME_TYPE_PUSH_PROMISE
--test_level;
capacity)
_target,
H2O_TOKEN_X_REPROXY_URL
server,
headers
*kr)
QNX
resetting
a[i-1];
str->s[str->l]
choose
fdw
%d,%d,%d,%d,%d,%d,
defined(_tru64)
Tru64
C
0xFFFF;
1
(char*)fn;
conn->req.version
FITNESS
Modified:
optimized
(NULLs).
st_h2o_timeout_t
references
(qlen
120},
_pools
kf_lgamma(double
PARSE(HTTP/1.1,
/**********************
obtain
*reason;
assert(ret.len
defined(__bsdos__)
h2o/http1client.h
*node,
defined(MPRAS)
MP-RAS
result->name
al.
kmin_hj(f_Chebyquad,
93
Subtest:
kputsn(\n,
hd->f[u-1],
H2O_TOKEN_WWW_AUTHENTICATE
(*h2o_timeout_cb)(h2o_timeout_entry_t
permission
0x1fffe2u
he1->n;
argc)
=
priolist_unlink(h2o_http2_stream_priolist_t
st_h2o_timestamp_string_t
OSF1
defined(_SCO_SV)
&t.w[i]);
defined(sco_sv)
invoked
h2o_proceed_response(req);
BeOS
1000)
h2o__token_h
defined(_XENIX)
Zp1Tbl[2]
below).
eh[j].h;
defined(XENIX)
/******************************
{8,
result->name->len
last,
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0
55)
connections
*S++);
sock->peername.len;
(decoder->consume_trailer)
*kl;
--str->l;
0
Intel
h2o_config__define_command(configurator,
BLOCK_LENGTH);
*knet_open(const
change
%s\n,
VECTORIZED
data...
X
on
h2o_mempool_init(conn->_write._pools);
DEC(__INTEL_COMPILER_BUILD_DATE)
KO_FTP
q->slen;
ku->err
0x400,
H2O_HTTP2_FRAME_TYPE_PING
IA64
KU_DEF_BUFLEN;
_mm_max_epu8(max,
assert(max_l
set
a),
u)
X86
ok(strcmp(h2o_mimemap_get_type(mimemap,
0x3fffffffu
vertex_t;
Close
strdup(proxy);
on_connect_error(h2o_http1client_t
_creq;
0x1eu
position;
defined(__FreeBSD)
(capacity)
app.
defined(_M_MIPS)
positives
sizeof(int)
defined(_M_SH)
#else
SHx
*huffdecode4(char
seq->seq.l;
55);
digit
multiple
h2o/timeout.h
C++
i&0xff;
DEC(n)
(((n)
overwrite_if_exists)
166
&msgarg);
H2O_TOKEN_ACCEPT;
h2o_file_register_configurator(h2o_globalconf_t
H2O_HTTP2_STREAM_STATE_RECV_HEADERS,
HTTP2-spec
100)%10)),
*n
authority
*cur)
embedded
y[i][j]
(handle_incoming_request(conn)
Apache
&src_conn->req.res.headers,
*tail;
(ib
10))
score,
0xfffe7u
66
offset;
index_files[i]
order
kl->head->next;
HEX(n)
b->shutdown
Tomlin
ctx->_module_configs[handler->_config_slot];
{254,
st_h2o_handler_t
((n)>>16
mat
217},
filters);
2007-11-09:
CRYPTO_UNLOCK)
H2O_SOCKET_FLAG_IS_POLLED_FOR_READ
opt->s3key_fn
arch[
encoding
KMIN_RADIUS
DEC(__TI_COMPILER_VERSION__
h2o_http2_goaway_payload_t;
components.
(--num_accepts
indicates
'I',
end_loop8;
len;
(*cb)(void
bgzf_fdopen(fd,
ks_getuntil2(ks,
is_ack,
data),
curl_slist
*next;
_k,
fp->offset);
'O',
internal
LSB
st_h2o_input_buffer_t
fetch
h2o_http2_accept(ctx,
capacity);
{100,
ifdef
self->src_req
*hd,
((iter)->next)
time.
h2o_lookup_token(src[i].name,
0xffffffdu
Induced
match
https,
expect_default;
1?
sizeof(khkey_t));
{32,
smaller
name.base,
*host_settings);
info_arch[argc];
&s,
usage(&config.global_config);
src_end
AIX
info_version[argc];
(apply_commands(ctx,
configurators;
(char*)malloc(strlen(home)
size_t*
mu2);
free(stack);
yoml.h
h2o/linklist.h
qry
ma[query[k]])
self->up_req.bufs[1].base
h2o/memory.h
range
header;
automatically
((b)->n_keys)
(*on_context_dispose)(struct
ks->is_eof
h2o_file_register(hostconf,
*h2o_http2_stream_open(h2o_http2_conn_t
*ssl;
*h2o_evloop_socket_create(h2o_evloop_t
shrink_factor);
connections.
anchor
100
H2O_MAX_TOKENS
req->host_config->filters.entries[req->_ostr_init_index]);
max);
subtest(const
req->res.status,
remaining;
(10
advance
0xfffffe2u
uint8_t(p[i]);
H2O_TOKEN_AGE
ksa_bwt
H2O_DEFAULT_MAX_REQUEST_ENTITY_SIZE
h2o_set_header(h2o_mempool_t
close(pfd[1]);
h2o_linklist_t;
H2O_DEFAULT_HTTP1_UPGRADE_TO_HTTP2
ap;
sends
headers[*num_headers].name;
generator;
12);
6.4.
typedef
st_h2o_conn_t
ap)
kftp_get_response(ftpaux_t
handler->on_req
incomplete
bytes;
xp,
34},
--i)
n_row);
*yoml_parse_document(yaml_parser_t
__KB_PTR(btr,
(void*)_self;
st_h2o_context_t
*method_is_head
h2o_context_t;
upstream;
%s,
H2O_TOKEN_ACCEPT_LANGUAGE,
on_read_ssl);
kroundup32(str->m);
<===\n,
defined(_M_IX86)
PLATFORM_ID
st_h2o_configurator_command_t
1000);
HEX(__SUNPRO_C>>4
h2o_configurator_t;
(++p;
st_h2o_globalconf_t
86},
H2O_TOKEN_VARY,
h2o_mimemap_t;
tmp2);
sock->loop->_pending;
ks_heapsort(name,
H2O_STRLIT(/a%6));
POST
line
fp->compress_level,
(if
declare
c1
st_h2o_token_t
kh_init(ipk);
*port;
&addr);
buf;
na
partial,
%lg\n,
(fd
connection)
final
*cur
_mm256_cmpgt_epi8(*(const
conn->_req_entity_reader
lsize
%s\n
sockpool,
http2_static_table_name_index;
sz,
check(const
h2o__lcstris_core(const
++ia;
&stream->_ostr_final;
4.87,
VisualDSP++
non-zero
h2o_access_log_register_configurator(&config.global_config);
_unused2[32];
*input
&res,
h2o_token_t;
reqbufs,
FreeBSD
11)
header[2]
{99,
*kr;
{234,
PARSE(G\tT
(whence==SEEK_SET)
plen;
ks->end
*test_loop;
h2o_proceed_response(&conn->req);
second_req;
time_t
strchr(cand_str,
entry->dispose
h2o_http2_conn_register_for_proceed_callback(h2o_http2_conn_t
rfc1123[H2O_TIMESTR_RFC1123_LEN
listeners[i].sock
MAY
kh_end(conn->open_streams))
themselves
1ul<<d
fp->open_mode
receiving
realloc;
0x1ffffecu
H2O_TOKEN_EXPECT,
on_send_timeout;
*self);
HEX(__CODEGEARC_VERSION__>>16
(*on_req)(struct
191},
*conf)
S3
kh_end(mimemap->table));
16))
kl->tail;
++numtests_in_subtest,
(kvar)
h2o_configurator_dispose_cb
CURLOPT_VERBOSE,
POST),
filters
H2O_CONFIGURATOR_FLAG_EXPECT_SEQUENCE,
*data);
h2o_context_t::filters.
(a<<8&0x00ff0000)
(max_num_entries
h2o_mempool_clear(&pool);
--hh;
(*absent)
words,
101},
h2o_ostream_t
_backend.timer,
*loop)
h2o_socket_export(h2o_socket_t
sizeof(FLOAT));
H2O_TOKEN_CONTENT_ENCODING,
/**************
H2O_CONFIGURATOR_FLAG_EXPECT_SCALAR
s3_parse(const
{47,
H2O_TOKEN_REFERER
{252,
assert(!
log
inline
*dst;
*opt);
scheme;
request)
loggers
**scheme,
free(http_host);
h2o_context_t::loggers.
18];
(*log_access)(struct
kh_value(h,
kputsn(id,
contains
knet_open(fn,
test_request(void)
stringified
Matsumoto
SHA1_Final(bin,
listener_config_t
names
_link.link,
timestamp
to;
z;
main(void)
update_input_window(conn,
NULL,
sizeof(kurl_opt_t));
*mid;
table->entries

&n,
h2o_timestamp_string_t;
%H:%M:%S
h2o_get_timestamp
req->buf.base
timeval
ks_getc(kstream_t
O_APPEND,
h2o_timestamp_string_t
2;
_bgzf_close(fp)
data[i];
w->t->n_threads;
ok(req.headers.size
&self->last_content_before_send);
interprets
HTTP/1.,
EM-Q
0x100,
hmm_new_exp(hp);
printf(
x)*tgamma(y));
*_bufs,
H2O_CONFIGURATOR_FLAG_EXPECT_MAPPING
undefined
printf(name:
evloop_do_on_socket_create(struct
HEX(__BORLANDC__>>8)
wslay_event_msg
(b))
H2O_CONFIGURATOR_FLAG_DEFERRED
h2o_configurator_command_t;
maybe_token,
181;
(stream_id
(*h2o_configurator_enter_cb)(h2o_configurator_t
configurator
h2o_socketpool_return(h2o_socketpool_t
ctor
eh_t
called
61
d)
h2o_http2_window_update_payload_t;
0xVRR
content
fields[i]);
lines
237
do_close;
*h2o_evloop_socket_accept(h2o_socket_t
H2O_HTTP2_STREAM_STATE_REQ_PENDING:
conf->listeners[i]->addrlen,
*pool);
could
before
commands
Usage:\n
((value
getnameinfo(req->conn->peername.addr,
enter;
(buf[src++]
((SA
IOV_MAX);
defined(__IAR_SYSTEMS_ICC)
ok(doc->data.sequence.size
fd);
move
test,
memset(&aux,
CHUNKED_IN_TRAILERS_LINE_HEAD:
incoming
(__ac_iseither(h->flags,
list
type);
1.28,
ks_resize(kstring_t
-15)
commands;
long)
21},
h2o_http2_window_get_window(h2o_http2_window_t
*logger)
assert(escaped.len
-sb;
h2o_add_header(&req->pool,
C
(base
NUL
hostname;
sizeof(*bufs)
*k
q1)
code
fp->block_length;
log(z+6.5);
H2O_VECTOR(h2o_logger_t*)
29);
TEST(\x7f\x00,
((100
bytes_read;
(h2o_hostconf_t)
weight;
h2o_proxy_register_configurator(&config.global_config);
(*h2o_http1client_connect_cb)(h2o_http1client_t
H2O_VECTOR(h2o_hostconf_t)
pushed
5
H2O_HTTP2_SETTINGS_HOST;
H2O_TOKEN_IF_MATCH
kurl_read(kurl_t
*s3secretkey;
happened
0x62u
listener->addrlen)
sequences,
ks_len()
')')
37,
size
ftp->fd
3))
trying
CURL_MAX_WRITE_SIZE)
et[k][b]
&tv);
H2O_STRLIT(/.))
entity
stream->_data.entries,
*h2o_http1client_connect(h2o_http1client_ctx_t
~H2O_SOCKET_FLAG_IS_CONNECTING;
(e.g.
i++)
-1
NGHTTP2_HUFF_FAIL
x;
list.size;
little-endian
whether
crc;
All
h2o_http2_stream_priolist_slot_t
atoi(optarg);
kb_put_##name(b,
return
upgrade
->size
\r\n
http1_upgrade_to_http2;
on_handshake_complete
*sym
clone
6)
fraction
hmm_post_decode()
fill_buffer()
(per
H2O_SOCKET_FLAG_IS_DISPOSED)
q4)
simultaneously
(h2o_http1_conn_t*)req->conn;
bgzf_getc()
str,
(yoml
H2O
if_none_match->len,
writing.
cmd->name);
HTTP/2,
10,
folding
alloca(LOG_ALLOCA_SIZE);
z)
internally
104
(strcmp(cmd->name,
name),
0x19u
(in
*h2o_add_ostream(h2o_req_t
timespec
{205,
cert_file
\%.*s\
h2o_vector_reserve(conn->_write.pool,
H2O_TOKEN_STRICT_TRANSPORT_SECURITY
CRYPTO_set_locking_callback(openssl_thread_lock_callback);
limit
h2,
(kr->mt[i]
h2o_mempool_release_shared(mimemap->default_type.base);
single
_AC_KLIST_H
TODO
*src_end)
(either
(z+6);
*listener,
*obj
reader->prev_input_size,
q->Hmax;
(optind
M_SQRT2)
free(y);
(i/g->w)
29,
t0
DEC(_COMPILER_VERSION/10
&kh_val(p->_arc,
*global_config;
per-module
name_len
uv_now_at;
cb
H2O_TOKEN_CONTENT_RANGE
__ac_isempty(flag,
_timestamp_cache;
although
knet_seek(fp,
h2o_linklist_unlink(h2o_linklist_t
kl_val(iter)
represents
test_lib__string_c);
algorithm,
defined(__CODEGEARC_VERSION__)
(ku->done_reading)
(nbytes
183
http://code.activestate.com/recipes/272884/
offsetof(h2o_input_buffer_t,
&fdr,
HTTP/1.0\r,
large
defined(__SUNPRO_C)
task->func
IPPROTO_TCP,
test_len
defined(__GNUC__)
h2o_hpack_dispose_header_table(h2o_hpack_header_table_t
subclass
hd->p
ks_introsort_##name(n,
ksw_align(int
&ctx->zero_timeout,
((fp->block_address
logging
kftp_send_cmd(&aux,
value;
timeout_entry;
{192,
*h2o_uv_socket_create(uv_stream_t
RESERVE(sizeof(2147483647)
stream_id;
na,
break;
SSL
aux->max);
PARTICULAR
typically
calling
lib/proxy.c
*timeouts,
link
{68,
BGZF_BLOCK_SIZE);
*h2o_http2_conn_get_stream(h2o_http2_conn_t
create_listener(void)
*ssl_ctx,
bytes
{189,
127.0.0.1:7890:%s\n,
*_dst,
amATbl[4]
45)
header_table_evict_one(table);
files
h2o_socket_export_t;
need
Aligning
*fu1
(assert_is_extension(cmd,
*lower
H2O_HTTP2_SETTINGS_MAX_HEADER_LIST_SIZE
h2o_generator_t;
file:%s\n,
13))
h2o_prepend_ostream
chr(j))
specially
stack;
73
INCLUDING
(BGZF_BLOCK_SIZE
0x7fbu
#threads]\n);
seq->f;
sequence-of-extensions));
h2o_loopback_destroy(h2o_loopback_conn_t
\x00\x00\x12
free(buf);
behavior
h2o_fatal(no
desc;
png,
memcpy((uint8_t*)buf
parse(
zero,
table->entries[src_index];
abs-path
candidate
streams
h->n_buckets;
EarlyExit;
h2o_dispose_request(&stream->req);
H2O_STRLIT(custom-value)));
__cmp)
allocate_frame(&ret,
05MAR2012
__kbstack_t;
0x10
multiline
ksplit()
knetFile*
IPV6_V6ONLY
chr(j));
(*do_send)(struct
to_read);
sock->_next_pending
is_final);
H2O_TOKEN_IF_RANGE,
ks_lt_str(a,
perform_early_exit
defined(__osf)
h2o_timeout_init(h2o_loop_t
name_token->http2_static_table_name_index;
16?
int_packed_t;
TI
*_pat,
header).
slot->active_streams.next);
(incomplete)
outbufcnt
Johnson's
h2o_evloop_destroy(h2o_evloop_t*
phrase
Number
yoml_free(yoml_t
octets
cnt,
(that
handle_chunked_entity_read(h2o_http1_conn_t
frame->length)
Content-Length
ctx->_timestamp_cache.uv_now_at
forms,
buffer)
t=(a);
zero
thus
[beg,end)
&req->pool,
kl,
Generators
(h2o_tolower(name[15]))
parses
'>'
etc.)
kbi_popcount64(uint64_t
&entry->link);
anchor->prev
bytes_ready,
decode32u(frame->payload);
available)
sockaddr
((flag[i>>4]>>((i&0xfU)<<1))&3)
platforms
rpath_len
*a0;
underlying
H2O_SOCKET_FLAG_IS_READ_READY)
ch);
_kf_gammaq(double
curr,
string,
i)
1.2,
(fabs(p)
only,
-4
77},
KR_NN;
seq->qual.l
doc->data.mapping.elements[0].key;
supplemented
magic[28]
(z+7);
cursor;
eh[end].e
headers[i].value_len))
KURL_H
missing
h2o_context_dispose(&ctx);
10000000)%10)),
next->on_setup_ostream(next,
method_len
free(q[1]);
header->value.len;
kh_int64_hash_func(key)
[gzread]
query);
most
HTTP
(flag[i>>4]&=~(2ul<<((i&0xfU)<<1)))
assert(config->hosts.size
perform
<memory.h>
tot,
state
decoder->bytes_left_in_chunk)
(http,
like
*_errstr;
INT_MAX
10240
my_netread(int
h2o_timeout_init(client_ctx->loop,
(represented
(long)cnt,
(knhx1_t*)realloc(aux->node,
((listener->fd
qual
h2o_http2_stream_has_pending_data(h2o_http2_stream_t
sockaddr_un));
CHUNKED_IN_CHUNK_CRLF,
0xMMmm
version;
++pool->_shared.count;
h2o_linklist_is_empty(h2o_linklist_t
defined(__QNXNTO__)
function.
*eh;
entity;
pt[-1]);
processed
16,
((s*)((char*)(p)
(excluding
peer_settings;
bytes_sent;
data;
len,
persistent.
If
`key-file`);
h2o_timeout_get_wake_at(&loop->_timeouts),
*_generator;
KHASH_MAP_INIT_INT(name,
#A/C/G/T
KSTREAM_INIT(type_t,
KNHX_MAIN
beg,
node->prev
_ostr_init_index;
callcack
h2o_timeout_entry_t
*AA
--dst;
sock->ssl
1e-20;
he;
handle_data_frame(h2o_http2_conn_t
s->keyBuffer[i]
h2o_filter_t;
large)
window->_avail
ret[y++]
pthread_self();
_prevreqlen;
59,
16384)
defined(_BEOS)
_mm_max_epi16(e,
anchor;
h2o_token_t.
{86,
__KS_BASIC(type_t,
46,
unix
When
containing
alloca(req->path.len
such
m_cigar
memset(s->keyBuffer,
*h2o_mimemap_create(void);
++cur;
len);
sizeof(BGZF));
*__kstack,
*ptr,
*header_table,
f);
h2o_socketpool_set_timeout(sockpool,
flatten_headers(&conn->req,
kl_shift_##name(kl,
buffer
(client->_cb.on_body
index
KS_SEP_LINE
i)?
sizeof(hints));
uv_tcp_bind:%s\n,
exported
BLOCK_LENGTH)
output
h2o_http2_settings_t
&test;
ssize_t
kr->mt[i]
a[1]
(char*)kmemmem(str,
*connection,
*upgrade);
searches
tests
pthread_mutex_unlock(&w->t->lock);
cursor);
(mime-type));
kgint_t;
(*_fd)
CONNECTION_PREFACE
-0.87,
'c':
--i;
<openssl/ssl.h>
Convert
found
defined(__tru64)
*add_node(const
ExitConnect;
0xca62c1d6
va_end(arg);
directory-index
h2o_http2_conn_enqueue_write(h2o_http2_conn_t
KMIN_RADIUS,
bytes.
91
h2o_find_header_by_str(const
(int)bufcnt,
zero.
packInt32((uint8_t*)&buffer[compressed_length-4],
handler->_config_slot
-5
array;
hmm_Q0(const
H2O_USE_SELECT
{111,
generates
(k=0;k<16;++k)printf(%d
value_len);
0x10001000L
ftp->response[n++]
replaces
John-Mark
bits)
subtest_success
2)));
contributors.
h2o_conn_t
(a.url
overwrite_if_exists);
window->_avail;
h2o_delete_header(h2o_headers_t
h2o_accept_ssl(h2o_context_t
-9
{240,
would
ku->p_buf);
**path);
st.st_size;
*fn)
*src);
h2o_proxy_register_reverse_proxy(h2o_hostconf_t
on_config_paths(h2o_configurator_command_t
h2o_start_response(h2o_req_t
below,
*generator);
((*port
e:
h2o_headers_t
on_ws_message);
printf(
h2o_socket_peername_t
H2O_STRLIT(http://example.com:81/bar));
*Ak
on_read(sock,
ostream
(h2o_mimemap_create
where
configurator->commands.size
h2o_send(h2o_req_t
loop)
kh_init(ehn);
Global
st_h2o_http2_data_payload_t
headers)
const*
generators
buf[l++]
action.sa_handler
(ks->l
buckets
(__sort_lt(*ll,
(i.e.
SA[i]
h2o_socketpool_set_timeout(h2o_socketpool_t
settings
134},
\0\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\1\1
*connection
kvec.h
any)
TRUE
h2o_ostream_send_next(h2o_ostream_t
seq->seq.s);
h2o_send(self->src_req,
ks_ksmall(name,
ea
strlen(cmd));
*ostr,
req->headers.size
nb)
kh_val(conn->open_streams,
(other
from:
he
additional
tok_start;
c1;
(seq->seq.s
connection
INT_MIN);
ks_tokaux_t;
h2o_proceed_response(h2o_req_t
H2O_HTTP2_FRAME_TYPE_HEADERS
H2O_TOKEN_UPGRADE
(size_t
entry;
SO_REUSEADDR,
++self->vars;
va_start(args,
handlers;
H2O_HTTP2_ERROR_REFUSED_STREAM
*h2o_config_register_host(h2o_globalconf_t
KR_MM
*hostname);
H2O_UNITTEST
&ctx->zero_timeout;
assert(table->hpack_size
0x3u
both
huffcode
sz);
ELEMENT_TYPE_STATUS,
(h2o_tolower(name[24]))
fileno(fp)
'@');
&listener))
*candidates)
DEC(__INTEL_COMPILER
h2o_config_define_command(configurator,
storing
__declspec(align(x))
++q);
*desc[]
max_i,
generate
160},
test_chunked_failure(int
pthread_create(&tid[i],
on_connect;
handle_goaway_frame(h2o_http2_conn_t
*el,
(slow,
p->size
close(fp->fd);
huffbuf[4096];
res->headers.entries,
1ul<<shift;
(0)
ks_sample_##name(size_t
config_node
one-dimention
reqread_on_timeout);
status
(*target)->data.mapping.size;
deallocated
on_config_listen,
*name);
h2o_mimemap_get_type(self->mimemap,
__attribute__((format
&H2O_TOKEN_SERVER->buf,
(printf,
free(cbinfo);
openssl_thread_id_callback(void)
@discussion
(set
{18,
**ae;
(which<<1)
__ac_Wang_hash(khint_t
close);
qlen
++p;
identifier
p->next
free(path);
phr_header*
absolute
kr
__WATCOMC__
constructing
*tmp,
H2O_HTTP2_CONN_STATE_IS_CLOSING
bufs;
strlen(GET
huffdecode4(dst,
{}
100;
error;
--mp->cnt;
((*rr
sign
{165,
*dret
ret;
comma-separated
end-of-stream
79
'+')
free(mp->buf[k]);
test
max_frame_size
other
h2o_config_get_one_of(h2o_configurator_command_t
khash.h
(x)|=(x)>>1,
revision
lib/chunked.c
SAINT_MAX
H2O_TOKEN_ACCEPT_CHARSET
h2o_logger_t
req->host_config->filters.entries[++req->_ostr_init_index];
(__m128i*)(x+N));
j>>1;
on_body(h2o_http1client_t
O_RDONLY
kh_put_##name(kh_##name##_t
100ms
free(prep);
*string,
H2O_CONFIGURATOR_FLAG_HOST
_mm_cmpgt_epi8(x,
sizeof(void*)
html\n)));
he->E
p->name,
*context);
ext,
fp);
YOML_TYPE_SCALAR);
TEST(\0\&'<>,
*expected,
*handler);
h2o_http2_stream_t*)
h2o_vector__expand(h2o_mempool_t
&sock->_wreq.cnt)
kurl_seek(fp,
*size_cmd;
*logger);
configurators
<host>
b\r\nhello
built-in
8:212-229).
*)h->vals);
ku->l_buf,
was
information
&conn->req.path.len,
(fp->fd
39)
evloop_do_on_socket_close(sock);
certain
determine
h2o_timeout_is_linked(&conn->_write.timeout_entry))
132
ptr,
ok(result.name
payload->last_stream_id
17,
h2o_timeout_run(h2o_timeout_t
h->vals[i];
--bufcnt)
bytes);
10000000000000000000ULL)
EMIT_HEADER(1);
getCounts(T,
begin
sets
handle_chunked_entity_read;
args);
getopt(argc,
loop->socks[sock->fd]
use_keepalive;
almost
h2o_mimemap_set_type(h2o_mimemap_t
(inreqlen
2*m));
pack
*url;
current
test[0])
url
*VERY
(FD_ISSET(fd,
*mimemap,
180},
*type);
'0';
global.w
adaped
*ext,
_STR(__VA_ARGS__)
a[1];
heapsort:
*mimemap);
H2O_TOKEN_FROM
*h2o_lookup_token(const
et
H2O_TOKEN_IF_MODIFIED_SINCE
common
h2o__lcstris_core(target,
*conf);
H2O_STRUCT_FROM_MEMBER(s,
(mid
body,
mdiff,
deflate)
supported.\n);
self->upstream.host
to_sync,
default)
payload->headers
(src_req
world\r\n0\r\n,
sock->_wreq.smallbufs;
kh_init(str);
*a;
33},
1024)
pool.
lseek()
head)
88},
popen(path
SSL_TLSEXT_ERR_NOACK;
st_h2o_file_handler_t
socket_connect(host2,
he1
argv;
trasition
gif,
*h2o_file_register(h2o_hostconf_t
-10
h2o_http2_stream_priolist_t
H2O_STRLIT(websocket)))
n_evals;
index_files
phr_parse_headers(const
h2o_http2_window_init(&conn->_input_window,
(shift
p->parent,
seed);
to.tv_usec
-12
argument
(create_entity_reader(conn,
used
*virtual_path,
ok(t->data.mapping.size
mp->max<<1
drand48();
12},
assert(iter
sizeof(kts_worker_t));
h2o_proxy_config_vars_t
(pool->directs
new_vals;
even
cand_index;
__err_connect(connect);
tiny
h2o_reproxy_register(h2o_hostconf_t
kgraph_t(g)
knetFile
working
req,
key)
contexts
w[HASH_LENGTH/4];
modify
(hd->b)
(req->_ostr_init_index
h2o_socketpool_t;
155
r;
time
*config;
wreq);
h2o_http2_conn_state_t;
Returns
(seq->data.sequence.size
Heads
integer
CURLOPT_RESUME_FROM,
inserted
ctx->_module_configs[logger->_config_slot];
9);
copy_length
h2o__timeout_h
q5
changed.
kbnode_t
memcpy(newpt,
(config_node->type)
108},
decoded.len);
an
on_context_dispose(h2o_context_t
*slot;
Firefox/3.6.3
st_h2o_generator_t
HTTP/1.0\r\nh:
on_connect_timeout(h2o_timeout_entry_t
{175,
Modules
huffman
status;
willing
*h2o_http2_encode_frame_header(uint8_t
(koaux_t*)a;
log(ak[l]);
stream->_data.entries);
st_h2o_timeout_backend_properties_t
_backend;
reference:
test_level;
COMPILER_VERSION_TWEAK,
h2o_timeout_t;
kvec_t(int)
INT64_MAX
max.
buf[64];
activates
entry,
*buffer
(whence==SEEK_CUR)
%Y
h2o_linklist_unlink(&entry->_link);
IRIX
__kmax
(rest-6)
sizeof(a:
h2o_configurator_context_t;
conn->super.ctx;
imax;
64-bit
error);
h2o_timeout_get_wake_at(h2o_linklist_t
yoml_free(node->data.sequence.elements[i]);
components:
(int16_t*)q->qp;
h2o_start_response(req,
*timeouts);
h2o_timeout__do_init(h2o_loop_t
(node->data.scalar[0]
regardless
(ks)->f->end
h2o_timeout_entry_t;
(f
178},
++desc)
st_h2o_http2_stream_t
*h2o_http2_alpn_protocols;
header_table->entry_capacity)
to
probability
72},
codes
h2o_socketpool_init(self->upstream.sockpool,
section
*configurator,
h2o_mempool_t;
(unsigned
H2O_HTTP2_ERROR_PROTOCOL
{2,
(obj
++iter)
(do_seek
-3
*allow_psuedo
link,
**************************/
H2O_HTTP2_ERROR_STREAM_CLOSED
seq->seq.s
BGZF_ERR_IO
Zp1
(int*)realloc(offsets,
w[BLOCK_LENGTH/4];
info_arch
calculated
0x7fffe5u
H2O_HTTP2_ERROR_CONNECT
%d\n,
I\r\n,
(FLOAT**)calloc2(m
15
EC_KEY
components;
-256
sizeof(koaux_t));
test_parse_url);
++mp->cnt;
H2O_HTTP2_ERROR_INADEUATE_SECURITY
H2O_HTTP2_ENCODE_INT_MAX_LENGTH
conf->listeners[i]->fd,
ring
_COMPILER_VERSION
coding);
h2o_config_dispose(h2o_globalconf_t
st_h2o_hpack_header_table_entry_t
sep;
*right;
max_l;
available
num_entries,
ELEMENT_TYPE_REMOTE_ADDR,
39},
139
a+n);
#endif
on_connect))
src
handlers
hpack_size;
SETTINGS_HEADER_TABLE_SIZE
H2O_HTTP2_ERROR_INCOMPLETE
(xx)
*dst,
free(configurator);
mu4);
50000
h2o_socket_read_start(conn->sock,
*global;
int8_t
zero);
info->peername.len);
(a
__ks_insertsort_##name(a,
socket:%s\n,
reqread_on_read);
defined(__sinix)
h2o_hpack_flatten_headers(h2o_mempool_t
defined(__WATCOMC__)
h->keys[i];
h2o_timestamp_t*
KSORT_INIT_GENERIC(double)
h2o_is_websocket_handshake(h2o_req_t
h2o_http2_stream_has_pending_data(stream))
h2o_http1_finalostream_t
ts,
own
sock->super._cb.read(&sock->super,
b,
48,
fp->uncompressed_block,
0xAAAAAAAAAAAAAAAAllu;
Version
k0
Reserved.
index_files[i],
b))
ADSP
stream->_data.size)
h2o_http2_frame_t
minsc,
accepted
sock->input;
g->xmin
sig);
streams_with_pending_data;
++x->n;
4
h2o_memis(value->base,
6
h2o_find_header(&req->headers,
h2o_vector_reserve(h2o_mempool_t
's'
Directives
Total
st_h2o_http2_settings_t
MINUS_INF,
(h2o_lcstris(headers[i].name,
We
kb_put(int,
_mutex;
header_table_size;
max_concurrent_streams;
sizeof(18446744073709551615)
initial_window_size;
released
(h2o_vector_t*)&priolist->list,
bufs[2]
h2o_http2_settings_t;
xx[]
5.2
memcpy(buf.base,
<wslay/wslay.h>
st_h2o_http2_priority_t
On
(;;)
KO_FILE;
*ks_init(type_t
(inbuf
on_config_max_connections,
/*-
*pool,
minor_version,
frames
&ctx->globalconf->http2_max_concurrent_requests_per_connection);
new_n_buckets
H2O_HTTP2_FRAME_TYPE_PRIORITY
H2O_HTTP2_FRAME_TYPE_RST_STREAM
H2O_HTTP2_FRAME_TYPE_SETTINGS
DAMAGES
21
getBuckets(const
directions,
t->tasks[j];
h2o_websocket_close(conn);
__linux__
cmd
(inflateEnd(&zs)
slot
{110,
1.6180339887;
*h2o_upgrade_to_websocket(h2o_http1_conn_t
knetfile.h
(0.2.5):
int,
ks_len(kstring_t
a[],
H2O_TOKEN_ACCEPT_ENCODING
kh_end(g);
bytes_ready);
DEC(__PGIC_PATCHLEVEL__)
0xfffff0u
H2O_HTTP2_FRAME_FLAG_END_HEADERS
int_data;
*generator,
0x4
0x8
length;
machine
>=0
(*pt++)
*ftp)
*payload;
(ctx->hostconf
kmp_##name##_t
buf.len
fu[k];
signed
__i
h2o_http2_priority_t
headers_len;
cannot
seek\n);
h=H'(i-1,j-1)+S(i,j)
cur_frame
0x200,
__IBMC__
{6,
h2o_http2_rst_stream_payload_t;
portability
func,
sockpool->port.n,
structure
debug_data;
h2o_contains_token(req->headers.entries[connection_index].value.base,
st_h2o_http2_window_update_payload_t
str->m);
reader->content_length
significant
h2o_configurator_context_t
H2O_TOKEN_REFRESH,
window
*curV,
ret,
refcnt;
on_do_write_complete);
*parse(const
HMM_VITERBI;
'b':
h2o_http2_stream_priolist_slot_t;
*name,
(a,b,u)
UINT_MAX)
%h
H2O_VECTOR(h2o_http2_stream_priolist_slot_t*)
__kstring_t
strlen(bucket-1),
[ks_getc]
0x7ffffecu
upon
message
__func(&__KB_KEY(key_t,
vbeg,
h2o_http2_stream_priolist_t;
right-to-left
evloop_do_on_socket_close(struct
140
in.len);
\f,
HP
st_h2o_mimemap_t
H2O_HTTP2_STREAM_STATE_REQ_PENDING,
*connection)
optionally
kh_inline,
(z-0.5)
&allow_psuedo,
h2o_filter_t
(cand_index
b->flags
http2_max_concurrent_requests_per_connection;
H2O_HTTP2_STREAM_STATE_SEND_HEADERS,
H2O_HTTP2_STREAM_STATE_END_STREAM
*num_headers
(delimiter
away
comments
h2o_buf_init(H2O_STRLIT(http));
h2o_config__define_command(h2o_configurator_t
h2o_http2_stream_close(h2o_http2_conn_t
f(a)
h2o_init_input_buffer(&self->buf_sending);
is_half_closed;
0xFFF7EEE000000000ULL;
5);
(stream->state
about
kh_size(h),
(sock->super.ssl->handshake.cb
kseq.h
h2o_websocket_msg_callback
<getopt.h>
kstrtok(0,
HOLDERS
*path_len);
khash_t(h2o_http2_stream_t)
__m256i*)p);
h2o/http1.h
h2o_malloc(sizeof(*sockpool));
*_http1_req_input;
referred
temp[])
#rule
_input_window;
config->hosts.size;
st_h2o_proxy_config_vars_t
(popcount)
ALPN
*thr;
off_key,
h2o_http2_stream_t
parent_tests;
note:
h2o_http2_window_update(&conn->_write.window,
NEW_ELEMENT(ty)
*pool;
priolist_destroy(&conn->_write.streams_with_pending_data);
cbinfo->data
a[])
allow_psuedo)
st_h2o_http1_finalostream_t
probably
knet_open(http://www.sanger.ac.uk/Users/lh3/ex1.bam,
ks_init(fd);
*dst
**calloc2(int
18},
*user_data)
HEADER_TABLE_OFFSET);
h2o_http2_update_peer_settings(h2o_http2_settings_t
*settings,
deflate_block(BGZF
negtive
2013-05-02
&headers[*num_headers].value_len,
s->state.w[1]
misc
(sizeof(29/Aug/2014:15:34:38
&stream->input_window,
length,
*kst,
type,
h2o_loop_t;
path,
h2o_evloop_socket_create(
103
Name
koaux_t
h2o_http2_encode_rst_stream_frame(h2o_mempool_t
(rc
errnum);
H2O_STRLIT(you
DEC(__GNUC_PATCHLEVEL__)
last_stream_id,
default);
(but
global_config,
free(array);
0x3ffffe4u
strchr(hp_start,
h2o_access_log_register_configurator(h2o_globalconf_t
h2o_http2_encode_window_update_frame(h2o_mempool_t
h2o_http2_decode_frame(h2o_http2_frame_t
bb
vec.len
*payload,
req->headers.entries[settings_index].value.base,
__read(ks->f,
u_int
x[k]?
max_j
*paylaod,
h2o_linklist_is_empty(&conn->_pending_reqs)
yoml_sequence_t
kputl(long
sup
costs
*g;
ERROR:
buf);
client->_timeout.cb
zs.next_in
h2o_http2_window_get_window(&stream->output_window);
234},
(--(x),
below
finished;
pos;
next;
krand_t;
*src_req);
(path_len
distance:
aa,
*t)
deflate_block(fp,
on_connect_error(client,
bits_left)
*sha1_final_hmac(sha1nfo
*window);
H2O_STRLIT(GET
clearing
definitions
decode_header(&pool,
permitted
));
iter
kh_get(h2o_http2_stream_t,
w->t->n)
304))
beg]
x1
&self->super;
(aux->n
DeNA
it's
*data
called;
license
memcpy(&listener->addr,
on_send_timeout(h2o_timeout_entry_t
30,
be)
0x3ffffebu
h2o_base64_encode(char
14)
{206,
r->n
H2O_STRLIT(expected)));
kh_init(exttable);
*window)
((sock
note(decode_huffman);
files.
struct
conn->_read_expect
upstream);
(--d
closed
declared
40},
AC_KSORT_H
*cmd
gold2
*fp,
represent
read_any)
1e-25
`port`
assert(k2
*last_content_before_send;
free(a.date);
them
h2o_linklist_init_anchor.
H2O_TOKEN_TRANSFER_ENCODING
*prev;
h2o_socketpool_t
goaway
*anchor)
off_ptr,
_interval_cb;
h2o_realloc(line,
*task;
yaml_event_type_t
__kstack
node->prev->next
node->next->prev
int64tostr(tmp
s2;
xp
va_start(ap,
node->prev;
*rpath;
kh_key(h,
Vmax[u][k]
conn->peer_settings.max_frame_size);
st_h2o_http1client_ctx_t
kh_del(ehn,
sizeof(yoml_mapping_element_t)
{74,
*zero_timeout;
result->name);
*io_timeout;
kurl_error(const
0x0fffffff)
strtok_r()
kftp_send_cmd(fp,
write_once_more;
\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\1\0\1\0
task.n)
*stream);
YOML_TYPE_MAPPING,
defined(__OPENBSD)
-HMM_INF,
h2o_http1client_cancel(h2o_http1client_t
kv_copy(type,
sha1_init(s);
guaranteed
*client);
OK\r\nA:
fclose(fp->fp)
kswq_t;
E(i+1,j)
sock->input->size);
kseq_rewind(kst);
see
B)
bufs,
m)))
fa
*(low+1));
EINVAL;
h2o_timeout_dispose
h2o_mempool_chunk_t;
KGRAPH_PRINT(name,
res;
..,
{156,
b));
mode);
_capacity;
h2o_input_buffer_t;
NULL
aborts
nb;
ok(num_headers
__kl1_##name
URL
<assert.h>
*mid,
{9,
__KB_INIT(name,
he->A
st_h2o_http1_req_entity_reader
(1)
malloc;
*h2o_malloc(size_t
handles
*encode32u(uint8_t
reallocs
reuse
COMMON_CODE
test_name_len,
picohttpparser.h
out[j]
defined(__WIN32__)
*hostname)
p1
ksw_extend()
buf[32];
timer;
knet_win32_destroy()
&fd);
(_tle)
h2o_mempool_clear(h2o_mempool_t
getCounts(const
h2o_start_response
h2o_socketpool_is_owned_socket(h2o_socketpool_t
ref-counted
(sock->super._cb.write
netclose(fd)
defined(__sun)
listen
1000000,
cond
on_config_num_threads(h2o_configurator_command_t
const
&lng,
portion
decremented
'F',
h2o_websocket_close(h2o_websocket_conn_t
H2O_TOKEN_CONTENT_LOCATION
H2O_TOKEN_RETRY_AFTER
append_slash_and_dup(const
Viterbi,
m1
free
62
(sep[1])
rseq[j]
count
conn->_write.streams_without_pending_data.next);
*t);
gets
curl_multi_init();
buf[x];
h2o_dispose_input_buffer(h2o_input_buffer_t
memcpy(str->s
memcpy(ku->buf
node->data.mapping.elements[i].value;
inbuf
beginning
H2O_HTTP2_STREAM_STATE_RECV_PSUEDO_HEADERS;
*pat,
minimum
zero-fill
(mat[a]
(size_t)(i
dt
*value)
else
already-allocated
changed
h2o_reserve_input_buffer(h2o_input_buffer_t
&self->super,
**inbuf,
refcounted
defined(__DECC)
*headers;
*rr,
throws
khash_t(iun)
grows
(h2o_http2_handle_upgrade(&conn->req)
vector
(wslay_event_send(conn->ws_ctx)
(as
MINUS_INF;
so
kl_begin(kl);
least
(kstream_t*)calloc(1,
*auth;
element_size
calloc(0x100000,
y)[y->n
0x80;
capacity
HMM_FORWARD
h2o_vector_t
MINUS_INF
(y->is_internal)
\x00\x00\x00\x00
then
(*m_cigar)
target
{221,
p0)
0x75u
(test_len
str->s
strcmp(a,
((flag[i>>4]>>((i&0xfU)<<1))&1)
pragma
assert(h2o_linklist_is_empty(&slot->active_streams));
h2o_memis(const
Version:
((if_modified_since_header_index
target_len,
(xtra&KSW_XSTOP)?
((ret
_mm_xor_si128(m1,
*test,
Institute.
5))
OTHER
netwrite(fp->fd,
send_error(h2o_http2_conn_t
hp;
*config,
sz)
malloc(sz);
charset=utf-8),
fp->file_size
backend
h2o_linklist_init_anchor(&pool->_shared.sockets);
al.),
LOSS
realloc(oldp,
They
same
m;
130},
msec);
p);
**et;
247},
argv[0]);
r);
(entry->dispose
KSEQ_INIT2(SCOPE,
he->E[b][k];
entry->dispose(entry->bytes);
h2o_timeout__do_link(h2o_loop_t
(vector->capacity
FD_CLR(sock->fd,
vector,
comment
H2_PROTOCOL_IDENTIFIER
(int)ksq->seq.l
*hostname
j),
host.base);
s->s[s->l++]
_test;
kgraph.h
ok
cigar[n_cigar-1-i],
strlen(date),
*h2o_next_token(const
156
BUT
h2o_linklist_init_anchor(&conn->_pending_reqs);
0x2
kurl_tell(const
zs.avail_in
SunOS
H2O_SOCKET_FLAG_IS_ACCEPT
finds
strings
stream->_link.slot
H2O_SOCKET_FLAG_IS_CONNECTING
(socket_wait(aux->ctrl_fd,
EOF;
_gapo,
(conf->state.num_connections
d\r\n\r\n,
++src)
0x40
ok(doc->data.mapping.size
*listener);
unpackInt16(const
loop);
<in.fasta>\n,
16.06417757920695;
*loop);
step<<1)
h2o_uv_socket_create((uv_stream_t*)conn,
netclose(fp->fd);
*ts)
doc->data.mapping.elements[1].key;
H2O_TOKEN_CONTENT_ENCODING
115},
uv_timer_t
TYPE_MAP
ssl))
kh_init(name);
*user_data,
write_core(int
close_connection(conn);
L,
reqsize);
block_length,
128)
{40,
examples
ssl_ctx;
\n,
0xffff))
cnt
*argv[])
keys
host_config->filters);
select
http1
*uncompressed_block,
protocols;
1.63,
h2o_http1_accept(h2o_context_t
++xp->n;
SIZE_MAX)
addrlen,
kh_del(ipk,
0x7ffffebu
L-type)
_self;
hosts;
arr[],
(!isspace(cmd[beg]))
*--p;
_and_
BUF_SIZE)
*h2o_context_get_filter_context(h2o_context_t
inbufcnt,
h2o_timeout_link.
0x40000
SET_AND_UPDATE(EVFILT_READ,
H2O_TOKEN_AUTHORITY
2*m)
HMM_POSTDEC;
H2O_TOKEN_METHOD
ftp->max_response<<1
TCP_DEFER_ACCEPT
c->vars->io_timeout
headers->size++;
a.auth);
bytes[1];
H2O_TOKEN_PATH
suggested_size,
require
0x%lx)
name.len,
++kl->size;
info->peername.len,
H2O_TOKEN_SCHEME
4)
fw;
0x76u
Attractive
KNETFILE_H
systems,
ftello(FILE
(rret
h2o_linklist_is_linked(node));
H2O_TOKEN_ACCEPT_LANGUAGE
(dst_index
nbeg)
__kbstack_t
non-opaque
H2O_TOKEN_ACCEPT_RANGES
l_key);
r);
bgzf_getc(BGZF
(size
(maybe_token)
*str);
old
h2o_tolower(int
endsc
(x)|=(x)>>4,
H2O_TOKEN_AUTHORIZATION
space
++u)
wslay_event_context_ptr
state);
n;
strftime(date,
RESERVE(1);
H2O_TOKEN_CACHE_CONTROL
stream->_data.size
*status,
m_buf;
H2O_STRLIT(http)
//fputc(c,
19)
block_length)
(UINT64_MAX
decode_huffman(&pool,
H2O_TOKEN_CONTENT_TYPE
configuration);
closesocket(fd)
*config_node,
7
://);
(isspace(cmd[i])
char*,
*method_is_head);
server_name;
{139,
25)
st_h2o_sendfile_generator_t
CURLOPT_WRITEFUNCTION,
H2O_TOKEN_COOKIE,
*header_buf
H2O_TOKEN_EXPECT
chunk_size);
curl_multi_add_handle(ku->multi,
RFC
27)
H2O_TOKEN_COOKIE;
abc)
ks_ksmall_##name(size_t
equivalent
tok_start
ok(strcmp(path,
req->method.base,
kr->mt[KR_NN
fp->fp
decoded.base
H2O_TOKEN_CONTENT_DISPOSITION
milliseconds)
memcpy(ftp->pasv_ip,
37)
kf_erfc(double
base
combsort!\n);
h2o_http2_conn_t;
(*chunked_test_runners[])(int,
H2O_TOKEN_IF_NONE_MATCH
ku->m_buf)
(type_t*)top->left;
H2O_TOKEN_IF_UNMODIFIED_SINCE
addrlen);
eps,
cache_size;
self->index_files[i].len;
36)
*arg)
**a,
38)
elif
st_h2o_evloop_epoll_t*)_loop;
SCOPE,
test_decode_base64(void)
H2O_TOKEN_PROXY_AUTHENTICATE
req->base
<netinet/tcp.h>
increments
payload->length
allocated
at;
41)
ok(strcmp(decoded.base,
ks_ksmall(int,
&req->res.headers,
H2O_TOKEN_RANGE
t0,
http://nothings.org/computer/judy/
printf(qual:
gmax
_data_.
145
SEEK_SET)
free((char*)kh_key(h2,
H2O_TOKEN_SET_COOKIE
22)
iter)
*/
(suff[i]
cur_off
47)
read-only,
normalized
H2O_HTTP2_FRAME_HEADER_SIZE
BGZF_ERR_HEADER
*haysack,
0};
sizeof(khval_t));
entry->state;
((result->name
h2o_mempool_release_shared(kh_val(mimemap->table,
h2o_websocket_conn_t;
ws_ctx;
wslay_event_callbacks
malloc(n_col
*priolist_link(h2o_http2_stream_priolist_t
`|`,
*ktf_worker(void
**listeners;
st_h2o_socketpool_t
&upgrade);
(*proceed)(struct
vars
h2o_http2_window_consume_window(window,
0xVRRP
modified
ssize_t)
(*h2o_socketpool_connect_cb)(h2o_socket_t
h2o_socketpool_dispose(h2o_socketpool_t
x[k])
calloc(0x10000,
-1);
one)
close
super;
h2o_http2_window_update(h2o_http2_window_t
cache,
updated
pooled
peer
not
*zero_timeout,
53
HASH_LENGTH
97},
h2o_socketpool_connect_cb
*key++);
size,
method,
(5.5)
log-likelihood
H2O_TIMESTR_RFC1123_LEN
socket
w->t->n_threads);
given
(strncmp(buf
Nov
-x;
stop
src->headers.size;
H2O_STRLIT(/abc/def/..));
1994
assert(self
kputsn(p,
uv_close((uv_handle_t*)&listener,
disposes
*server,
len
(*h2o_http1client_head_cb)(h2o_http1client_t
result
h2o_timeout_link(h2o_loop_t
ts;
**E,
req->http1_is_persistent
(uv_stream_t*)conn)
src_end);
corresponding
33)
converted
showed
select(maxfd+1,
h2o_strtosize(const
0x5du
h2o_websocket_proceed(h2o_websocket_conn_t
base64
decoder
eps)
RFC-1123
handle_incoming_request(h2o_http1_conn_t
style
&conn->_ostr_final);
has
H2O_HTTP2_FRAME_FLAG_PADDED
{170,
needle
ht_khash_packed()
{180,
kputsn(.s3.amazonaws.com,
2616)
haysack_len,
block_length))
ftp->pasv_port);
entry_capacity,
No
h2o_buf_init(const
malloc(BGZF_BLOCK_SIZE);
eold)
pat_len,
\frac{2}{\sqrt{\pi}}
*needle,
'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',
0xVRP
h->vals[j];
&conn->_write.streams_without_pending_data;
251
sprintf(numbuf,
EXEMPLARY,
over
((v).n)
knet_close(fp)
&pool->_interval_cb.timeout,
contained
self->vars->index_files[i]
h2o_malloc(sizeof(*openssl_thread_locks)
source,
KNETFILE_MAIN
{33,
h2o_normalize_path(h2o_mempool_t
(double)(clock()
**stack
ident->len
run_pending_requests(conn);
**host,
ctx->zero_timeout,
-2.19,
escaped
name);
h2o_htmlescape(h2o_mempool_t
w->t->n_slots
__kp->x
ch)
ch
knet_win32_destroy();
H2O_USE_EPOLL
ctx->_module_configs
uv_close((uv_handle_t*)conn,
52)
'Z'
on_config_hosts(h2o_configurator_command_t
ch;
0x10002000L
bgzf_tell()
chunked
161},
st_h2o_socket_peername_t
x.val
ends
**pb,
st_h2o_socket_ssl_t
tv;
Server:
on_close;
netread(fd,
*n_calls)
__kp->x->n)
*_timeout;
on_config_limit_request_body,
mj;
(m
st_h2o_socket_export_t
*h2o_socket_get_loop(h2o_socket_t
detaches
loop.
*b;
post_test);
func
info->ssl
8;
1664525L
`host`
self->virtual_path.base,
h2o_http2_encode_frame_header(
header->name,
h2o_mempool_alloc_shared(NULL,
h2o_socket_export_t
st_h2o_evloop_socket_t*
rseq,
h2o_socket_close(h2o_socket_t
http_host
emit_writereq(&conn->_write.timeout_entry);
newmap,
calloc(l
test_chunked_failure(__LINE__,
http_host;
self->up_req.bufs[1]
*q
KURL_INV_WHENCE;
__KHASH_IMPL(name,
':';
*priolist,
ku->p_buf
*q++
100);
http_proxy
212},
(proxy
Test
211},
strdup(http_host);
h2o_send(req,
v0)
is_connection_specific;
proxy,
subject
{201,
identical
hp->ae
ctx->ssl_ctx);
/);
(strstr(proxy,
num_deferred
fp->path
strdup(proxy
(uint32_t)hufflen,
connect;
{48,
socket_connect(host,
h2o_socket_write(client->sock,
H2O_TOKEN_HTTP2_SETTINGS,
port);
m_b?
ftp->pasv_ip[1],
am
H2O
lazy...
tied
principle,
3);
(inflateInit2(&zs,
kmin_hj(kmin_f
64KB
impossible.
enough.
(*h2o_configurator_command_cb)(h2o_configurator_command_t
is_huffman;
curl_multi_timeout(ku->multi,
\r\n);
bad
efficiency
\r\n\r\n,
SEEK_END
++l;
schedule
src->buf.len;
prematured
DEC(_MSC_VER
0xffffff0u
close(fd);
strtol(buf
H2O_SOCKET_FLAG_IS_READ_READY
manual,
free(host);
((status
free(port);
10500);
*add_header(h2o_mempool_t
ht_timing(ht_khash_unpack);
&c,
ELEMENT_TYPE_BYTES_SENT);
BAD*
0x3f9u
aux->max_response)
memory,
linking
aux->max_response<<1
realloc(aux->response,
desc);
aux->max_response);
*new_entries;
isdigit(aux->response[0])
assert(conn->_write.bufs.size
isdigit(aux->response[1])
library
&src,
'-')
kftp_connect_file(fp);
_mm_set1_epi8(_gapo
0x5555555555555555ull);
strtol(aux->response,
kftp_send_cmd(ftpaux_t
p->end_offset
0x00ff;
158},
cmd,
ftp_open(const
fabs(dx[k])
mode)
31|139|
{151,
x)[i]->n
pasv_ip[4];
mj
data[str_len
h2o_linklist_init_anchor(h2o_linklist_t
ftpaux_t
aux;
*configurator);
ftp://)
'/')
strncpy(host,
0x2cu
H2O_STRLIT(/abc?xx));
(int)h->name->len,
retr
sprintf(retr,
RETR
(aux.ctrl_fd
{77,
USER
DIRECT,
kv_destroy(v)
176},
anonymous\r\n,
PASS
(block
sockaddr;
kopen@\r\n,
push_cigar(&n_cigar,
TYPE
*ostr
buf[BUF_SIZE];
PASV\r\n,
upgrade->base
aux.response;
'(';
ok(memcmp(req.authority.base,
state,
(s)
`hosts`
&v[0],
'\x80';
**_module_configs;
p;
&v[2],
*scalar;
(beg
&v[4],
'R'))
memcpy(pasv_ip,
(v[4]<<8&0xff00)
(strchr(mode,
%d.%d.%d.%d,
pasv_ip[1],
pasv_ip[2],
g->max_iter;
conn->max_open_stream_id)
y->key->data.scalar);
handle_window_update_frame,
self->on_setup_ostream
h2o_http2_alpn_protocols;
pasv_ip[3]);
remaining_input[3]
((opt_ch
(0.2.4):
client->_body_bytesleft;
curV
sizeof(key_t);
p1)
port2);
__m128i*)(key
150)
to
licensed
ftp_open_end:
free(retr);
free(aux.response);
~(unsigned)HMM_FORWARD;
++k;
rr.qe;
pat_len);
loop,
*maybe_eos
argc;
**argv,
H2O_HTTP2_SETTINGS_DEFAULT;
(!isspace(cmd[i]))
kurl_init()
zn
config;
250},
beg
!isspace(cmd[i-1]))
(char*)base;
(char**)calloc(argc
sizeof(void*));
b;
(char*)calloc(end
elements_end)
memset(&req->res.headers,
strncpy(argv[0],
beg);
IPPROTO_IPV6,
str[i]
(str[i]
str[i-1]
val;
strLength;
argv[argc++]
&str[i];
KO_STDIN
strcat(tmp,
->fd
h2o_config_dispose(&conf);
pid_t
pid;
koaux_t;
conn->_write.write_once_more
aux->fd
queue
kr_rand(kr);
http_open(fn);
last_len)
KO_FTP;
-)
disable
KO_STDIN;
chunk.
'<')
In
need_shell,
is_ready;
pfd[2];
(ispunct(*q)
__restrict
'.'
'_'
'-'
s->l
vfork();
client_ctx->loop
strcpy(buf
chr(j);
vfork()
'')
self->buf;
l[])
CHUNKED_IN_CHUNK_SIZE;
close(pfd[0]);
headers[*num_headers].name
c;
child
long)req->bytes_sent);
H2O_STRLIT(HTTP/2));
aux->max
Intel
[type
((fp)->fd)
know
(*func)(void*,int,int);
0x7fffedu
dup2(pfd[1],
dst);
computing
\037\213\010\4\0\0\0\0\0\377\6\0\102\103\2\0\033\0\3\0\0\0\0\0\0\0\0\0;
s->state.w[3]
(!need_shell)
x[k];
cmd2argv(p
execvp(argv[0],
[khint32_t]
0x1
bufsz
sh,
-c,
parent
ksprintf(kstring_t
aux->pid
123
O_RDONLY);
on_read_tcp(uv_stream_t
*_fd;
avail);
kclose(void
*a)
handle_incoming_request(
&mat[k
(mode[i]
*pool
&status,
Library
kopen
unique
fdopen(fd,
remaining)
*pt++;
input\n);
BUF_SIZE,
(!isalnum(*q))
bgzf_dopen(int
BUF_SIZE);
conn->_ostr_final.sent_headers
(sockpool
t->w[i].i
(b)),
p[0]
kclose(x);
bound))
hpack_header_table->hpack_capacity
khmm.h
new/delete
*hp;
hp
ok(src.len
\r\nfffffffffffffffff\r\nabcdefg,
(hmm_par_t*)calloc(1,
c0)
(buf[l]
neighbors
on_config_exit(h2o_configurator_t
hp->a0
(FLOAT*)calloc(n,
w.
fp));
(FLOAT**)calloc2(n,
hp->e
hp->e[m][i]
*hp)
SAINT_MAX))
kh_put_##name(h,
buf[1];
free(hp->a[i]);
memcmp(src,
h2o_timeout_link(ctx->loop,
free(hp->e[i]);
ok(conn->body->size
E(i,j)-r}
(hp->m
((u)->fd
free(hp->ae[i]);
free(hp->a);
uint32_t,
H0
free(hp->e);
sockaddr_in
conf->num_threads;
free(hp->a0);
free(hp);
Beej's
SSL_shutdown(sock->ssl->ssl))
ks_mergesort(int,
*hd;
hd
(hmm_data_t*)calloc(1,
&conn->ws_callbacks,
&rfds,
dret,
hd->L
__m128i*)amATbl);
hd->seq
(char*)malloc(L
memcpy(hd->seq
*hd)
decoded
hd->L;
(hd->f)
free(hd->f[i]);
free(hd->b[i]);
assert(!unreachable);
m,
free(hd->f);
free(hd->p);
h2o_strdup(NULL,
write(self->fd,
kh_key(kh_val(g,
*he;
tol2
default
(hmm_exp_t*)calloc(1,
sizeof(hmm_exp_t));
is_eof;
at[][]
he->n
he->A0
(FLOAT*)calloc(hp->n,
fp->block_address,
hp->n,
*he)
he->n;
h0,
free(he->A[i]);
free(he->A);
9)
hd->s[u],
tokens)
free(he->E);
h2o_base64_encode(dst,
**la,
*preV,
backtrace
(hd->v)
0x1fffe5u
*bufs
hd->v
74},
Vmax
*--search;
(int**)calloc2(hd->L+1,
hp->n);
*create_evloop(size_t
errnum)
la[k][l]
Authorization
*pat
log(hp->a[l][k]);
hash_eq(a,
remaining_input[4];
int64_t
++b)
_new_
le[hp->m][k]
preV[k]
on_close(conn);
entirely;
log(hp->a0[k]);
*leu
le[(int)hd->seq[u]];
la[k];
(max
preV[l]
laa[l])
preV[k])
preV[k];
hd->v[hd->L]
--u)
hd->v[u-1]
open(argv[1],
&conn->req.method.len,
(which
h2o_linklist_is_empty(&conn->_write.streams_without_pending_data))
Vmax[u][hd->v[u]];
free(la[k]);
https://github.com/tatsuhiro-t/nghttp2/
free(la);
ilen,
x)[0];
free(le);
(_k)?
free(Vmax);
assert(hp
(hd->s)
free(hd->f[k]);
<sys/uio.h>
(!__ac_isempty(h->flags,
(strcmp(a,
(FLOAT*)calloc(hd->L+1,
*hh,
helps
<stdint.h>
frame->stream_id)
transpose
node;
r.score2,
buf->len
f[0],
&event);
frame)
hd->s[0]
*client_key;
hd->f[0][k]
(hd->f[1][k]
hp->a0[k]
hp->e[(int)hd->seq[1]][k]);
self->buf,
hd->f[1][k]
f[2..hmmL],
*fu
hd->f[u],
malloc(BGZF_MAX_BLOCK_SIZE);
kh_init(h2o_http2_stream_t);
*eu
payload->priority.exclusive
hp->e[(int)hd->seq[u]];
input_length;
create_generator(&req->pool,
at[k];
aa[l];
H2O_STRUCT_FROM_MEMBER(struct
ftp->max_response
hd->s[u]
free(at[k]);
**
precalculate
hp->ae[b
p[l]
hp->e[b][l]
%s\r\n,
__kp->x->is_internal?
specified
*state
(char*)realloc(seq->seq.s,
hp->a[k][l];
(FLOAT*)malloc(sizeof(FLOAT)
build_request(req,
free(hd->b[k]);
WAY
(kbnode_t**)calloc(max,
filenames
(FLOAT**)calloc2(L+1,
wslay_is_ctrl_frame(arg->opcode))
hd->b[L][k]
h2o_http2_accept(h2o_context_t
hd->s[L];
*bu1
hd->b[u+1],
ownership
p[k];
q[l]
hd->b[u][k]
hp->a0[l]
loggers;
bufs->len
xp)[0]
Gurney.
1e-6)
theory,
10000)%10)),
8);
8},
++
Underflow
*he1)
assert(remaining
0xffffeau
_mm_slli_si128(f,
outbufcnt,
h2o_hpack_dispose_header_table(&header_table);
(*FRAME_HANDLERS[])(h2o_http2_conn_t
(%lg).\n,
Const
1])->n
observation
((if_none_match_header_index
(saint_t*)malloc(k
C;
SOMAXCONN)
cmp,
0.0,
subtest(htmlescape,
63;
prod
(prod
log(prod);
HMM_BACKWARD);
(int*)calloc(hd->L
BUF_SIZE
prob,
max,
*bu
su
ftp->response[3]
example/foo);
max_k;
client->ctx->io_timeout,
0x8u
)
-1.0,
'f':
close_cb_data
__kb_putp_aux_##name(kbtree_##name##_t
h2o_socket_is_writing(sock));
max_k
bu[k]
prob;
assert(max_k
(ks_getuntil(ks,
-3.10,
*config_file
end_loop8:
H2O_CONFIGURATOR_FLAG_HOST,
maxfd
h2o_socket_dispose_export(h2o_socket_export_t
encode24u(dst,
__kb_delp_aux_##name(b,
hd->p[u]
dupref(ext).base,
*prob)
y[1][j]
invalid
khash_t(ipk)
hp->e[(int)hd->seq[1]][l];
(prob[k]
ss);
conn->super.peername.len
kh_key(h,__i);
h2o_mempool_release_shared(ctx->_timestamp_cache.value);
entry->name->len))
114},
--k;
initialization
&conn->_output_header_table,
E_k(b),
p[k],
-1;
kf_betai_aux(a,
he->A[k],
&aux);
certificate-file:
cache-efficient
ks->s,
AA[l]
backtracking
h2o_buf_init(stream->_req_body->bytes,
A0_l
0xffffff7u
hd->b[1][l];
kurl_close(kurl_t
log(he->E[b][k]
0xfffff5u
*A
A[l];
ok(memcmp(req.method.base,
sockpool
x)[i]->n)
(decoder->_state)
last_char;
sum);
req->scheme.len
assert(he0->m
he0->n
he1->A0[k]
he0->A0[k];
connection_index
is_get)
he1->A[k][l]
H2O_CONFIGURATOR_FLAG_EXPECT_MAPPING))
H'(i,j)
he1->m;
\r\n5\r\nworld\r\n0\r\n,
H2O_HTTP2_FRAME_TYPE_CONTINUATION
he1->E[b][l]
ULTRIX
tmp[32];
h2o_add_header_by_str(&req->pool,
h2o_http2_stream_proceed(conn,
bb,
h=H'(i-1,j)
(reinit)
/*******************************************
_write;
++bb)
ctx->globalconf);
*Eb
he->E[bb];
(eb[k]
wrapper
log(eb[k]);
ks_combsort(int,
*ak
<netinet/in.h>
(ak[l]
(sum
H2O_STRLIT(200)
L)
60,
(char*)calloc(L+1,
(h2o_vector_t*)&req->headers,
*conf,
frame.type);
selected
hp->e[b][k];
a0[]
hp->a0[k];
et[l];
flattened.len
fc);
el[b];
free(kh_val(h,
sizeof(key_t));
T[0..n-1]
*search;
free(et);
*_bgzf_file_t;
(fp->open_mode
_bgzf_dopen(fp,
h2o_upgrade_to_websocket((h2o_http1_conn_t*)req->conn,
2500000000ll,
knet_dopen(fp,
memset(&addr,
&
_bgzf_tell(fp)
client_ctx;
_bgzf_seek(fp,
http2
2\n
_bgzf_read(fp,
reader);
knet_write(fp,
0x7fffdau
ftello(fp)
ftell(fp)
fseeko(fp,
fseek(fp,
fseeko(FILE
fdopen(fp,
fp)
BLOCK_HEADER_LENGTH
18
bufcnt;
1952;
little
endian):
content_length;
0|255|
DAMAGE.
66|
67|
khval_t,
0xffffffcu
*block;
end_offset;
SCO_SV
COMPILER_VERSION_MAJOR,
cache_t;
defined(__BEOS__)
KHASH_MAP_INIT_INT64(cache,
change_index++,
__max_8(ret,
*buffer,
buffer[0]
m1);
fp->port);
buffer[1]
invalid
*body;
*buffer)
valures
*kftp_parse_url(const
*decoder,
buffer[3]
24;
0x3fffe7u
'r';
1099511628211ULL;
*kg_get_v_##name(kgraph_t(name)
*_n_cigar,
fp->uncompressed_block
kh_init(cache);
fp;
req->_generator
*bgzf_write_init(int
compress_level)
fragmentation
'w';
ok(b.len
strlen(expected));
fp->compress_level
compress_level;
mode2level(const
(isalpha(host[0]))
Z_DEFAULT_COMPRESSION==-1
->fd.
compress
H2O_TOKEN_MAX_FORWARDS;
int_unpack_t
5,
*__restrict
'0'
&H2O_TOKEN_DATE->buf,
mode[i]
(mode[i])
(int)mode[i]
'u'))
*mode)
'r')
_bgzf_file_t
*h2;
((fpr
_bgzf_open(path,
(h2o_buf_t*)&token->buf,
'W'))
1000
*fpw;
((fpw
h2o_send_error(h2o_req_t
r.qe
w))
conn->peer_settings.initial_window_size)
bgzf_write_init(mode2level(mode));
fpw;
H2O_TOKEN_DATE,
*bgzf_dopen(int
Deflate
knet_open(ftp://ftp.sanger.ac.uk/pub4/treefam/tmp/index.shtml,
stores
compressed
h2o_time2str_rfc1123(char
length.
t.func
fp->compressed_block;
buffer_size
BGZF_BLOCK_SIZE;
foo_9999);
le[b][k]
assert(block_length
assert(g->k[i]
caller
nread,
memcpy(buffer,
h2o_mempool_clear(&req.pool);
g_magic,
defined(__riscos)
memcmp(g_magic,
BLOCK_HEADER_LENGTH);
buffer,
blocks
__ac_set_isdel_true(h->flags,
z_stream
zs.next_out
6);
(void*)&buffer[BLOCK_HEADER_LENGTH];
uint8_t*)src.base,
have
zs.avail_out
BLOCK_FOOTER_LENGTH;
*hp);
deflateInit2(&zs,
1);
Z_DEFLATED,
denominator
0x0F0F0F0F
restore
-15,
Z_DEFAULT_STRATEGY);
header/footer
memset(&opt,
h2o_linklist_insert(n,
config_node->data.scalar;
conn->_write.streams_with_pending_data.list.entries[slot_index];
BGZF_ERR_ZLIB;
219
deflate(&zs,
*xmin
Z_STREAM_END)
recompress
free(global.k);
1024;
accept-charse,
assert(input_length
available;
taken
s[i]
logically,
happen
{202,
zs.total_out;
(int)(localt.tm_gmtoff
packInt16((uint8_t*)&buffer[16],
crc
ht_khash_str()
crc32(0L,
15},
self->num_elements;
crc32(crc,
software
input_length);
packInt32((uint8_t*)&buffer[compressed_length-8],
block_length
memcpy(fp->uncompressed_block,
Inflate
inflate_block(BGZF*
fp,
config->http1_upgrade_to_http2
18;
sprintf(host,
*listener
Z_FINISH)
inflateEnd(&zs);
*header)
(header[0]
allow
0x3ffffe3u
header[1]
unpackInt16((uint8_t*)&header[10])
header[12]
'B'
H2O_STRLIT(content-type)
(req->res.status
(n-1);
50)
kh_val()
{26,
header[13]
'C'
2];
free_cache(BGZF
picotest_cb_t();
sscanf(p,
khint_t
__GNUC__
subtest(lib/mimemap.c,
dst_buf->base;
khash_t(cache)
(khash_t(cache)*)fp->cache;
k));
Kazuho
kh_end(h);
h2o_linklist_insert(slot,
proxy_configurator_t
&fdw,
h);
free((v).a)
load_block_from_cache(BGZF
block_address)
cache_t
kh_get(cache,
h,
assert
block_address);
(fp->block_length
mon)
fp->block_length
p->size;
_mm_store_si128(H1
h2o_strdup(h2o_mempool_t
p->block,
_bgzf_seek((_bgzf_file_t)fp->fp,
cache_block(BGZF
((kh_size(h)
oldest
on_complete;
ULONG_MAX
simplicity.
185
st_h2o_timestamp_t
nlocks
5)
big
init_core_configurators(h2o_globalconf_t
performance.
memcpy(entry->name->base,
kh_del(cache,
kh_put(cache,
conn->_is_complete)
&ret);
happens,
ks->begin;
p->block
memcpy(kh_val(h,
*_buf)
k).block,
(!kh_exist(h,__i))
{return
block_address
*encode_status(uint8_t
proxy.keepalive,
timestamp.
block_address))
__KB_PUT(name,
_bgzf_read(fp->fp,
*aa
sizeof(header));
sizeof(header)
!check_header(header))
0x7fffffff;
q->Hmax
+1
client_key
(fgets(s,
#pragma
number,
*fp)
-1
compressed_block
memcpy(compressed_block,
sockinfo;
BLOCK_HEADER_LENGTH;
Exit:
file
he1->n);
clients
&compressed_block[BLOCK_HEADER_LENGTH],
variant
262144
BGZF_ERR_IO;
((count
seek.
cache_block(fp,
11);
((ks)->last_char
length)
bytes_read
effective
*output
execute_or_enqueue_request(h2o_http2_conn_t
(length
prior
assert(fp->open_mode
true)
'r');
{131,
max_open_stream_id;
(bytes_read
copy_length,
exists
*buffer;
'l')
kv_A(v,
(self->upstream.sockpool
(available
ftp->response;
available?
listener->ssl_ctx
fp->block_offset,
fp->block_length)
'w');
hashing
*addr;
0x1fffe6u
destroy_ssl(info->ssl);
Shift_JIS,utf-8;q=0.7,*;q=0.7\r\nKeep-Alive:
fp->block_offset);
TinyCC
(block_length
(fwrite(fp->compressed_block,
h2o_socket_t;
BGZF_BLOCK_SIZE)
url_encoded);
bytes_written;
bytes_written
bytes_written?
input,
free(client_ctx);
Is_Http2:
fwrite(fp->compressed_block,
page
H2O_STRLIT(\x08\x03\x33\x30\x37\xc0\xbf\xbe));
unset
signal
fp->fp);
(fflush(fp->fp)
ht_destroy_data();
(uint32_t)src[0]
free(fp->uncompressed_block);
free(fp->compressed_block);
keyLen)
stream->_data.size,
cache_size)
-28,
SEEK_END)
28);
_bgzf_seek(fp->fp,
0)?
or
bgzf_seek(BGZF*
mult
where)
164
s->is_internal
block_address,
endsc;
loaded
*self;
char*)fp->uncompressed_block)[fp->block_offset++];
*str)
*buf
char*)fp->uncompressed_block;
H2O_TOKEN_RANGE,
++l);
persistent
prefix_max)
(str->l
str->m)
kstring.h
args;
Initiate
100000)
va_copy(args,
ap);
sets
work
glibc
2.0.
bmBc[i]
ARCHITECTURE_ID
snprintf'.
s->l)
H2O_STRLIT(cache-control)));
kvsprintf(s,
free(eh);
*start;
(sep)
assert(table->num_entries
(aux->tab[0]&1))
finished
h2o_timeout_dispose(ctx->loop,
H2O_HTTP2_ERROR_FRAME_SIZE);
-0.09};
127
aux->finished
aux->sep
aux->tab[2]
**src,
aux->tab[*p>>6]
1ull<<(*p&0x3f);
'h'
sep[0];
(aux->finished)
hmm_forward(const
r.te
(str)
conn->req.upgrade.len,
(h2o_buf_t*)name_token,
Initialize
on_read_ssl(uv_stream_t
aux->p
(aux->sep
%
H2O_STRLIT(https))
decode_hex(src[1]))
preV;
(aux->tab[*p>>6]>>(*p&0x3f)&1)
aux->sep)
goodness
tokens
(char*)start;
last_start,
*offsets,
*_max;
__ksplit_aux
on_config_enter;
(_offsets)
max)))
free(offsets);
KSW_XSTOP
(isgraph(last_char))
ext_node)
__ksplit_aux;
{133,
(int)(a
intentionally
(isspace(last_char)
default:
*child;
hp->m
max{H(i,j)-gapo,
16384,
0x3f],
delimiter
eh[j].e
*_max
*name_buf
251},
format_node_recur(node,
H2O_STRLIT(www.example.com))
strlen(p),
http://www-igm.univ-mlv.fr/~lecroq/string/node14.html
[khint_t]
ubyte_t
xlen
reader->prev_input_size
ks_heapmake_##name(n,
free(self->upstream.host.base);
*suff,
(int*)calloc(m
2008,
'w'?
prep;
{15,
preBmBc()
TEST(\x00,
on_config_reverse_url(h2o_configurator_command_t
fields
bmBc[pat[i]]
suff
ksq
b->elen
_SGI_COMPILER_VERSION
suffixes()
g
*ftp,
suff[i
g)
suff[i]
(g
*_offsets
pat[g
f])
--g;
0x7fcu
suff[i]]
seq->seq.l
kgraph_t(name)
shift;
free(suff);
*prep
q->max;
[-q%d]
*pat;
0x3fffe4u
(_prep
_secret;
*_prep
33.912866078383;
*errstr,
(aux->type
ksBM_prep(pat,
pat[i]
kl->tail->next
hostconf->list.size;
bmBc[str[i+j]]
bmGs[i])
*response;
mat);
close(aux.ctrl_fd);
aux->tab[0]
Probably
addr.sin_family
strlen(str),
0x3ffffe0u
*sock->loop->_statechanged.tail_ref
_prep);
he0->E[b][l];
path_len;
/***********************
result->name->len))
***********************/
KSTRING_MAIN
++argc;
(kstring_t*)calloc(1,
abcdefg:
example.com));
s->s);
ksplit(s,
thing.
dataLength
printf(field[%d]
seq->seq.m;
(ks)->end)
'%s'\n,
until:
kstrtok(ab:cde:fg/hij::k,
:/,
&aux))
aux.p
kputc('\n',
free(hp->ae);
0x7ffff2u
free(s->s);
free(s);
free(fields);
headers,
*str
HMAC_IPAD
*ret,
prefix_max
&prep))
<emmintrin.h>
F(i,j)}
-LONG_MAX);
quoted,
78},
*reqbufs;
ksw.h
user-agen,
0x1ffbu
write_pending(struct
LIKELY(x)
sock->ssl->input.encrypted->bytes,
h2o_input_buffer_t**
__builtin_expect((x),1)
UNLIKELY(x)
__builtin_expect((x),0)
conn->super.ctx->global_config->max_request_entity_size)
(x)
slen;
(saint_t)T[i]
*qp,
NotModified:
req->path.len
*H1,
*E,
0.5))
*Hmax;
Query
h2o_fatal(value
organized
Size
*do_import(h2o_loop_t
emitted
Next;
Scoring
************************/
cache
h2o_consume_input_buffer(&self->buf_sending,
H2O_STRLIT(src));
one-dimension
h2o_dispose_input_buffer(&conn->body);
duplicated
{106,
*ksw_qinit(int
0x72u
*j++;
*mat)
(3
*config_node)
assert(h2o_linklist_is_empty(&conn->_pending_reqs));
strlen(id),
slen
khiter_t;
99},
segmented
7.11,
(kswq_t*)malloc(sizeof(kswq_t)
4));
(__m128i*)(((size_t)q
HEX(__CODEGEARC_VERSION__
sizeof(kswq_t)
priolist_destroy(h2o_http2_stream_priolist_t
memcpy(conn->body->bytes
4);
h->keys
align
go
0))]
Windows,
added_at;
q->H0
x1[k]
*rseq
q->H1
q->E
q->slen
*kurl_open(const
202
q->qlen
comparing
H2O_STRLIT(400)
H2O_TOKEN_DATE;
q->size
q->shift
(int8_t)q->shift)
(int8_t)q->mdiff)
%zu,
q->max
minsc
ok(decoded->len
(cand_str[config_str_len]
q->mdiff;
z),
node->data.alias
q->shift;
frame->stream_id,
BIO_METHOD
recognizes
An
99
remaining_input[1]
H2O_HTTP2_SETTINGS_HOST.initial_window_size));
Eb[k]
example:
p=8,
slen=3
{{0,3,6,9,12,15,18,-1},{1,4,7,10,13,16,-1,-1},{2,5,8,11,14,17,-1,-1}}
global
strlen(buf
nlen
((dst
(int)hd->seq[u+1]
h2o_mempool_alloc_shared(pool,
(step<<1));
nlen;
OK\r\nHost:
*t++
constant
qlen?
int16_t
SOCKET_ERROR)
*RA
ksw_u8(kswq_t
sizeof(key_t)
_gape,
&action,
4))
mean
memmove(__KB_PTR(b,
ws
xtra)
-(_o+_e)
on_error_before_head(h2o_http1client_t
te
S;
gapoe,
_mm_max_epu8((xx),
&quot;);
*host_settings)
max_rseq)
write_bio,
(__printf__,
_mm_srli_si128((xx),
WSACleanup();
Generate
(ret)
dst->table
_mm_extract_epi16((xx),
h2o_http2_window_get_window(&conn->_write.window))
(xtra&KSW_XSUBO)?
xtra&0xffff
m_b
qlen,
13)
n_b
_mm_set1_epi32(0);
h2o_http2_ping_payload_t;
_gape);
_mm_set1_epi8(_gape);
109},
get_max_wait(&loop->super);
charset=utf-8));
modfied
H1
q->H1;
E
*hp
alloc_size);
q->E;
56;
subtest(chunked,
_mm_store_si128(E
_mm_store_si128(H0
tlen;
sock);
na1,
1st
(char*)&lng,
_mm_load_si128(H0
example
conn->sock->input->size);
_mm_slli_si128(h,
h2o_mimemap_get_default_type(self->vars->mimemap).base);
h=H(i-1,-1);
x64
Main
Destroy
a[0]
slen);
H(i,j)
conn->_reqsize,
E(i,j),
F(i,j)-r}
KSW_XBYTE;
*s)
H'(i,j);
conn->open_streams);
note
*((unsigned
last
h=H'(i-1,j-1)
_mm_subs_epu8(h,
shift);
memcpy(bytes_alloced,
_mm_load_si128(E
free(hd->s);
k).block);
search;
sprintf(buf
support
e);
now
E'(i+1,j)
{39,
gapoe);
gen_data(str_len,
(netread(ftp->ctrl_fd,
note(failures);
picotest_cb_t
h=H'(i,j)-gapo
gape);
entry->value->len
st_h2o_mempool_t
_mm_max_epu8(e,
_mm_movemask_epi8(t);
e=E'(i+1,j)
fp->file_size+off;
free(curV);
clean
C[i];
ctx->_module_configs[o->_config_slot]
F'(i,j+1)
_mm_subs_epu8(f,
stream->stream_id)
70
sizeof(__kbstack_t));
_mm_max_epu8(f,
H'(i-1,j)
*conn
headers[100];
setting
prepare
58
E(i,j)
(bits))
insertion
table.
deletion
overwrite
0x7ffeu
mimics
uv_tcp_init(listener->loop,
exceed
kg_put_a_##name(kgraph_t(name)
17},
_mm_movemask_epi8(_mm_cmpeq_epi8(_mm_subs_epu8(f,
zero));
(stream->state)
(UNLIKELY(cmp
(dwA
//int
((uint8_t*)&max)[k]);printf(\n);
++n;
__max_16(imax,
prefix)
*h2o_config_get_configurator(h2o_globalconf_t
frame->type);
PICOTEST_FUNCS,
imax
(imax
minsc)
condition
branching
however,
unfornately
gmt_off
(n_b
--p;
append
nonlinear
free(fp->retr);
type:
m_b);
0x1ffcu
b[n_b++]
kbit,
(gmax
index;
endsc)
H1;
H0;
src->http1_is_persistent;
uint8_t*)in.base,
<file>\n);
{16,
255;
te;
set_mimetypes(h2o_configurator_command_t
(j&1)?
(r.score
printf(%s\n,
*outlen,
match;
entry->cb(entry);
come
63
high,
gmax);
n_b;
(int)(b[i]>>32)
new_bio,
HMM_TINY;
r.score2)
payload->priority.dependency
b[i]>>32,
r.te2
_mm_max_epi16((xx),
&is_dir))
architecture
_mm_set1_epi16(_gapo
_mm_set1_epi16(_gape);
_mm_max_epi16(h,
ENOENT)
_mm_max_epi16(max,
accordingly
(conn->sock
_mm_subs_epu16(f,
(mu1,
HMAC_OPAD
if(UNLIKELY(!_mm_movemask_epi8(_mm_cmpgt_epi16(f,
(uint16_t*)Hmax;
0x7fffeeu
revseq(int
s[i],
\r
'\012')
i],
incremental
yoml__new_node(YOML_TYPE_MAPPING,
int);
padlen
*qry)?
*t
fp->http_host;
ksw_qinit((xtra&KSW_XBYTE)?
h2o_http2_decode_data_payload(h2o_http2_data_payload_t
huff_decode_table[][16]
query,
curV[k]
test_yoml(void)
2?
stream->stream_id
is_complete(buf,
sufficient
SHA1_Init(&ctx);
ksw_i16
sets,
ksw_u8;
(--p
kputl(n,
q->size;
37.)
Line
ctx->global_config->server_name.len
target,
186},
vertex_t,
xtra);
shift
tcnt[4];
((xtra&KSW_XSUBO)
(xtra&0xffff)))
*kb_get_##name(kbtree_##name##_t
revseq(r.qe
revseq(r.te
kputw(n,
active_streams
BEGIN
UV_RUN_ONCE);
alter
target);
qe/te
PROVIDED
exact
*generator
ksw_qinit(size,
*=
hostname)
rr
ok(0);
r.score);
j));
rr.score)
r.tb
r.qb
/********************
max_j,
max_gap;
h0
6|
arg;
(khint32_t*)kmalloc(__ac_fsize(new_n_buckets)
_bgzf_dopen(fd,
qp
body\n);
malloc(qlen
eh
H2O_STRLIT(location)
bgzf.h
calloc(qlen
dwNA;
m];
qp[i++]
row
eh[0].h
kv_destroy(array);
__kb_destroy(b)
h0;
calloc(pat_len+1,
test_chunked_at_once,
eh[1].h
suff[m
test_lib__mimemap_c(void);
weight)
gapoe?
gettimeofday(&ctx->_timestamp_cache.tv_at,
GMT)
eh[j-1].h
applied
CURLOPT_URL,
49},
gape;
h2o_websocket_proceed(conn);
(__sort_lt(*high,
mat[i]?
{207,
0x7fffe2u
mat[i];
12);
new_n_buckets;
max_gap
1.);
max_gap?
max_i
h2o_http2_stream_send_pending_data(conn,
h2o_timeout_is_linked(&conn->_write.timeout_entry));
LIKELY(i
tlen);
h1,
0xfau
&qp[target[i]
qlen];
column
(gapo
*directs;
apply
config->server_name
constraint
(end
At
(h2o_input_buffer_t*)&h2o__null_input_buffer;
loop:
H(i-1,j-1),
filter
those
F(i,j)
H(i,j-1)
far
Genome
encode_header(header_table,
SSE2-SW,
memcpy(key_src,
E(i,j)}
string[i]);
p->h,
H(i-1,j-1)
E(i-1,j)
p->h
*kr_srand(krint64_t
h1;
20,
((sizeof(size_t)*d)+2));
0x3fffe8u
(sizeof(void*)
q[j];
e?
NEGLIGENCE
BGZF_ERR_MISUSE;
gapoe;
round
np;
*base,
//beg
z);
printf(\nMinimizer:
debugging
'F')
during
free(qp);
h2o_http1client_error_is_eos;
implement
b)
*_qle
0x1fffe4u
*Ec
-0x40000000
(char*)frame->payload
update_now(&loop->super);
*push_cigar(int
sizeof(knhx1_t)
h={2,5,8,11,14,17,-1,-1}
*n_cigar,
:schem,
*cigar,
h2o_get_timestamp(ctx,
op,
op
h2o_timeout_link(loop,
(cigar[(*n_cigar)
through
*m_cigar)
4;
cigar
cigar[(*n_cigar)++]
op;
V_k(1)
len<<4;
*n_cigar_,
**e;
38},
**cigar_)
243
*z;
free(x);
ok(h2o_http2_decode_frame(&frame,
(new_off
matrix;
cell:
h2o_find_header_by_str(&req->headers,
__kp->i
(strcmp(scheme,
*header_end;
f<<4|e<<2|h;
halve
knet_open(ftp://ftp.ncbi.nih.gov/1000genomes/ftp/data/NA12878/alignment/NA12878.chrom6.SLX.SRP000032.2009_06.bam,
EXPECT_CHAR('H');
HTTP/1.0\r\n\r\n,
c->dispose(c);
H2O_HTTP2_SETTINGS_ENABLE_PUSH
2*w+1?
4:
h2o_buf_init(data,
#columns
eh[0].e
everything
stream->priority.dependency)
<sys/time.h>
-inf
outside
*zi
n_col];
0x3ffffe1u
sizeof(key_t))
H2O_STRLIT(https)
h2o_timestamp_t;
w?
(s->l
ksw_sse2(),
base,
checking
-(gapo+l*gape)
&frame);
h>0;
sock->loop
recording
86
1<<2
kh_##name##_t
(fill_buffer(ku)
bit
z[i,j]
0xffffeeu
cell
e/f
eh[qlen].h;
change_index
%f\n,
t2;
cigar_)
n_cigar
&bufs,
{},
(n_cigar_
*cigar
(i,k)
z[i
&m_cigar,
[-f]
cigar,
compiling
originally
1),
{222,
CIGAR
__kp
*context,
<query.fa>\n,
**_offsets)
cigar[i],
n_cigar,
*cigar_
h2o_http1_accept(ctx,
*******************************************/
KSEQ_INIT(gzFile,
gzread)
pool->host
2008-03-10,
seq_nt4_table[256]
sa
!=
forward_only
last_char,
subtest(chunked-consume-trailer,
kftp_reconnect(fp);
gzFile
Wei
(conf->num_listeners
*ksq;
a:b:q:r:ft:1))
'a':
(bmGs[j]
'r':
kmempool_t(name)
int_data
't':
ksw
66},
changelist[64],
[-1]
163},
wikipedia
KO_FILE
valid
[-a%d]
_kf_gammap(s,
curV;
[-b%d]
[-r%d]
[-t%d]
writev(fd,
*name_token;
*y;
<target.fa>
sa,
sb,
minsc);
h2o_http2_stream_reset(conn,
value_len;
(minsc
line);
0xffff;
__kb_split_##name(kbtree_##name##_t
j?
flatten
ambiguous
msec;
fpt
kst
0x40;
58},
kseq_init(fpt);
all-pair
IMPLIED
toklen
huff_decode_table[*state]
{128,
((entity_body_header_index
{196,
(int)ksq->seq.l;
r->parent
MinGW
ksq->seq.s[i]
(!forward_only)
HMM_FORWARD;
((int)ksq->seq.m
exit
Is_Http2;
max_rseq);
*sock);
4?
(void*)&conf->filters,
ksq->seq.s[i];
gzrewind(fpt);
emit_writereq(h2o_timeout_entry_t
Tokuhiro
(int)kst->seq.l;
entry->value->base[value->len]
seems
seq_nt4_table[(int)kst->seq.s[i]];
ksw_align(ksq->seq.l,
kst->seq.l,
range);
(uint8_t*)kst->seq.s,
sockpool->host,
mat,
connect_callback_t,
r.te+1,
r.qb,
check_flatten(&pool,
twice
r.score,
r.te2);
(rseq)
&q[1]);
r.qe,
free(q[0]);
free(rseq);
kseq_destroy(kst);
config_file,
Recipes
gzclose(fpt);
kseq_destroy(ksq);
gzclose(fpq);
mat[k++]
content)
DP
KR_MM;
134
req->res.status);
is_missing;
free(z);
kh_init(32);
is_missing
SUCH
COMMON_CODE(code,
kh_del(32,
on_connect(sock,
(0.2.8):
0x3f8u
Use
add_size);
(cursor
quadratic
array[10500],
kurl_init(void);
0x1ff9u
ctx->_timestamp_cache.value
socket(addr->sa_family,
new_entries
i*(i+1)/2
backward
foo));
test_chunked);
traverse
*thread_ids;
bucket.
&addrlen,
0x3ffffeau
since
KO_PIPE)
bmGs[j]
robust
a[k],
tables,
H2O_MAX_REQLEN)
closely
consume_trailer,
effectiveness
((n
0x3fffe0u
hashing.
Reference:
KR_NN)
toklen)
http://research.cs.vt.edu/AVresearch/hashing/quadratic.php
2011-12-29
h2o_htmlescape(&pool,
0x4u
Minor
allocates
lsize,
(char*)calloc(strlen(p)
knhx1_t
up;
n_calls
100000000;
2011-09-16
sizeof(h2o_buf_t),
((reproxy_header_index
*colon_at;
h2o_parse_url(h2o_mempool_t
speed
*encode_int(uint8_t
h2o_mimemap_create();
H2O_TOKEN_STRICT_TRANSPORT_SECURITY,
keys.
Thank
Zilong
name->len
Tan
H2O_HTTP2_STREAM_STATE_SEND_BODY;
suggestion.
Allow
100.0
usually
bio);
non-random
Wang's
2011-02-14
huff_sym_table
Improve
(r->n
(t->priority.dependency
HASH_LENGTH);
2008-09-19
(0.2.3):
/*!
kh_del(name,
Corrected
_conn;
interfaces
test_loop
kh_put()
2008-09-10
10000);
(0.2.1):
kh_clear()
laa[l];
compressed_length
2008-09-02
increases
flexibility.
kh_get(),
tested
previously.
(header_table->num_entries
@header
apply_commands(h2o_configurator_context_t
AC_VERSION_KHASH_H
(sscan_ret
fp->offset;
0.2.8
(uint8_t*)ksq->seq.s,
test_lib__util_c(void);
st_h2o_mempool_direct_t,
UINT_MAX
memcpy(pos,
establish
MAP;
rlen))
H2O_TOKEN_IF_UNMODIFIED_SINCE,
{246,
(SSL_CTX_use_PrivateKey_file(ssl_ctx,
__ac_isdel(flag,
__ac_iseither(flag,
O_NONBLOCK);
files,
__ac_set_isdel_false(flag,
15:
__ac_set_isempty_false(flag,
h2o_evloop_run(ctx.loop);
(flag[i>>4]&=~(3ul<<((i&0xfU)<<1)))
value_is_part_of_static_table(entry->value))
__ac_set_isdel_true(flag,
server;
memset(&res,
compress_level==-1
(flag[i>>4]|=1ul<<((i&0xfU)<<1))
(*src
shell;
__ac_fsize(m)
H2O_STRLIT(http2-settings)))
((m)
members
H2O_TOKEN_UPGRADE,
kcalloc
_mm_store_si128((__m128i*)tcnt,
(entry
num_handlers_before_config
++i,
*sha1_final(sha1nfo
host
kmalloc
kmalloc(Z)
krealloc(P,Z)
__LINE__)
151},
realloc(P,Z)
kfree(P)
214},
__ac_HASH_UPPER
0.77;
khkey_t,
khval_t)
sscanf,
skipTable[*search++]
n_buckets,
n_occupied,
upper_bound;
khval_t
%x,
loop->max_fd;
buffer[2]
(header
kh_##name##_t;
'\0'
__KHASH_PROTOTYPES(name,
*kh_init_##name(void);
h2o_context_get_handler_context(ctx,
task.func(task.data,
kh_destroy_##name(kh_##name##_t
strlen(req->res.reason)
__inline
*h);
html,
int_unpack_t,
new_n_buckets);
decode_int(src,
*ret);
kh_del_##name(kh_##name##_t
kh_is_map,
slot;
*multi;
__hash_func,
H2O_HTTP2_ERROR_FLOW_CONTROL
(kh_##name##_t*)kcalloc(1,
u4
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
(h)
la
bt1_pop64(x[i]);
*)h->keys);
kfree(h->flags);
kfree(h);
wret)
memset(h->flags,
53},
(stream
0xaa,
Am1Tbl[2]
KHASH_DECLARE(name,
170
dataLength--;
kb_del(str,
seek_offset;
KT_MAX_TASKS
listeners[i].ssl_ctx
{88,
kh_int64_hash_func,
mask,
,
(key
h->n_buckets
flatten_headers(req,
**msg,
decode_ssl_input(h2o_socket_t
__hash_func(key);
EXPECT_CHAR('\012');
(__ac_isdel(h->flags,
constructor
(decoder->bytes_left_in_chunk
new_n_buckets)
on_config_num_threads,
101
0.25*n_buckets
kroundup32(new_n_buckets);
(h->size
HTTP/1.0\r\nab:
kh_del(h2o_http2_stream_t,
(khint_t)(new_n_buckets
(shrink
rehash
kftp_pasv_connect(fp);
(--entry->refcnt
__ac_fsize(new_n_buckets)
(h->n_buckets
expand
(khkey_t*)krealloc((void
on_msg_callback;
new_keys;
%s\r\ncontent-length:
->type,
(kh_is_map)
(khval_t*)krealloc((void
(j)
h->keys[j];
information.
phr_decode_chunked(struct
(int)req->authority.len,
kurl_open(argv[optind],
pasv_port
(fu
new_mask;
val
khint64_t;
process;
Cuckoo
__ac_set_isempty_false(new_flags,
105
kick
orphan
h->keys[i]
190},
deleted
(req->method.base
new_flags;
h->size;
\n,
h->upper_bound
epoll_event
STRICT
(khint_t)(h->n_buckets
sha1_add(s,
kf_betai(double
0.5);
SIZE_MAX,
h->upper_bound)
(kh_resize_##name(h,
(int)((double)(qlen
{121,
H2O_TOKEN_USER_AGENT;
*ret
token,
wslay_event_on_msg_recv_arg
shrinking;
resize()
112
shrinking
site,
site;
h->n_buckets)
x))
++h->size;
curl_multi_cleanup(ku->multi);
nghttp2_huff_sym;
calloc(N,Z)
++h->n_occupied;
touch
KHASH_INIT2(name,
h2o_realloc(inbuf,
y[i+1][j]
HASH
buf_start
{70,
t.n_threads
--table->num_entries);
(khint32_t)(key)
test`
comparison
[khint64_t]
SSL_accept(sock->ssl->ssl);
(khint32_t)((key)>>33^(key)^(key)<<11)
*key;
kh_int64_hash_equal(a,
Pointer
__ac_X31_hash_string(const
uv_tcp_bind(&listener,
(khint_t)*s;
(++s
++s)
phr_header
Another
output-stream
248
log(f));
interface
*deferred;
ok(conn->req.res.status
[const
h2o_vector_reserve(pool,
test_kputl(&ks,
150},
*default_index_files[]
yoml_t;
char*]
test_loopback);
processing
0x77u
kh_str_hash_equal(a,
url_encoded
(char*)s,
~(key
6);
kh_int_hash_func2(k)
received
*yoml;
__ac_Wang_hash((khint_t)key)
BIO_CTRL_GET_CLOSE:
{160,
&buf,
END
convenient
0x200;
sizeof(*req));
send_data(conn,
[symbol]
_dst,
];
encode_int(dst,
integers
\x05
HEADERS
[khash_t(name)*]
aux->max_response
kh_init(name)
max_headers
kh_init_##name()
&n);
kh_destroy(name,
h)
read)
Reset
kputw(int
New
tmp))
s)
*x
khash_t(name)
kh_resize_##name(h,
doc
kh_get_##name(const
strings)
keys]
throughout.
Extra
TYPE_MAP('b',
h2o_loop_t
table;
outer
used);
*pos++
SA[m++]
h2o_buf_init(H2O_STRLIT(\x82\x86\x84\xbe\x58\x08\x6e\x6f\x2d\x63\x61\x63\x68\x65)),
[int*]
http://srcvault.scali.eu.org/cgi-bin/Syntax/c/BoyerMoore.c
uint8_t*)in.base
Retrieve
bin[SHA_DIGEST_LENGTH];
element,
kh_end(h)
kh_get_##name(h,
conf->handlers.size
kh_del_##name(h,
*index_file;
Wiki,
seq->comment.s);
H2O_TOKEN_VARY
data.
ai->ai_family;
Length
kb_interval_##name(b,
h2o_hpack_header_table_t;
(!__ac_iseither((h)->flags,
(x)))
*method_len
iterator
xx)
((h)->keys[x])
__kb_getp_aux_##name(x,
h2o_process_request(h2o_req_t
values]
fclose(fp)
kh_val(h,
(khint_t)(0)
shutdown_ssl);
((h)->n_buckets)
((kl)->head)
s3://)
kh_size(h)
((h)->size)
Iterate
kvar
Variable
h->vals
vvar
wreq_free_buffer_if_allocated(sock);
execute
path_len,
uv_connect_t
strcpy(escaped_fmt,
kvar,
%.*s:%u\r\n,
(load_block_from_cache(fp,
code)
(__i
kh_val(h,__i);
contents
kh_foreach_value(h,
succeed
conenient
self->vars[0].mimemap
_WIN32
Instantiate
KHASH_SET_INIT_INT(name)
abruptly
kh_get(name,
khint32_t,
char,
kh_int_hash_func,
kb_put(name,
[type]
*top++
khint64_t,
(src_end
KHASH_MAP_INIT_INT64(name,
443;
*kh_cstr_t;
kh_cstr_t,
kh_str_hash_func,
Windows
version.
kh_str_hash_equal)
free(conn->_write_buf);
index.txt,
parent,
H2O_DEFAULT_HTTP2_MAX_CONCURRENT_REQUESTS_PER_CONNECTION
*_error);
Research
A_{kl}
0x22u
(GRL).
assert(req->res.status
therefore
annotate
-ac
SOCKET,
SOCKET
(SOCKET)(~0),
-1.
self->super.on_context_init
knetfile.c,
confusion.
iw;
index_file->len;
BLOCK_SIZE)
realloc(mp->buf,
You
read().
non-terminated
they
H2O_STRLIT(206)
time-out\n);
WSAGetLastError());
0x2du
getaddrinfo()
accepts
winsock.
addapted
DESTROY_LIST(type,
Network
Programming
tmp
(http://beej.us/guide/bgnet/).
setsockopt()
%u,
ftplib
necessary.
_size_
(void*)h2o_create_handler(host_config,
COMPILER_VERSION_PATCH
printf
(mu4,
%lld
cnt;
proxy)?
hd->b[u];
buf[i++]
on_upgrade_complete(void
(x);
buf[cnt-i-1];
self->reproxy_url,
(__kbstack_t*)calloc(__kmax,
self->buf_sending->size);
inbuf->_capacity
buf[cnt-i-1]
dat,
t/test.h
*buf)
252
ht_init_data();
((int64_t)
48);
ok(phr_parse_response(s,
skipping
windows,
*data;
on_handler_dispose(h2o_handler_t
hello
wsaData;
2),
specify
netread()
Linux).
headers[i].value,
fine
h2o_mempool_release_shared((char*)key);
not.
Therefore
one.
%s:
fopen(argv[1],
priolist->list.size
hostent
INVALID_SOCKET)
2174625464u,
(char*)&on,
memcmp(proto.base,
this
*minor_version
info
((a).key)
AF_INET);
__err_connect(gethost);
strlen(pat),
k3;
reaches
server.sin_addr.s_addr
A
read(fp->fd,
long*)hp->h_addr);
server.sin_family=
ks_getuntil(ks,
server.sin_port
htons(atoi(port));
kh_foreach_value(conn->open_streams,
sockaddr*)&server,
beginning,
sizeof(server))
63];
freehostent(hp);
MSDN,
(memory
((value)
leak?!)
repeatedly.
kv_roundup32(x)
H2O_HTTP2_STREAM_STATE_RECV_BODY:
b64tab[(int)(digest[i]
(EOF),
met
kftp_get_response(knetFile
memcmp(s,
accept4(listener->fd,
-
stderr);
ftp->max_response)
ftp->response
ftp->max_response);
isdigit(ftp->response[1])
isdigit(ftp->response[2])
hostconf->global
sizeof(*client_ctx->io_timeout));
ftp->response[n-2]
strtol(ftp->response,
#undef
kftp_get_response(ftp)
v[6];
num_responding_streams;
H2O_TOKEN_SERVER
kftp_send_cmd(ftp,
ftp->pasv_port
kftp_pasv_connect(knetFile
(ftp->pasv_port
KNERR_MISSING_RGHT
[kftp_pasv_connect]
kftp_pasv_prep()
hand.\n);
headers[i].name_len);
ftp->pasv_ip[0],
config_str_len
ftp->pasv_ip[3]);
(ftp->fd
kftp_connect(knetFile
pool));
decode_header(&req->pool,
ftp->ctrl_fd
strangely
2-bit
socket_connect(ftp->host,
((n)>>4
tol,
ctrl
ftp->port);
kftp_get_response(ftp);
226},
Hooke-Jeeves\n);
locatio,
packInt32(uint8_t
((kbnode_t**)((char*)x
*h2o_context_get_logger_context(h2o_context_t
{198,
keepalive
_buf[1];
popcount_2()
*retr
kftp_reconnect(knetFile
netclose(ftp->ctrl_fd);
netclose(ftp->fd);
->retr
governed
(knetFile*)calloc(1,
sizeof(knetFile));
fprintf(stderr,
0x3fffd3u
KNF_TYPE_FTP;
km_ks_dist(int
due
fp->fd
Linux/Mac
mem
fp->port
(int)msg.len,
fp->host
(char*)calloc(l
'c'))
fp->no_reconnect
(sock->input->size
*n_cigar_
strncpy(fp->host,
sprintf(fp->size_cmd,
THIS
SIZE
fp->seek_offset
42
kftp_connect_file(knetFile
change_index;
(fp->no_reconnect)
kftp_get_response(fp);
st_h2o_ostream_t
kftp_pasv_prep(fp);
%lld\r\n,
-0.50,
fp->size_cmd,
new_capacity);
(
%lld,
Open
produce
0x3ffffeeu
&file_size)
sizeof(self->index_files[0])
fprintf(stderr,[kftp_connect_file]
programming
fp->response);
strtol(colon_at
fp->response;
42},
file_size
free(ks);
36},
(fp->offset>=0)
(name_is_token)
REST
_mm_max_epi16(f,
(long
long)fp->offset);
[kftp_connect_file]
node,
fp->is_ready
fp->http_host
strncpy(fp->http_host,
fp->http_host[l]
req->upgrade.len,
->path
strdup(fp->http_host);
2]
fp->host;
array[i+1])
search)
*src_end,
KNF_TYPE_HTTP;
fp->ctrl_fd
h2o_loopback_create(&ctx);
khttp_connect_file(knetFile
rpath_len,
fp->http_host);
dramatically
Range:
{208,
(v).a[(v).n++]
direct
(o->on_context_init
bytes=%lld-\r\n,
NGHTTP2_HUFF_SYM)
http://example.com/abc,
(complete
206
rest),
++c;
sigaction
keeps
[khttp_connect_file]
RA[m]
(HTTP
%d).\n,
data)
[kftp_open]
\r\
(kftp_connect(fp)
->is_ready=0.
O_BINARY
HMM_FORWARD);
KNF_TYPE_LOCAL;
KNF_TYPE_FTP)
*open_streams;
kvec_t(type)
(fp->is_ready
KNF_TYPE_LOCAL)
UNIX
read-only
ctx->_timestamp_cache.tv_at.tv_sec);
EINTR
reproxy
(is_read)
global.h;
errno);
*s
{141,
fp->offset)
164},
Be
{168,
seeking,
klist.h
self->upstream.sockpool->timeout
fseek()
lseek(fp->fd,
(offset
[options]\n
knet_seek
streamed
headers[2].value_len,
h2o_timeout_unlink(&conn->_timeout_entry);
(fabs(x1[k]
fprintf(stderr,[knet_seek]
free(line);
off;
whence==SEEK_END)
ku->curl
(likely(*buf
*decode_huffman(h2o_mempool_t
HTTP.
Temporary
Offset
(last_char
(INCLUDING
iovcnt;
errno
ESPIPE;
(fp->ctrl_fd
netclose(fp->ctrl_fd);
0x0101010101010101ull;
example.com\r\nCookie:
H2O_SOCKET_FLAG_IS_POLLED_FOR_WRITE;
227},
h2o_mimemap_create(),
array[],
netclose()
close(),
closesocket().
(h->n_occupied
free(fp->host);
assigning
free(fp->response);
*kstrstr(const
free(fp->path);
*yoml__strdup(yaml_char_t
free(fp->http_host);
h2o_ssl_register_alpn_protocols(ssl_ctx,
(type
knet_open(knetfile.c,
sizeof(*client));
http://default/index_txt_as_dir/index.txt/));
NCBI
FTP,
255);
keep-alive
q1
curl_global_init(CURL_GLOBAL_DEFAULT);
knet_open(http://www.sanger.ac.uk/Users/lh3/index.shtml,
frame->stream_id
20000,
10000;
buf[255]
write(fileno(stdout),
payload.headers_len,
y[20][20],
np,
x[j]
IAR
np
Systems
iw
iovcnt))
(iw
it),
-iw;
*info)
d\r\n\r\n)
y;
decode16u(src);
n_evals
KMIN_MAXCALL);
printf(n=%d,min=%.8lg,n_evals=%d\n,
bt1_pop64(uint64_t
elements[num_elements
wiki
((x
0x5555555555555555llu);
0x3333333333333333llu)
H2O_TOKEN_STATUS,
0x0F0F0F0F0F0F0F0Fllu;
++priolist->list.size;
0;
src++)
dw,
except:
equivalence
dwA
dw
free(Vmax[u]);
dwNA
121
~0xAAAAAAAAAAAAAAAAllu;
dst_end)
0:
~(dwA
induceSA(const
--j);
sse2_bit_count32(const
__m128i*
*info);
0x55555555;
mu2
_mm_adds_epi16(h,
0x33333333;
reproxy_test(h2o_handler_t
HTTP/1.x
mu3
on_req(h2o_handler_t
0x0F0F0F0F;
mu4
Loading
handle_incoming_request(h2o_http2_conn_t
EXIT_FAILURE;
code:
(mu2,
prev_initial_window_size
m3
(mu3,
m4
seed;
mu4,
mcnt;
tmp1,
sizeof(addr))
_mm_load_si128(block);
'0',
kbtree_t(str)
0x55555555)
tmp1
tmp2
(ext
0x33333333)
_mm_add_epi32(b,
h2o_config_define_command(&c->super,
tmp1);
m3);
h2o_init_input_buffer(&conn->body);
_mm_srli_epi32
m4);
block_end);
mcnt);
h2o_http2_conn_register_stream(conn,
h2o_add_header(&src_conn->req.pool,
tcnt[1]
free(str_data[i]);
unaligned
H2O_HTTP2_FRAME_HEADER_SIZE)
y->n
tcnt[2]
tcnt[3];
clock_t
parallel
(uint64_t*)calloc(N,
srand48(11);
!__ac_iseither(h->flags,
(uint64_t)lrand48()
Calculate
sizeof(h2o_header_t)
h2o_http2_window_init(&stream->output_window,
clock();
CLOCKS_PER_SEC);
&t->tasks[t->n_tasks++];
__builtin_popcountl(x[i]);
__builtin_popcountl,
sse2_bit_count32((__m128i*)x,
c:
h2o_config_register_host(&config,
'%c'
on_write_complete
clone_mimemap_if_clean(self);
(_id
encoded
hp_start;
bowtie1,
LIABLE
http://keithlea.com/javabench/src/cpp/hash.cpp
Keith
chars
his
benchmark
H2O_MAX_REQLEN;
atomic
(http://keithlea.com/javabench/data)
--x)
Java
strlen(buf));
js,
header_table,
fact,
substandard.
h2o_set_header(&req->pool,
convert
zero-filled
pool,
extremely
[gzgetc]
inefficient.
added->value;
_mm_add_epi32(mcnt,
KHASH_MAP_INIT_STR(str,
int2str(int
0123456789abcdef;
ret[1]
pool->timeout;
base)
tab[x%base];
ret[y]
_USE_STRDUP
**mem
*h;
atoi(argv[1]);
malloc(sizeof(void*));
h2o_timeout__do_link(loop,
kurl_init();
mem[0]
malloc(BLOCK_SIZE);
otherwise
kmp_free(name,
H2O_TOKEN_CONTENT_LENGTH)
assert(stream->_data.size
alloc_size;
int2str(i,
URL-path
h2
kh_put(str,
strlen(buf)
mem[curr]
memcpy(mem[curr]
aux->response[3]
enum_h2o_http2_conn_state_t
kh_get(str,
++ret)
h2o_malloc(sizeof(h2o_buf_t)
free(mem);
cur_off;
kh_destroy(str,
strdup(buf),
H2O_STRLIT(
(kurl_t*)data;
explicitly
free((char*)kh_key(h,
*str_t;
ret.len
82},
str_t,
5000000;
EarlyExit:
ht_init_data()
a.auth,
traverse_f(p)
buf[256];
*_self,
printf(---
parse_http_version(buf,
153},
KURL_NULL
DATA
generating
sizeof(unsigned));
sizeof(char*));
data_size;
int_data[i]
(unsigned)(data_size
->offset
drand48()
271828183u;
sprintf(buf,
str_data[i]
file,
printf(done!\n);
ht_destroy_data()
ks->begin);
free(int_data);
216},
ht_khash_int()
*l,
*u;
kbtree.h
kb_init(int,
real_path;
KB_DEFAULT_SIZE);
data[i])
data[i]);
kb_del(int,
kb_size(h));
s->state.w[2]
&l,
printf(interval
H2O_TOKEN_IF_MODIFIED_SINCE;
going
2174625464:
%u)\n,
l?
h2o_http1client_error_is_eos);
u?
stream_max;
*u
++cnt;
__kb_traverse(uint32_t,
malloc)
max_cur_frame_size
*int64tostr(char
cd;
(conn->state
traversal:
v)
on_ssl_handshake_complete(h2o_socket_t
231},
writes
kh_destroy(ipk,
element:
LONG_MAX);
*map
sockets;
y);
__kb_destroy(h);
*aux)
**data
204);
kb_init(str,
(kb_get(str,
*conf
kb_put(str,
ht_timing(void
/sample/path)
(*f)(void))
evloop/select.c.h
(*f)();
~y)
*new_flags
%.3lf
((n)>>20
H2O_TOKEN_HOST
ht_timing(ht_khash_int);
ht_timing(ht_khash_str);
perror(fstat);
KSTREAM_INIT(int,
read,
4096)
65536
<in.txt>\n,
free(preV);
75
self->upstream.path
H2O_CONFIGURATOR_FLAG_DEFERRED,
(!seek_end
malloc(BUF_SIZE);
gzclose(fp);
*i))
SOFTWARE,
[fgets]
0xffffefu
(index
0123456789+/;
FUNCTIONS
%.2f
*nextbuf;
ADVANCE_TOKEN
(float)(clock()
socklen_t
dret;
*high);
*ks;
s.l
s.s
ok(memcmp(req.path.base,
ks
free(s.s);
msg_len;
3
[kstream]
(printed
last_len
bt1_pop64(tmp);
also:
KHASH_SET_INIT_STR(str)
KHASH_MAP_INIT_INT(int,
int_unpack_t;
internal
trigger
nghttp2_huff_decode_flag;
((__packed__))
((a).key
array);
KHASH_INIT(iun,
hash_func,
num_elements
hash_eq)
((double)x
khash_t(int)
kh_put(int,
expected_len));
ok(strcmp(result.value->base,
data[i],
addrlen)
%u\n,
kh_size(h));
true;
client_ctx->io_timeout,
ht_khash_unpack()
__kb_get_aux_##name(const
{159,
kh_init(iun);
&main_tests;
kh_put(iun,
105},
kh_del(iun,
%u
(sizeof=%ld)\n,
khkey_t
defined(__XENIX__)
kh_destroy(iun,
printf([ht_khash_packed]
URL\n);
ht_timing(ht_khash_packed);
169},
(str
KHASH_INIT2(e32,
extern,
_mm_load_si128(H1
(b)))
'\n',
khash_t(e32)
*body)
KGRAPH_INIT(g,
CONNECTION_PREFACE.base,
e32)
KGRAPH_PRINT(g,
extern)
*pb,
free_cache(fp);
*pe;
(assert_is_mimetype(cmd,
kg_init_g();
kg_put_a_g(g,
done_testing(void);
kg_print_g(g);
WSADATA
kg_destroy_g(g);
119},
nfail
H2O_CONFIGURATOR_FLAG_EXPECT_SEQUENCE
*what,
strlen(correct)
newp;
strcmp(ks->s,
(\%s\
https://,
servlen);
correct)\tFAIL\n,
kurl_fileno(const
what,
\r\nfoo:
(int)(ks->l),
ks);
36);
check(kputw(),
test_kputl(kstring_t
buf[24];
check(kputl(),
test_kputw(&ks,
text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\nAccept-Language:
t->w
12345);
-INT_MAX);
168
induceSA(T,
portions
nfail);
predefined,
$Id:
EXIT_SUCCESS;
block_end)
10000000;
*array,
0xffffffau
(int*)malloc(sizeof(int)
dst->default_type
N);
memset(&hints,
N,
[%d]:
buf_end,
score.
(double)(t2-t1)/CLOCKS_PER_SEC);
188
N-1;
do
(array[i]
introsort!\n);
strLength+(strLength-1);
(self->fd
prevent
kgint_t
escaped.len,
interface;
175},
fb
_ALIGNED_ONLY
b[i]
HTTP/1.0
b[10500],
num_headers);
(size_t)b);
xp)[xp->n++]
((rret
(sorted):
slen,
mergesort!\n);
c->vars->keepalive_timeout
test_headers(void)
ks_heapmake(int,
H2O_TOKEN_LOCATION
ks_heapsort(int,
__APPLE__
HAVE_STRNSTR
1024*1024*128;
pat_len
30;
ksprintf:
{84,
__KSEQ_READ(SCOPE)
repeat
*gen_data(int
client->sock
KSW_XSTART;
malloc(len);
h2o_reproxy_register(hostconf);
T;
g->w;
data[i]
(overwrite_if_exists)
drand48())
h2o_http2_stream_open(conn,
'!';
cnt)
*BoyerMoore(
defined(__PGI)
Oku,
dataLength,
strLength
skipTable[256],
(void*)&listener->addr,
(strLength
*encode24u(uint8_t
skipTable[i]
*kl_pushp(32,
subtest(lib/util.c,
(*search
lastChar)
(*--search
alphabet);
%.3f
repeat;
lrand48()
Yuta
h2o_mempool_addref_shared(entry->value);
printf(%d,
conn->_prevreqlen
%s,
(int)(ret
allo,
BoyerMoore(data,
memcpy(tmp,
happens
strnstr(data,
kh_int64_hash_equal)
str_len);
memmem(data,
__int_free(x)
end_loop16:
kh_int_hash_func(key)
__int_free)
klist_t(32)
cb);
kliter_t(32)
COMMON_CODE(12,
kl
conn->_pending_reqs.prev;
RESERVE(capacity)
0xffffff4u
kl_init(32);
sizeof(kbtree_##name##_t));
kl_shift(32,
kl_end(kl);
h2o_config_create_configurator(&config.global_config,
kl_next(p))
conn;
kl_val(p));
bufcnt,
kl_destroy(32,
H2O_STRLIT(\x08\x03\x33\x30\x32\x58\x85\xae\xc3\x77\x1a\x4b\x61\x96\xd0\x7a\xbe\x94\x10\x54\xd4\x44\xa8\x20\x05\x95\x04\x0b\x81\x66\xe0\x82\xa6\x2d\x1b\xff\x6e\x91\x9d\x29\xad\x17\x18\x63\xc7\x8f\x0b\x97\xc8\xe9\xae\x82\xae\x43\xd3));
gzopen(argv[1],
nevents;
kh_resize_##name(kh_##name##_t
h2o_vector_reserve(NULL,
kseq_init(fp);
(self->vars->mimemap
self->client->data
last_start
Improved
(seq->comment.l)
combsort:
printf(comment:
printf(seq:
COMMON_CODE(11,
seq->qual.s);
M_SQRT2;
kseq_destroy(seq);
10000000
againt
(ku->hdr)
kputw(x,
2008-11-05
kputw:
normalize
ksprintf(&s,
s2.l
s2.m
kurl_open(fn,
upper);
h2o_malloc(sizeof(*stream));
(config_node->type
&s2);
&is_dir);
chunks
kputs(s2.s,
12
kputw+kputs:
0xffffff1u
*h2o_loopback_create(h2o_context_t
0x3fffdeu
eh[j].h
s2.s);
b[n_b-1]
&method,
kputw+ksprintf:
*sockpool;
*kl
*src)
foo_);
buf+4);
--n;
k),
k2)
others,
strdup(kh_key(h,
kh_val(h2,
243},
foo_1);
*globalconf)
kh_begin(h2);
perror(func);
kh_end(h2);
H2O_TOKEN_UPGRADE)
tree.
kputsn(date,
(kh_exist(h2,
h2);
KSTREAM_INIT(gzFile,
<in.gz>\n);
H2O_TOKEN_SERVER;
[ks_getuntil]
(gzgets(fp,
HAVE_CILK
(extension
<cilk/cilk.h>
<cilk/cilk_api.h>
max_iter,
*B;
pong;
xmax,
defined(_M_IA64)
ymin,
char*)protocols[i].base;
ymax;
&addrlen)
\
compute(void
*_g,
global_t
(global_t*)_g;
g->xmin)
min_guarantee)
char)
hufflen
f;
(i%g->w)
(g->ymax
b->t,
(for
test_lib__http2__hpack(void);
110
{232,
g->h;
zn,
(unsigned)fill_size));
x0;
fabs(dx[k]);
g->k[i]
n_items,
10240*100,
payload_size,
-2.,
16383)
test_lib__string_c(void);
argv[1][0]
'o'?
'n'?
./a.out
cilk
tot
h2o_reserve_input_buffer(&sock->input,
lazy
lastChar
kftp_get_response(aux)
global.k
(conn->sock->ssl
calloc(tot,
socket;
tot;
kt_for(n_threads,
compute,
test_kputw(kstring_t
&global);
h2o_timeout_unlink(&client->_timeout);
omp
compute(&global,
assert(tmp
unlink(servname);
48},
1997-1999,
representations
H2O_HTTP2_FRAME_TYPE_GOAWAY
2001,
-1))
Redistribution
list.
absent);
max_registered_at
random
on_head(h2o_http1client_t
binary
(wslay_event_want_read(conn->ws_ctx))
modification,
met:
retain
guess
notice,
buffers.
reproduce
&send_data;
materials
BY
tid;
AUTHOR
CONTRIBUTORS
200},
``AS
IS''
WARRANTIES,
waitpid(aux->pid,
0xfffff3u
0x7ffffe5u
kr;
INCLUDING,
reenable
conn->_timeout
LIKELY(k
TO,
INDIRECT,
SPECIAL,
CONSEQUENTIAL
((client->_body_bytesleft
&H2O_HTTP2_SETTINGS_HOST))
destroy
dst_buf;
(INCLUDING,
(v).a[(i)])
h2o_setup_next_ostream(self->filter,
equal
SUBSTITUTE
maximum
GOODS
SERVICES;
USE,
DATA,
H2O_TO__STR(n)
A.2
kevent
PROFITS;
decode24u(const
BUSINESS
changelist_capacity)
HOWEVER
HEX(__BORLANDC__
CAUSED
kh_destroy(ehn,
h2o_http2_encode_window_update_frame(conn->_write.pool,
THEORY
typedef
0xfffffecu
EVEN
(addr
IF
ADVISED
(sizeof(size_t)
kts_task_t
__AC_KBTREE_H
n:31;
(h2o_http2_conn_t*)req->conn;
__KB_KEY(type,
((type*)((char*)x
btr->off_ptr))
\r\n\r,
in,
{120,
__KB_TREE_T(name)
*root;
n_keys,
(kbtree_##name##_t*)calloc(1,
*kstrnstr(const
host_config,
*kr);
sizeof(void*))
h2o_add_header(&pool,
(b->t
send_error(conn,
b->n
0x2au
g);
b->ilen
per-byte,
(4
khash_t(exttable)
(b->off_ptr
b->ilen);
on_connect(uv_connect_t
++b->n_nodes;
Haiku
*--top;
doc->data.sequence.elements[0]->data.sequence.elements[0];
(x->is_internal
x->n;
x)[i])
computes
(max>>1);
defined(__ADSP21000__)
&ctx->req_timeout,
H2O_STRLIT(host)
__KB_PTR(b,
26))
conn->_write.bufs.entries[conn->_write.bufs.size++]
x)[i];
*S
-2)
strlen(fmt),
81
__kb_get_first(key_t,
on_upgrade_complete,
*__x
__KB_GET_AUX0(name,
*r)
fx,
x->n
%llu,
(x->n
(h2o_buf_t*)h2o_hpack_static_table[index
(__cmp(*k,
119
{223,
&tr;
__kb_getp_aux_##name(const
h2o_dispose_input_buffer(&self->last_content_before_send);
__VA_ARGS__)
(begin
(double*)calloc(n,
header_table_add(header_table,
0xfbu
__kp->x)[__kp->i]);
(__cmp(__KB_KEY(key_t,
tcp)
bmGs
&v[1],
mid;
x->n)
*rr
x)[begin]))
--begin;
gethostbyname(host);
**_prep)
b->root;
{36,
&__KB_KEY(key_t,
x)[i
&k);
ks.m
__KB_INTERVAL(name,
frame->payload,
kb_intervalp_##name(kbtree_##name##_t
**lower,
**upper)
0xfffebu
/\xa0));
*upper
&k,
lower,
0x5100
*y)
y->is_internal?
b->elen);
z->is_internal
(h2o_buf_is_token(h->name)
characters
z->n
y)
b->t);
189
i));
x)[i]
(h0
x)[i]);
__kb_putp_aux_##name(b,
Internal
x)[i],
*r,
H2O_STRLIT(if-none-match)
140},
diagnostic
payload.data,
++b->n_keys;
s->n
*xmin);
*kg_put_v_##name(kgraph_t(name)
kb_put_##name(kbtree_##name##_t
yn,
h2o_linklist_insert(&stream->_link.slot->active_streams,
server_name);
*xp,
*y,
0xffffff2u
kp;
x->is_internal
--x->n;
HTTP/1.0\r\n:a\r\n\r\n,
((yn
copy,
((zn
1]->n)
(yn
y)[y->n++]
call.
o->on_context_init(o,
*vector,
y->n,
(z->n
{155,
protocols[i].base,
custom-key)
z->n;
cilk_for
((xp
xp)
xp),
xp->n
SIGPIPE
(xp->is_internal)
(xp->n
y)[y->n];
http://code.google.com/p/ulib/
src[2];
--y->n;
k2)>>2);
204},
bgzf_flush(fp);
y)[0];
ak[l];
xp)[xp->n]
y),
(y->n
xp->n;
1e300
free(xp);
fa);
'w'
Core
(int32_t)b[i];
142},
xp->n,
buf_start);
kb_delp_##name(kbtree_##name##_t
255},
--b->n_keys;
kftp_get_response(&aux);
(b->root->n
&payload.priority,
name_buf,
--b->n_nodes;
kurl_close(f);
strdup(encoded);
10000)
kb_delp_##name(b,
0xfffffedu
__kb_traverse(key_t,
*__kp;
(__kp->x
HTTP/2.0\r\n\r\nSM\r\n\r\n)
(__kmax>>1)
*filter);
CRYPTO_LOCK)
(__kp+1)->i
CHUNKED_IN_CHUNK_DATA,
++__kp;
--__kp;
kb_getp_##name(b,
__kstack)
literals.
(src
KB_DEFAULT_SIZE
ktf_worker_t
512
kbtree_t(name)
kb_init(name,
kb_init_##name(s)
(pthread_t*)alloca(n_threads
kb_destroy(name,
sigset_t
kb_get(name,
kb_get_##name(b,
Return;
kb_del(name,
Error:
fatal:%s\n,
kb_getp(name,
response)
SSL_CTX_set_options(ssl_ctx,
discard
kb_generic_cmp(a,
(((b)
ok(strcmp(host,
arg->msg_length
kb_str_cmp(a,
((iter)->data)
kv_init(array);
operation
hostconf->list.entries[i];
8)
table
b->t
kv_push(int,
Kaupe's
self->up_req.bufs[0]
For
yoml_mapping_element_t;
resume_send(conn);
*_target,
kv_a(int,
l[k];
uv_listen((uv_stream_t*)&listener,
kv_A(array,
AC_KVEC_H
kv_size(v)
Type
kv_max(v)
((v).m
(isspace(ks->buf[i])
fx1,
(type*)realloc((v).a,
h2o_malloc(new_capacity
v1,
(v0).n)
(v0).n);
(v1).n
(v0).n;
kv_push(type,
H2O_STRLIT(proxy-authenticate)
(v).m)
(socket_wait(fd,
106},
saint_t
(v).m?
self->virtual_path.len,
(v).m);
res->headers.entries[index].value.len,
H2O_HTTP2_FRAME_TYPE_DATA,
max_frame_size,
kv_pushp(type,
(((v).n
num_deferred;
(v).m)?
((v).m?
&conn->_input_window,
(void*)free);
((v).a
0x28u
kv_a(type,
(((v).m
(size_t)(i)?
537305f5cbdd8ec941864651e54c0738912baec0
kv_roundup32((v).m),
*cur_frame;
standard
conn->_write_buf
popcount;
ctx->hostconf->handlers.size)
0x101010101010101ull
ku);
'\t')))
2},
integer;
h2o_buf_init(H2O_STRLIT(h2o/0.1));
BWA
arg)
counting
sock->data;
((c&1)?
0x5555555555555555ull;
1s
closet
bit
hacks
_timeouts;
free(ks->seq.s);
kbi_swap
pat
kbi_swap(a,
(((a)
((b)
(a)),
free(test_loop);
ACGT[c]);
arc_t,
ehn)
pat[g]
*kg_init_##name(void)
_mm_max_epu8(h,
kg_destroy_##name(kgraph_t(name)
handle_frame_as_protocol_error(h2o_http2_conn_t
*g)
_link;
kh_begin(g);
0x79u
v;
(kh_exist(g,
kh_val(g,
*k)
(char*)buf
k)._arc);
fp->fp)
vertex_t
element_index
50},
g,
new_entries[dst_index]
deferred[i].value)
v);
h2o_file_register(ctx->hostconf,
kh_end(g)?
&kh_val(g,
k)._arc
(do_index)
encoded[i];
stream->_req_body->size
dir,
**pe)
absent;
kg_put_v_##name(g,
h2o_mempool_chunk_t
&absent);
defined(__ICC)
(NULL-terminated)
kh_put(ehn,
KNERR_BRACKET;
p->_arc,
*pb
vbeg<<2|(~dir&3),
*pe
note(decode_header
0x7ffffe2u
str->s[str->l-1]
seq->qual.m
*kg_del_v_##name(kgraph_t(name)
under
(slot->weight
k0,
graph
H2O_TOKEN_HOST)
h2o_buf_t)
SIZE_MAX
k)._arc;
k)>>2);
decode24u(src);
kh_end(g));
fox
rare
0x60u
k3
kh_get(ehn,
k2)._arc,
requests
v<<2|(~kh_key(h,
assert(k3
#n
kh_end(kh_val(g,
on_enter
small
*slot)
'e':
k2)._arc));
*msg_len,
cond,
(k2
kh_begin(kh_val(g,
h2o_time2str_log(ctx->_timestamp_cache.value->log,
(kh_exist(kh_val(g,
int32_t
k)._arc,
payload.window_size_increment);
-2,
{245,
%u%c%c%u\n,
path_len);
*ksplit(kstring_t
k2)>>1&1],
18)
k2)&1],
KGRAPH_INIT(name,
0x7ffffdfu
*config_file,
kgint_t,
2009-2014
bytes[4096
Matsuno,
grow
uv_tcp_init:%s\n,
Daisuke
Murase
Perl
(default:
src[i].value_len);
_interval_cb.entry,
7f86ee0fd1776705d4b8841d83c5db5220369a3e
reduce
likely(x)
read(self->fd,
(ks->buf[i]
sz_min(size_t
__builtin_expect(!!(x),
IS_PRINTABLE_ASCII(c)
if-none-matc,
char)(c)
ignore
040u
CHECK_EOF()
cur_size;
EXPECT_CHAR(ch)
CHECK_EOF();
linger
(*buf++
extension
ADVANCE_TOKEN(tok,
(unlikely(!
{154,
IS_PRINTABLE_ASCII(*buf)))
'\040'
arg);
key_t)
tok
0x03,
\0\1\1\1\1\1\1\1\0\0\1\1\0\1\1\0\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0
k];
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0;
allow_psuedo
int*
token_start
hottest
manually
inlined
max_calls)
(likely(buf_end
8))
chr(p)))
NonPrintable;
0x10000
(uint8_t*)realloc(rseq,
*buf_sending;
cmd->configurator
kb_del_##name(b,
++buf
DOIT();
execl(/bin/sh,
DOIT
((likely((unsigned
'\040')
'\011'))
fill
unlikely(*buf
FOUND_CTL;
[knet_seek]
FOUND_CTL:
++buf;
token_start;
0xF))
ret_cnt
peername
'\015')
KHASH_SET_INIT_STR(name)
assert(ret
*create_client(h2o_http1client_ctx_t
++ret_cnt;
self->super.stop
SHA1
(ret_cnt
*_buf
*if_modified_since
eos
differs)
parse_http_version(const
h2o_mempool_alloc_shared(&req->pool,
0x1ffffeeu
EXPECT_CHAR('T');
h=H'(i,j)
EXPECT_CHAR('P');
values
input_length
EXPECT_CHAR('/');
EXPECT_CHAR('1');
EXPECT_CHAR('.');
kf_lgamma(s)
parse_int(buf,
num_headers,
max_headers,
h2o_http2_window_init(h2o_http2_window_t
H2O_TOKEN_CONTENT_LENGTH,
token_char_map[(unsigned
socket/evloop.h
char)*buf])
24},
SP
headers[*num_headers].name_len
'\t'))
((buf
ret))
avail;
parse_request(const
(some
readfds,
buf_end
mon
conn->peer_settings.max_frame_size,
*_sock)
*num_headers;
'-';
*method
*path
docs/examples/fopen.c
countermeasure
t->n?
++map->data.mapping.size;
sizeof(headers)
&r)
Both
sequence.
(int)(buf
chr(j
parse_response(const
296.5642487796737;
0x71u
207},
on_send_complete(h2o_socket_t
h2o_buf_init(H2O_STRLIT(\x40\x0a\x63\x75\x73\x74\x6f\x6d\x2d\x6b\x65\x79\x0d\x63\x75\x73\x74\x6f\x6d\x2d\x68\x65\x61\x64\x65\x72));
phr_parse_response(const
src.base)
sprintf(serv,
*msg_len
(!new_flags)
parse_response(buf,
CHUNKED_IN_CHUNK_SIZE,
(fs
free(a2[1]);
CHUNKED_IN_TRAILERS_LINE_HEAD,
written;
CHUNKED_IN_TRAILERS_LINE_MIDDLE
h2o_buf_init(H2O_STRLIT(GET));
'a'
phr_chunked_decoder
dst
*path,
*_bufsz;
CHUNKED_IN_CHUNK_SIZE:
e->dispose(e);
bufsz)
((v
decoder->bytes_left_in_chunk
decoder->_state
fallthru
0xffffedu
KHASH_MAP_INIT_INT(32,
CHUNKED_IN_CHUNK_EXT:
disallowed
++src;
{};
CHUNKED_IN_TRAILERS_LINE_HEAD;
Complete;
++bufs,
CHUNKED_IN_CHUNK_DATA;
CHUNKED_IN_CHUNK_DATA:
avail
src;
(dst
dst,
(req->version
stream->state
cur[off]
(prepare(ku,
src,
decoder->bytes_left_in_chunk);
(TODO
decoder->bytes_left_in_chunk;
h2o_chunked_register(hostconf);
*client_key,
CHUNKED_IN_CHUNK_CRLF;
CHUNKED_IN_TRAILERS_LINE_MIDDLE;
assert(!decoder
corrupt);
headers[i].value_len);
src);
backtrack
36,
0x04,
*_write_buf;
dst;
__cmp(*k,
REQ
&on,
w
HTTP/1.1\r\nHost:
h2o_socket_close(conn->sock);
%.*s\r\n,
*shared_refs;
(prev_initial_window_size
Mozilla/5.0
ks_init(fp);
U;
b));
decode32u(src);
OS
109
h2o_evloop_socket_accept(listener))
10.6;
http_host);
**top,
ja-JP-mac;
rv:1.9.2.3)
Pathtraq/0.9\r\nAccept:
115\r\nConnection:
_can_keepalive;
keep-alive\r\nCookie:
fp->size_cmd
SET(label,
21)
wp_ozh_wsa_visits=2;
their
freed
(int)(req->path.len
__utmz=xxxxxxxxx.xxxxxxxxxx.x.x.utmccn=(referral)|utmcsr=reader.livedoor.com|utmcct=/reader/|utmcmd=referral\r\n\r\n
method_len;
h2o_find_header(headers,
data.mapping.elements)
{126,
aa
minor_version;
1.;
headers[32];
0x1fffe1u
num_headers
H2O_HTTP2_ERROR_PROTOCOL_CLOSE_IMMEDIATELY;
sizeof(headers[0]);
&r);
max_header_size;
5)));
&path,
&path_len,
decode_int(const
&minor_version,
h2o_socket_ssl_server_handshake(h2o_socket_t
&num_headers,
(0.2.2):
name_len;
cosumed
elements_len;
h2o_buf_init(H2O_STRLIT(/));
last_len);
ditto
_buf,
*nend
*minor_version,
h2o_context_get_handler_context(req->conn->ctx,
bytes_left_in_chunk;
15)
left
consume_trailer;
conn->_input.size
(fp)
nextbuf
consumed
<signal.h>
_hex_count;
_state;
rewrites
<tlen)
__ac_X31_hash_string(key)
headers.
(**src
traverse_f);
successfully
ok(method
repeatedly
res->ai_addrlen)
every
newly
undecoded
CHECK_EOF
area
remaining
*bufsz);
picotest/picotest.h
strlen(t)
l)
PARSE(s,
&node[root],
0x1fffe7u
exp,
Generic
comment)
(exp
(unhandled
exp));
PARSE(GET
13,
*decode_string(h2o_mempool_t
assert(hd->status
simple);
ok(bufis(method,
kftp_parse_url(fn,
GET));
VRP
CONTINUATION
ok(bufis(path,
h2o_process_request(&stream->req);
HTTP/1.0\r\n\r,
/hoge
method_len,
disappears
parse
headers);
(wslay_event_recv(conn->ws_ctx)
/hoge));
ok(bufis(headers[0].name,
Host));
program:
ok(bufis(headers[0].value,
*_bufsz
headers[1].name_len,
42,
Cookie));
H2O_STRLIT(HTTP/1.));
(kthread_t*)calloc(1,
));
HTTP/1.0\r\nfoo:
b\r\n
\tc\r\n\r\n,
ok(bufis(headers[2].value,
/**
PARSE(GET,
/,
4);
(setsockopt(fd,
H,
DESTROY_LIST(h2o_filter_t,
5);
h2o_vector_reserve(&sock->ssl->output.pool,
*ident;
HTTP/1.0,
(h2o_http2_update_peer_settings(&http2conn->peer_settings,
h->size
HTTP/1.0\r\n\r)
self->etag_len);
H2O_STRUCT_FROM_MEMBER(h2o_http2_stream_t,
slowloris
empty
196},
retr,
HTTP/1.0\r\n
loop
disallow
H2O_HTTP2_SETTINGS_DEFAULT
stream);
header
(space
&conn->super.ctx->global_config->server_name));
only));
KURL_SEEK_OUT;
PARSE(G\0T
82
packInt16(uint8_t
NUL
method);
DEL
32-bit
85},
((v).n
uri-path);
sprintf(port2,
HTTP/1.0\r\na\0b:
c\r\n\r\n,
(req->upgrade.base
c\0d\r\n\r\n,
value);
/\xa0
c\xa2y\r\n\r\n,
value_len,
MSB
chars);
H2O_STRLIT(identity)))
*conn);
c\xa2y));
strlen(hp_start);
PARSE
208},
strlen(s),
Error\r\n\r\n,
value)
&msg,
120
&msg_len,
PARSE(HTTP/1.0
sequences
197
OK\r\n\r\n,
sym;
ok(bufis(msg,
OK));
OK\r\n\r,
buf[17]
PARSE(HTTP/1.1
OK\r\nfoo:
Server
%.3lf\n,
500);
defined
Internal
Error));
ok(msg_len
sizeof(Internal
PARSE(HTTP/1.,
OK\r,
124
(h2o_socket_export(sock,
9);
ok(msg
VVRR
kputc('(',
OK\r\n,
10);
ts->at
1\r,
1\r\n,
self->vars->mimemap
DEC(__GNUC_MINOR__)
0x3ffcu
strlen(HTTP/1.0
defined(__IAR_SYSTEMS_ICC__
(uint32_t)length);
OK\r\n\r\n)
PARSE(HTTP/1.
PARSE(HTTP/1.2z
library,
code);
MIE_ALIGN(16)
74
ok(phr_parse_headers(s,
slowloris);
m*m
e\7fample.com\r\nCookie:
*decoded
error);
line,
*encoded,
expected)
bufsz;
note(testing
kbtree_t(int)
at-once,
/));
strlen(buf);
entry->name->base,
0x2bu
ok(ret
$
expected);
ok(bufsz
st_h2o_buf_t
strlen(decoded));
ok(bufis(buf,
Resize
bufsz,
kh_inline
117},
decoded));
(expected
source
ret.base;
strlen(encoded)
ret));
gzip,deflate\r\nAccept-Charset:
malloc(strlen(encoded)
bytes_ready
buf[bytes_ready]
ok(bytes_ready
(h->n_buckets)
ks_destroy(ks);
expected,
++element_index)
138},
bytes_to_consume));
(ident
encoded[i]
test_chunked(void)
chunked_test_runners[i](__LINE__,
world,
H2O_SOCKET_FLAG_IS_DISPOSED);
calc
\r\n5\r\nworld\r\n0\r\na:
z\r\nabcdefg,
sentinel,
\r\nffffffffffffffff\r\nabcdefg,
strlen(s)
-2);
test_chunked_consume_trailer(void)
test_request);
subtest(response,
>0
test_response);
1.0;
bytes,
{217,
tail,
header_table_size,
uv_strerror(r));
subtest(headers,
{191,
path[0]
req->_ostr_top->do_send(req->_ostr_top,
test_headers);
memcpy(out,
note(response
*sha1sum(const
depth;
test_lib__file_c(void);
SyntaxError:
sizeof(req));
0xfffffff
./test.h
0x3fffd8u
H2O_STRLIT(chunked));
is_final)
(stream->is_half_closed)
yoml_mapping_element_t
H2O_STRUCT_FROM_MEMBER(h2o_loopback_conn_t,
stream->_req_body->size);
_ostr_final,
26},
h2o_reserve_input_buffer(&conn->body,
OpenBSD
16},
frame->type
inbufs->len);
181
q6)
inbufs->base,
conn->body->size
inbufs->len;
fc,
(is_final)
req));
char)*buf
&conn->super,
&conn->_ostr_final;
f];
loopback_on_send;
0x17u
*conn)
free(conn);
(conn->req.scheme.base
0.38,
&req->res,
(conn->req.version
9
0x100;
uint8_t*)in.base;
n_tasks,
uv_run(conn->super.ctx->loop,
h2o_evloop_run(conn->super.ctx->loop);
SHA_CTX
mu3,
SHA_DIGEST_LENGTH;
hexbuf[i
4];
0xf];
hexbuf;
test_loopback(void)
conf;
h2o_config_init(&conf);
{116,
h2o_config_register_host(&conf,
test_loop,
&conf);
H2O_TIMESTR_RFC1123_LEN);
picohttpparser_h
conn->req.method
path_replace_length
*cert_file
h2o_loopback_run_loop(conn);
404);
path_prefix);
test_lib__util_c);
STR(PICOTEST_FUNCS);
(r.name->base[0]
__i;
subtest(lib/http2/hpack.c,
default_type;
test_lib__http2__hpack);
subtest(lib/file.c,
test_lib__file_c);
self->req
H2O_STRLIT(text/plain;
0x3fffe1u
*filter;
response,
etc.
req->res.content_length
arr;
SINIX
buf.len;
0x7ffffe8u
h2o_process_request
reset
1);
h2o_http2_decode_headers_payload(&payload,
ok(req.scheme.len
((hi
%s:%s:%s\n,
occurs,
reason;
nbytes
sizeof(req->res.headers));
proto
++ident)
redirect_to_dir(h2o_req_t
H2O_HTTP2_ERROR_PROTOCOL_CLOSE_IMMEDIATELY:
proto.len)
__ac_fsize(h->n_buckets)
on_ssl_handshake_complete);
on_context_init(h2o_context_t
h2o_proxy_send(h2o_req_t
*hostconf)
(y
h2o_socketpool_dispose(self->upstream.sockpool);
DOIT(type,
list)
*o
ctx);
#if
[-l
suppported));
DOIT(h2o_handler_t,
handlers);
*absent)
DOIT(h2o_filter_t,
DOIT(h2o_logger_t,
block_offset
loggers);
(o->on_context_dispose
o->on_context_dispose(o,
memset(ctx,
ctx->global_config
libcrypt
h2o_malloc(sizeof(*ctx->_module_configs)
memset(ctx->_module_configs,
config->hosts.entries
hostconf);
ctx->global_config;
on_context_dispose(ctx,
free(ctx->_module_configs);
kswr_t
&ctx->zero_timeout);
bmGs[i]
prev_sec
*j;
ctx->_timestamp_cache.tv_at.tv_sec;
*outbuf,
WITH
_mm_load_si128(S
p->e;
prev_sec)
(ctx->_timestamp_cache.value
h2o_time2str_rfc1123(ctx->_timestamp_cache.value->rfc1123,
(conn->num_responding_streams
refere,
h2o_mempool_link_shared(pool,
22},
:a\r\n\r\n,
ctx->_timestamp_cache.value);
ts->str
internal.h
H2O_STRLIT(PRI
compiler.
h2-14
text/html,
@param
*h2o_http2_npn_protocols
ret.len);
8);
H2O_STRLIT(H2_PROTOCOL_IDENTIFIER)
alpn_protocols;
H2O_HTTP2_SETTINGS_HOST
header_table_size
defined(_CRAYC)
65
4096,
pool
Modified
((payload->debug_data.len
sizeof(v6only_flag))
0x3fffd4u
enable_push
kh_destroy(32,
100,
log_access;
initial_window_size
<stdarg.h>
262144,
16384
idling
frame
H2O_TOKEN_CONTENT_LANGUAGE
equivalence;
\x00
\x00\x02
\x00\x04\x00\x00
free(et[k]);
expect_default(h2o_http2_conn_t
ok(strcmp(h2o_mimemap_get_default_type(mimemap).base,
++priolist->refcnt;
locate
priolist->list.size;
*req;
found,
h2o_malloc(sizeof(*slot));
~dwNA;
slot->refcnt
sizeof(priolist->list.entries[0]),
conn->_ostr_final.super.do_send
3)));
priolist->list.entries
OTHERWISE)
kb_intervalp(name,
H2O_HTTP2_STREAM_STATE_RECV_PSUEDO_HEADERS:
corrupt
(priolist->list.size
assert(slot->refcnt
entry->name)
--priolist->refcnt;
H2O_STRLIT(via)
*priolist)
assert(h2o_linklist_is_empty(&slot->blocked_streams));
free(priolist->list.entries);
kthread_t
run_pending_requests(h2o_http2_conn_t
*stream
sizeof(hmm_par_t));
msg.base,
h2o_linklist_unlink(&stream->_link.link);
hpack_static_table.h
++conn->num_responding_streams;
minor_version
(conn->max_processed_stream_id
0xffff)
stream->stream_id;
priolist_link(&conn->_write.streams_with_pending_data,
stream->priority.weight);
pieces
O(N))
&conn->_pending_reqs;
expntl
++slot_index)
n->prev)
km_ks_dist(20,
assert(conn->max_open_stream_id
stream->stream_id);
conn->max_open_stream_id
kh_end(conn->open_streams));
h2o_linklist_init_anchor(&slot->blocked_streams);
assert(h2o_linklist_is_linked(&stream->_link.link));
assert(&stream->_link.slot
H2O_HTTP2_STREAM_STATE_SEND_HEADERS:
concatenation
assert(stream->_link.slot
--conn->num_responding_streams;
(h2o_linklist_is_linked(&stream->_link.link))
{162,
form
close_connection_now(h2o_http2_conn_t
/dev/stdout,
*stream;
req->version);
h2o_http2_stream_close(conn,
});
mode[i];
kh_destroy(h2o_http2_stream_t,
reader;
assert(conn->_http1_req_input
(static_table_name_index
h2o_hpack_dispose_header_table(&conn->_output_header_table);
h2o_mempool_clear(&conn->_write._pools[0]);
h2o_mempool_clear(&conn->_write._pools[1]);
conn->state
IPPROTO_TCP;
buf[sizeof(www.example.com)];
H2O_HTTP2_CONN_STATE_IS_CLOSING;
H2O_STRLIT(500)
(conn->_write.wreq_in_flight)
(h2o_timeout_is_linked(&conn->_write.timeout_entry))
close_connection_now(conn);
true
enqueue_goaway_and_initiate_close(h2o_http2_conn_t
conn->max_processed_stream_id,
-errnum);
goaway);
H2O_HTTP2_CONN_STATE_IS_CLOSING);
rst_frame
h2o_http2_encode_rst_stream_frame(conn->_write.pool,
h2o_timeout_link(conn->super.ctx->loop,
&conn->super.ctx->zero_timeout,
&conn->_write.timeout_entry);
&loop->writefds,
cur
h2o_http2_window_update(&stream->output_window,
H2O_TOKEN_HTTP2_SETTINGS;
blocked_streams
succeeding
is_end_of_headers)
logger->_config_slot
(h2o_hpack_parse_headers(&stream->req,
&conn->_input_header_table,
H2O_HTTP2_ERROR_COMPRESSION);
iovec
data_header_slot
H2O_HTTP2_STREAM_STATE_RECV_HEADERS;
name_buf
src_req);
(kh_size(conn->open_streams)
H2O_HTTP2_SETTINGS_HOST.max_concurrent_streams)
H2O_HTTP2_ERROR_ENHANCE_YOUR_CALM);
printf(match:
expect_continuation_of_headers(h2o_http2_conn_t
m_b,
frame;
self->super.on_context_dispose
&h2o__null_input_buffer);
h2o_http2_decode_frame(&frame,
(frame.type
*ku)
frame.stream_id
H2O_HTTP2_ERROR_PROTOCOL;
link_to_pending(sock);
conn,
frame.payload,
4},
H2O_HTTP2_FRAME_FLAG_END_HEADERS)
consumed)
(h2o_http2_window_get_window(window)
DEC(__IBMC__/100)
r.name->base,
H2O_HTTP2_SETTINGS_HOST.initial_window_size)
{5,
(frame->stream_id
(req->entity.base
in;
number
dependency;
h2o_http2_decode_data_payload(&payload,
frame->stream_id);
stream)
init_openssl(void)
H2O_HTTP2_ERROR_STREAM_CLOSED);
H2O_HTTP2_STREAM_STATE_RECV_BODY)
122},
h2o_reserve_input_buffer(&stream->_req_body,
248},
payload.length);
functions.
((frame->flags
stream->req.entity
consume
update_input_window(h2o_http2_conn_t
frame->length);
*_tle)
kb_interval(name,
h2o_http2_headers_payload_t
log(x)
expect_continuation_of_headers;
(frame->flags
resume_send(h2o_http2_conn_t
(h2o_http2_window_get_window(&conn->_write.window)
line_end
(conn->_write.streams_with_pending_data.list.size
window;
handle_settings_frame(h2o_http2_conn_t
(h2o_http2_update_peer_settings(&conn->peer_settings,
types
ack
kh_foreach(h,
dec.consume_trailer
H2O_HTTP2_FRAME_HEADER_SIZE);
H2O_HTTP2_FRAME_FLAG_ACK,
h2o_buf_init(header_buf,
{235,
req.tv_nsec
H2O_HTTP2_FRAME_HEADER_SIZE));
fp->cache
conn->peer_settings.initial_window_size
ARM
0xf9u
h2o_http2_window_update_payload_t
H2O_HTTP2_ERROR_FLOW_CONTROL);
handle_ping_frame(h2o_http2_conn_t
arg->msg,
PROCUREMENT
h2o_http2_ping_payload_t
pong
h2o_http2_encode_ping_frame(conn->_write.pool,
pong);
handle_rst_stream_frame(h2o_http2_conn_t
unexpected
[A-Z].
req->scheme
handle_headers_frame,
conn->max_processed_stream_id
handle_frame_skip,
PRIORITY
handle_settings_frame,
(while
29)
sizeof(payload->data))
245},
handle_frame_as_protocol_error,
PUSH_PROMISE
handle_goaway_frame,
handle_frame_as_protocol_error
c)
-15
sizeof(FRAME_HANDLERS)
sprintf(host2,
sizeof(FRAME_HANDLERS[0]))
provided
H2O_TOKEN_CONNECTION
(value_is_indexed)
FRAME_HANDLERS[frame.type](conn,
sizeof(key_src),
(memcmp(src,
__KB_GET_AUX1(name,
h2o_http2_window_get_window(&conn->_write.window)
CONNECTION_PREFACE.len;
parse_input(h2o_http2_conn_t
http2_max_concurrent_requests_per_connection
h2o_process_request(&conn->req);
http2_max_concurrent_requests_per_connection)
(perform_early_exit
wret
177},
conn->_read_expect(conn,
(uint8_t*)conn->sock->input->bytes,
hp->a[l][k];
(int)-ret);
req.headers.entries[0].name->len,
h2o_socket_is_reading(conn->sock))
h2o_socket_read_stop(conn->sock);
h2o_http2_conn_t
ksw_global(int
*_conn,
reqsize)
conn->_http1_req_input
h2o_init_input_buffer(&sock->input);
handle_input
g->ymin)
buf)
conn->_write.bufs.size
&stream->_link.slot->active_streams;
on_write_complete(h2o_socket_t
memcpy(ret->base,
*server_name)
assert(conn->_write.wreq_in_flight);
h2o_mempool_clear(conn->_write._pools
proceed
H2O_HTTP2_CONN_STATE_OPEN)
h2o_http2_stream_has_pending_data(stream));
conn->_write.wreq_in_flight
necessary,
H2O_STRUCT_FROM_MEMBER(h2o_http2_conn_t,
_write.timeout_entry,
52
(n
conn->_write.wreq_in_flight);
168},
conn->_write.write_once_more);
h2o_linklist_is_empty(&slot->active_streams))
assert(h2o_http2_window_get_window(&conn->_write.window)
DonePush;
DonePush:
strtoint64(const
(conn->_write.bufs.size
{197,
conn->_write.bufs.entries,
(int)conn->_write.bufs.size,
on_context_dispose;
info_version[]
ACTION
self->super.on_req
on_write_complete);
flip
authorizatio,
memset(&conn->_write.bufs,
offsetof(h2o_http2_conn_t,
H2O_HTTP2_CONN_STATE_OPEN;
max_num_entries)
H2O_HTTP2_SETTINGS_DEFAULT.header_table_size;
h2o_buf_init(H2O_STRLIT(\x82\x86\x84\x41\x0f\x77\x77\x77\x2e\x65\x78\x61\x6d\x70\x6c\x65\x2e\x63\x6f\x6d)),
&H2O_HTTP2_SETTINGS_HOST);
CURLOPT_WRITEDATA,
fp->type
conn->_output_header_table.hpack_capacity
H2O_HTTP2_SETTINGS_HOST.header_table_size;
conn->_write._pools;
emit_writereq;
YOML_TYPE_MAPPING:
h2o_http2_window_init(&conn->_write.window,
&conn->peer_settings);
h2o_mempool_init(conn->_write._pools
shutdown_ssl(sock,
create_conn(ctx,
(void*)&sock->peername.addr,
sock->peername.len);
priority
h2o_mempool_link_shared(h2o_mempool_t
*http2conn
create_conn(req->conn->ctx,
(self->client
h2o_http1_conn_t
{104,
*req_conn
crc);
settings_decoded;
assert(req->version
uv_loop_close(test_loop);
0x200);
HTTP2-Settings
req->headers.entries[connection_index].value.len,
decode
max_capacity
*y
((settings_index
h2o_decode_base64url(&req->pool,
180
ksprintf()
182
req->headers.entries[settings_index].value.len)).base
*mimemap;
vend<<2|dir,
settings_decoded.len)
h2o_http2_stream_open(http2conn,
elements[1];
Switching
SyntaxError;
Protocols;
C[i],
parse(abc);
H2O_STRLIT(h2c));
(h2o_buf_t*)&SETTINGS_HOST_BIN,
26
writing
h2o__internal_h
decode32u(const
value);
CHUNKED_IN_CHUNK_EXT,
src[1];
cursor));
conn->_pending_reqs.next);
24
req)
memset(stream,
offsetof(h2o_http2_stream_t,
ELEMENT_TYPE_TIMESTAMP);
stream->_ostr_final.do_send
h2o_http2_window_init(&stream->input_window,
memcpy(&stream->priority,
{137,
priority,
req->authority.len,
ktf_steal_work(w->t))
fp->cache_size)
qlen=19,
h2o_init_input_buffer(&stream->_req_body);
125
h2o_init_request(&stream->req,
161
(hpack_header_table->num_entries
stream->req.version
h2o_malloc(sizeof(*listener));
memset(&stream->req.upgrade,
sizeof(stream->req.upgrade));
sizeof(kurl_t));
stream->req._ostr_top
h2o_add_header(pool,
(stream->stream_id
h2o_dispose_input_buffer(&conn->_http1_req_input);
h2o_loopback_conn_t;
queued
H2O_HTTP2_STREAM_STATE_END_STREAM;
*ks
calc_max_payload_size(h2o_http2_conn_t
switching
Transfer-Encoding
conn_max,
28},
0x2u
*generator)
serve
((conn_max
h2o_http2_window_get_window(&stream->output_window))
DEC(__PGIC__)
sz_min(sz_min(conn_max,
encode_data_header_and_consume_window(h2o_http2_conn_t
*header,
assert(header
152},
is_head;
h2o_http2_encode_frame_header(header,
free(fp);
h2o_http2_window_consume_window(&conn->_write.window,
Boyer-Moore
h2o_http2_window_consume_window(&stream->output_window,
*send_data(h2o_http2_conn_t
payload_size
(bufs->len
_protocols;
entry->name;
fill_size;
(payload_size
max_payload_size)
uint64_t
H2O_STRLIT(404)
encode_data_header_and_consume_window(conn,
calc_max_payload_size(conn,
p3)
f_Chebyquad(int
h2o_buf_init(data_header_slot,
payload
(nevents
sz_min(max_payload_size,
(kurl_t*)calloc(1,
bufs->len);
*h2o_create_handler(h2o_hostconf_t
ctx->_timestamp_cache.tv_at;
h2o_buf_init(bufs->base,
bufs->base
h2o_get_timestamp(conn->super.ctx,
&ts);
h2o_http2_conn_enqueue_write(
second
52,
h2o_http2_stream_reset
(bufcnt
self->super.dispose
kswr_t::score
(h2o_vector_t*)&stream->_data,
OK;
memcpy(stream->_data.entries,
0x3333333333333333ull)
sizeof(h2o_buf_t)
rpath_len));
H2O_HTTP2_ERROR_INCOMPLETE)
(stream->_data.size
((l
H2O_HTTP2_STREAM_STATE_END_STREAM);
states
(nextbuf
stream->_data.entries
stream->_data.entries)
nextbuf,
newsize);
newsize;
h2o_add_header(h2o_mempool_t
H2O_HTTP2_STREAM_STATE_END_STREAM)
HEADER_TABLE_OFFSET
0xffffffffu
-1.2,
st_h2o_decode_header_result_t
hpack_huffman_table.h
value_is_part_of_static_table(const
**le,
&h2o_hpack_static_table[sizeof(h2o_hpack_static_table)
buf->base
prefix_bits)
mult;
(uint8_t)*(*src)++
memset(&dec,
prefix_max;
148
'\\';
*value,
200)
(value
H2O_HTTP2_FRAME_FLAG_PADDED)
(==
2**28)
*src
on_context_init;
url.len
127)
45},
((*(*src)++
*state,
configure
nghttp2_huff_decode
(name
write_cb(char
NGHTTP2_HUFF_FAIL)
delta)
(uint8_t*)H2O_STRLIT(www.example.com));
NGHTTP2_HUFF_ACCEPTED)
header_table_index;
*src_end
maybe_eos
sublicense,
H2O_TOKEN_HOST,
--i,
H2O_HTTP2_STREAM_STATE_REQ_PENDING;
*dst_buf
&state,
&maybe_eos))
H2O_STRLIT()
size_add
0,
low,
max_concurrent_streams,
kb_str_cmp)
0xf,
approach
h2o_hpack_dispose_header_table(&conn->_input_header_table);
self->upstream.config
0xfffffeau
maybe_eos)
is_huffman
0x80)
((len
a->qe,
src_end,
7))
decode_huffman(pool,
len))
TCP
ret->base[len]
method;
*table,
0x3ffffe9u
entry_index
rem;
table->entry_start_index)
YOML_TYPE_SCALAR,
table->entry_capacity;
entry_index;
aux->response[n-2]
length);
assert(entry->name
header_table_evict_one(h2o_hpack_header_table_t
27},
header_table_get(table,
entry->name->len
h2o_buf_is_token(entry->name))
STR(...)
h2o_mempool_release_shared(entry->value);
*header_table_add(h2o_hpack_header_table_t
size_add,
(table->num_entries
table->hpack_capacity)
++handler)
(size_add
size_add;
*value
full
h2o_linklist_unlink(&timeout->_link);
table->num_entries
(new_capacity
req->method
release
st_h2o_hpack_header_table_entry_t));
40;
printf(%s,
++dst_index;
(src_index
table->num_entries);
memset(new_entries
free(config->hosts.entries);
table->num_entries));
204
kbi_DNAcount64(uint64_t
table->entry_capacity
around,
a[j];
new_capacity;
i]
*colon_in_test_name
decode_header(h2o_mempool_t
x[20],
*hpack_header_table,
value_is_indexed
do_index
**out,
*src,
((index
64)
++*src;
6))
indexing
hpack_header_table->hpack_max_capacity)
{194,
ftp,
hpack_header_table->hpack_size
hpack_header_table->hpack_capacity)
(block_end
stepping
value?)
s2.s
req->headers.entries,
1].name;
distribution.
(h2o_buf_t*)&h2o_hpack_static_table[index
258EAFA5-E914-47DA-95CA-C5AB0DC85B11
entry->value;
result->value);
predefined
interned
((name_token
logger
h2o_lookup_token(result->name->base,
necessary)
value_is_indexed)
((result->value
init_core_configurators(config);
*hostconf
header_table_add(hpack_header_table,
h2o_vector_t;
result->value->len
NB:
result->name;
result->value;
assert(100
999);
properties
0xfffffebu
st)
st:
COMMON_CODE(9,
COMMON_CODE(10,
400);
COMMON_CODE(13,
n_col
{23,
sprintf((char*)dst,
*header_table)
199},
header_table->entries
header_table->entry_capacity;
seq->comment.l
(--header_table->num_entries
(start
(*allow_psuedo)
validate
inbuf;
(req->authority.base
req->authority
h2o_http1_conn_t;
&H2O_TOKEN_METHOD->buf)
nevents,
likely(*buf
&H2O_TOKEN_SCHEME->buf)
(SSL_CTX_use_certificate_file(ssl_ctx,
(req->scheme.base
(draft
8.1.2.6
closing
&H2O_TOKEN_TRANSFER_ENCODING->buf)
HTTP/2);
*s;
&req->headers,
r.name),
r.value->len);
'\015'))
r.name->len,
prefix_bits))
priolist_unlink(&conn->_write.streams_with_pending_data,
MAX_ENCODE_INT_LENGTH
>>=
bits_left
nghttp2_huff_sym
*src++;
on_head);
(bits_left
(b,
SOCKET.
sym->nbits);
kg_del_v_g(g,
sym->nbits;
(isspace(ks->buf[i]))
_dst;
{148,
computed
try
memcpy(rpath
#define
(hufflen
7);
free(self);
_mm_adds_epu8(h,
huffbuf,
hufflen;
as-is
static_table_name_index,
name_is_token
h2o_memis(name->base,
strict-transport-securit,
src[4];
matched!
*prep,
value->len,
H2O_TOKEN_VARY;
*msg);
((c&2)?
(uint32_t)(header_table->num_entries
HEADER_TABLE_OFFSET),
Next:
a[k]
++header_table_index;
(header_table_index
*name_token
><[kh_key(kh_val(g,
static_table_name_index
been
name->base,
(high
name->len);
value->base,
above)
alloc_buf(NULL,
memset(handler,
end,
h2o_header_t
201},
H2O_STRLIT(transfer-encoding)))
Date:
61},
block_end;
server_name->len
header_end
{181,
res->headers.size;
header_end;
max_header_size
DEC(SDCC
header->value.len
(max_header_size
defined(__QNX__)
max_frame_size)
bucket,
h2o_mempool_alloc(pool,
**desc);
max_capacity);
free(host_config->hostname.base);
BSD
(uint8_t*)ret.base;
date_value;
req.headers.entries[0].value.len,
failed);
cur_frame,
path);
H2O_HTTP2_FRAME_HEADER_SIZE,
end_headers
create_client(ctx,
res->status);
kputsn(Authorization:
kind
printf(first
Date,
date_value
&date_value);
0x7fff1u
H2O_TOKEN_COOKIE
EMIT_HEADER(0);
EMIT_HEADER
(char*)dst
correct)
h2o_buf_init(NULL,
2010
first_req,
free(ks.s);
second_req,
header_table;
allow_psuedo;
(payload->window_size_increment
int_packed_t
table->num_entries,
sizeof(header_table));
h2o_add_header_by_str(h2o_mempool_t
header_table.hpack_capacity
4096;
*in,
memset(&req,
FSA
h2o_mempool_init(&req.pool);
sizeof(*timeout));
first_req;
h2o_hpack_parse_headers(&req,
&header_table,
c)));
ok(req.authority.len
ok(req.method.len
pool->_first_chunk.next
ok(memcmp(req.scheme.base,
b[ib])
(s[i]
0x7fffdfu
ok(h2o_lcstris(req.headers.entries[0].name->base,
(h->size<<1))
ok(h2o_lcstris(req.headers.entries[0].value.base,
0xffffff5u
st_h2o_uv_socket_t
2008-09-11
H2O_STRLIT(/index.html))
H2O_STRLIT(custom-key)));
12,
kbtree_##name##_t
expected_len)
(he->Q0
h2o_hpack_flatten_headers(pool,
file);
H2O_HTTP2_SETTINGS_DEFAULT.max_frame_size,
kputsn(const
(uint8_t*)flattened.base,
flattened.len,
*input;
87
195
performance?
&H2O_HTTP2_SETTINGS_DEFAULT)
ok(h2o_memis(frame.payload,
test_lib__http2__hpack(void)
h2o_buf_init(H2O_STRLIT(input));
output);
ok(p
TEST(\x03,
127);
TEST(\x7f\x01,
128);
TEST(\x7f\x7f,
254);
kh_key(g,
TEST(\x7f\x81\x00,
TEST(\x7f\x80\x01,
prep
TEST(\x7f\xff\xff\xff\x7f,
TEST(\x7f,
**_cigar);
indent();
h2o_http2_frame_t;
TEST(\x7f\xff,
heuristic
TEST(\x7f\xff\xff\xff\xff,
TEST
huffcode.len);
ok(strcmp(decoded->base,
www.example.com)
(literal
Tsujikawa
indexing));
result;
&result,
sock->uv.stream
ok(result.name->len
ok(strcmp(result.name->base,
msec
ok(result.value->len
custom-header)
h2o_buf_init(H2O_STRLIT(\x04\x0c\x2f\x73\x61\x6d\x70\x6c\x65\x2f\x70\x61\x74\x68));
(b)
&H2O_TOKEN_PATH->buf);
indexed));
kh_int_hash_equal)
h2o_buf_init(H2O_STRLIT(\x10\x08\x70\x61\x73\x73\x77\x6f\x72\x64\x06\x73\x65\x63\x72\x65\x74));
sizeof(*ctx));
secret)
note(request
test_request(
h2o_buf_init(H2O_STRLIT(\x82\x87\x85\xbf\x40\x0a\x63\x75\x73\x74\x6f\x6d\x2d\x6b\x65\x79\x0c\x63\x75\x73\x74\x6f\x6d\x2d\x76\x61\x6c\x75\x65)));
h2o_http1_accept(ctx->ctx,
h2o_buf_init(H2O_STRLIT(\x82\x87\x85\xbf\x40\x88\x25\xa8\x49\xe9\x5b\xa9\x7d\x7f\x89\x25\xa8\x49\xe9\x5b\xb8\xe8\xb4\xbf)));
ok(l
huffcode.base,
huffcode.len)
sizeof(res));
res.status
302;
*req
defined(__TINYC__)
also
res.reason
he0->A[k][l];
Found;
&res.headers,
H2O_TOKEN_CACHE_CONTROL,
buf_end)
Oct
transitions
GMT));
H2O_STRLIT(https://www.example.com));
SAIS_BWT
51
__x
sec\n,
307;
h2o_buf_init(H2O_STRLIT(\x48\x03\x33\x30\x37\xc1\xc0\xbf)),
|
continuing
h2o_buf_init(H2O_STRLIT(\x88\xc1\x61\x1d\x4d\x6f\x6e\x2c\x20\x32\x31\x20\x4f\x63\x74\x20\x32\x30\x31\x33\x20\x32\x30\x3a\x31\x33\x3a\x32\x32\x20\x47\x4d\x54\xc0\x5a\x04\x67\x7a\x69\x70\x77\x38\x66\x6f\x6f\x3d\x41\x53\x44\x4a\x4b\x48\x51\x4b\x42\x5a\x58\x4f\x51\x57\x45\x4f\x50\x49\x55\x41\x58\x51\x57\x45\x4f\x49\x55\x3b\x20\x6d\x61\x78\x2d\x61\x67\x65\x3d\x33\x36\x30\x30\x3b\x20\x76\x65\x72\x73\x69\x6f\x6e\x3d\x31)));
decode32u(src
0x14u
22
__attribute__
max))
entry->value->len))
UINT32_MAX);
handle_content_length_entity_read(h2o_http1_conn_t
SET(ENABLE_PUSH,
0x61u
dup(fileno(fp));
SET(INITIAL_WINDOW_SIZE,
0x7fffffff);
XL
16777215);
0x5u
memcpy(req->buf.base,
1..%d\n,
pat,
SET
KO_PIPE
h2o_fatal(invalid
client_ctx->zero_timeout
*allocate_frame(h2o_buf_t
*outbuf
h2o_buf_init(h2o_mempool_alloc(pool,
q->mdiff
0x66u
out[j++]
length),
H2O_HTTP2_FRAME_TYPE_RST_STREAM,
is_ack
H2O_HTTP2_FRAME_TYPE_GOAWAY,
H2O_HTTP2_FRAME_TYPE_WINDOW_UPDATE,
reqbufcnt;
KS_SEP_MAX
frame->length
frame->flags
host_settings->max_frame_size)
H2O_HTTP2_ERROR_FRAME_SIZE;
244
frame->length;
0.0
(hp
padding_length;
(add_size
padding_length
frame->payload[0];
sizeof(*self),
padding_length)
frame->payload;
openssl_thread_lock_callback(int
padlen;
padlen)
205
H2O_HTTP2_FRAME_FLAG_PRIORITY)
(uint16_t)*src++
sizeof(payload->error_code))
payload->error_code
memcpy(payload->data,
sizeof(payload->data));
decode32u(frame->payload
H2O_TOKEN_IF_UNMODIFIED_SINCE;
sizeof(www.example.com)
(c
payload->debug_data.base
dispose_host_config(h2o_hostconf_t
source:
@
(d)
__cplusplus
__KB_GET(name,
76b3ba2,
hufflen);
184},
Tatsuhiro
_kswq_t
NGHTTP2_HUFF_ACCEPTED
leaf
bitwise
16
kbit.h
nghttp2_huff_decode_flag
nghttp2_huff_decode;
nbits;
Huffman
huff_sym_table[]
0x7fffd8u
{157,
0xfffffe3u
ELEMENT_TYPE_REQUEST_LINE:
Twister
ksprintf(s,
0xfffffe5u
8|
0xfffffe6u
{132,
memset(filter,
innerHash[HASH_LENGTH];
0xfffffe7u
0x3ffffffcu
test_chunked_at_once(int
0xfffffeeu
0xfffffefu
sizeof(stream->priority));
0xffffff3u
0xffffff6u
0xffffff8u
0xffau
0xf8u
__KB_KEY(key_t,
&error);
0x18u
0x0u
0x1u
0x1au
more
0x1cu
b->off_ptr
0x1du
0x1fu
h->value.base);
H2O_TOKEN_LAST_MODIFIED,
argv[1];
0x7ffcu
0x20u
0xffbu
0x21u
0x5fu
init_request(conn,
*emit_digits(char
((ssl_ctx
0x63u
conn->_timeout_entry.cb
{24,
0x64u
seed,
224
0x65u
(getaddrinfo(host,
H2O_HTTP2_FRAME_TYPE_PING,
0x68u
*x,
69},
encode_huffman(huffbuf,
0x69u
skip;
0x6cu
ignored.
0x6eu
0xfcu
(xlen
0x73u
*new_vals
0xfdu
0x7fff0u
0x7ffdu
&sock->super.ssl->input.encrypted))
hp->n;
st_h2o_http1client_t
delimiter,
0x23u
top
HEADER_TABLE_ENTRY_SIZE_OFFSET,
0x24u
0x25u
*h2o_http2_alpn_protocols
0x6u
0x9u
0x78u
0x7au
h2o_init_input_buffer(&self->last_content_before_send);
Found,
0x7bu
0x3ffdu
0xfffe6u
215
0x3fffd2u
0x3fffd6u
0x7fffdeu
0xffffebu
SSL_write(sock->ssl->ssl,
(sizeof(pool->chunks->bytes)
sb
kb_delp(name,
0x3fffd7u
0x7fffe3u
post-condition
'\r';
0x7fffe4u
0x55555555);
0x3fffd9u
kurl_init(void)
0x7fffe6u
62;
0x7fffe7u
(b)=t;
0x1fffddu
expiration
0x7fffdbu
0xfffe9u
COPY(buf)
H2O_STRLIT(server)
le
0x3fffdcu
0x7fffe9u
0x1fffdeu
tm
0x7fffeau
0x3fffddu
0x3fffdbu
0x3fffdfu
node->anchor
0x7fffebu
0x7fffecu
kseq_read(kseq_t
0x7fffefu
0xfffeau
CLAIM,
sizeof(*self->vars));
0x3fffe2u
TYPE_MAP(ch,
0x3fffe5u
(generator
0x7ffff1u
conn->_input_header_table.hpack_max_capacity
0x7ffffdeu
strdup(*p?
0x1ffffedu
0x10000?
conn->max_open_stream_id);
0x7fff2u
KHASH_SET_INIT_INT64(name)
0x1fffe3u
kf_betai(a,
0x7ffffe0u
0x7ffffe1u
0x3ffffe7u
ctx
0xfffff2u
0x3ffffe8u
0x7ffffe3u
{42,
sha1nfo
198},
0xfffecu
0xfffedu
0x1fffe8u
H2O_TOKEN_REFRESH;
0x7ffff3u
0x3fffeau
0x3fffebu
0xfffff4u
fp->errcode
0x7ffff4u
0x7ffffe6u
0x3ffffecu
0x3ffffedu
*ssl_ctx
0x7ffffe7u
0x7ffffeeu
0x00,
0},
{7,
{11,
is_dir
HTTP/2
{19,
44
{25,
{28,
delim,
kmemmem(data,
{64,
0x01,
111},
iter);
H2O_TO_STR(n)
116},
{13,
{14,
(*dispose)(void
nfail++;
{1,
(q
{22,
{3,
{10,
src_index
2
$w
{41,
gapo
{56,
i
37},
47},
52},
rst_frame);
55},
56},
11
KO_HTTP
13
lo;
itself
14
{27,
kroundup32(s->m);
--i);
{29,
radius;
{30,
&timeout_in_secs)
{37,
{43,
{50,
{53,
Clang
23
h2o_file_handler_t
65},
self->upstream.config.keepalive_timeout);
'g':
95},
*ma
98},
24,
102},
104},
rest
110},
112},
*is_dir
25
28
30
default).
218
67},
34
37
242},
39
location
40
{45,
H2O_CONFIGURATOR_FLAG_EXPECT_SCALAR,
{54,
{55,
{60,
arg)))
ubyte_t*)_pat;
{63,
{66,
tmp);
{67,
{72,
70},
73},
75},
argv);
81},
83},
(sizeof('\n')
h2o_malloc(offsetof(h2o_input_buffer_t,
43
46
http:/abc,
Sep
exit_loop
47
50
(h2o_tolower(name[26]))
56
h2o_socket_peername_t;
{195,
87},
(h2o_socket_is_reading(&sock->super))
continued
__VISUALDSPVERSION__
89},
107},
118},
--j;
yoml_find_anchor(node->data.mapping.elements[i].key,
121},
h2o_http2_decode_goaway_payload(&payload,
57
kb_del_##name(kbtree_##name##_t
59
59},
90},
defined(__osf__)
HEX(__VISUALDSPVERSION__>>16
{78,
68
KBTREE_INIT(name,
{81,
on_complete(void
entry->value->base,
69
71
72
https://example.com/abc,
41},
0.30,
63},
n_slots
{82,
43},
open
124},
224},
connection.c
{83,
var,
{85,
76
77
62},
{87,
80
64},
91},
85
{91,
pool;
defined(__COMPILER_VER__)
{92,
83
84
125},
107
{94,
88
{95,
kb_size(b)
{96,
92
94
{98,
{122,
{102,
{105,
c->super.enter
{112,
opposite
{119,
push
{153,
92},
localt.tm_min,
0.19,
hp->e[][]
195},
{103,
{113,
{135,
H2O_STRLIT(upgrade)))
*tmp;
{142,
khint32_t;
96
(ret.base
H2O_STRLIT(GET)))
162},
{108,
{109,
__ac_set_isboth_false(h->flags,
97
98
*t,
172},
106
108
{114,
ARE
{115,
{118,
{236,
0.37,
{123,
_flags;
{130,
249},
(uint64_t*)realloc(b,
{136,
{146,
h2o_mempool_alloc(conn->_write.pool,
111
ks_heapsort_##name(size_t
{124,
check_header(h2o_res_t
115
116
117
132},
133},
y[0][j]
136},
154},
156},
hmm_add_expect(const
126
130
131
133
**description;
{138,
++(x))
{144,
{147,
{150,
note(encode_huffman);
{166,
{171,
s->state.w[i]
{174,
185},
conf->global->_num_config_slots++;
0x10000;
189},
232},
_timeout;
{0,
ok(memcmp(buf,
{152,
&header->value);
135
cur_size,
free(list.entries);
136
137
142
forbidden);
{179,
assert(!FIXME);
*timeout_entry)
1},
ratio
135},
143
BE
setsockopt(listener->fd,
*msg)
137},
139},
149
max{H(i,j)-q,
150
151
**A,
152
193},
153
{158,
{161,
kb_interval_##name(kbtree_##name##_t
{164,
{167,
{172,
**ret;
pointer
{177,
{182,
*ssl_ctx;
{185,
((int)dataLength
154
149},
155},
handle_data_frame,
157},
min_guarantee);
on_config_timeout_io,
165},
whence)
174},
182},
157
158
*p)
159
**logger
162
defined(__VISUALDSPVERSION__)
(h
163
(v).a
165
167
169
response
188},
197},
{176,
{178,
{183,
{184,
{186,
{187,
kqueue();
sz;
h2o_http1client_t;
9},
145},
159},
Similar
free(self->virtual_path.base);
171
172
hints.ai_socktype
inet_addr(host);
173
174
176
179
171},
206},
236},
237},
{193,
free(node);
str_data
{203,
*cmd)
{209,
(x
fast
{216,
{238,
SAIS_MAIN(T,
(nend
235},
conn->upgrade.cb;
h2o_hostconf_t;
186
amATbl[2]
{213,
sizeof(khint32_t));
{225,
&pool->_interval_cb.entry);
{239,
210},
0x0000003F;
213},
*protocols)
{90,
218},
240},
on_head;
192
H2O_STRLIT(Mon,
194
203},
referring
203
{211,
<netdb.h>
{214,
h2o_config_print_error(h2o_configurator_command_t
{215,
{218,
_USE_KNETFILE
{219,
__KHASH_TYPE(name,
anchor->next
{226,
{228,
initiate
num_tests;
{247,
{250,
222},
223},
241},
244},
drawn
209
h2o_consume_input_buffer(&client->sock->input,
210
211
213
h2o_buf_init(msg,
_pending_reqs;
214
216
&=
217
220
221
url.base
222
223
matched.
called)
254},
at[k][l]
{237,
assert(node->type
{241,
(bb
{242,
defined(__AIX__)
{248,
{251,
3},
5},
h2o_socket_write(conn->sock,
assert(self->buf_sending->size
(http://nbpfaus.net/~pfau/ftplib/).
candidates
11},
vsnprintf(s->s
*self)
kmp_alloc_##name(mp)
14},
bound
226
227
229
230
231
req->path.base,
*top,
233
*end
i+1;
235
20},
23},
25},
years
(inflate(&zs,
220},
H2O_HTTP2_STREAM_STATE_SEND_BODY:
241
242
key_file,
249
*n_calls;
250
10},
on_body_timeout;
13},
253
254
h2o_hpack_static_table[61]
H2O_TOKEN_METHOD,
nmemb,
H2O_STRLIT(POST)
get_token_to_eol(buf,
H2O_TOKEN_PATH,
efficiency,
H2O_TOKEN_ACCEPT_CHARSET,
offset,
H2O_TOKEN_ACCEPT_ENCODING,
EDIT!
H2O_STRLIT(gzip,
H2O_TOKEN_ACCEPT_RANGES,
H2O_TOKEN_ACCEPT,
H2O_TOKEN_ACCESS_CONTROL_ALLOW_ORIGIN,
abort();
s->l;
H2O_TOKEN_AUTHORIZATION,
H2O_TOKEN_CONTENT_DISPOSITION,
h2o_socket_write(h2o_socket_t
chunk
H2O_TOKEN_CONTENT_LANGUAGE,
H2O_TOKEN_CONTENT_RANGE,
H2O_TOKEN_ETAG,
x[k]
H2O_TOKEN_EXPIRES,
setup_ssl(const
H2O_TOKEN_FROM,
mimemap->default_type
{69,
H2O_TOKEN_IF_MODIFIED_SINCE,
H2O_TOKEN_IF_NONE_MATCH,
H2O_TOKEN_LINK,
(6-rest)
H2O_TOKEN_MAX_FORWARDS,
((n)>>28
H2O_TOKEN_PROXY_AUTHENTICATE,
pthread_mutex_lock(&pool->_mutex);
H2O_TOKEN_REFERER,
37);
H2O_TOKEN_SERVER,
H2O_TOKEN_TRANSFER_ENCODING,
H2O_TOKEN_USER_AGENT,
rp_generator_t
headers_len);
bufs[2];
up_req;
rp_handler_t
virtual_path;
(expect
non-NULL
Mori
calls
config.use_keepalive
_vars_stack[H2O_CONFIGURATOR_NUM_LEVELS
path_prefix,
:65535\r\nconnection:
keep-alive\r\ncontent-length:
refres,
*encode_header(h2o_hpack_header_table_t
18446744073709551615\r\n\r\n)
Complete:
req->method.len
mime_type);
sock;
result);
INTERRUPTION)
path_prefix.len
sizeof(double));
host.len;
req->headers.size;
(desc
p->end_offset,
h->name->len
(element->type)
[key,
h->value.len
-Wdeprecated-declarations
buf.base;
HTTP/1.1\r\nconnection:
(int)req->method.len,
(int)path_prefix.len,
path_prefix.base,
pasv_port);
req->path.base
*header_table_get(h2o_hpack_header_table_t
80)
mu1);
(int)host.len,
content-length:
((h2o_token_t*)h->name)->is_connection_specific)
h->name->base,
(int)h->value.len,
assert(buf.len
version
*self
BLOCK_SIZE
(void*)generator;
h2o_http1client_cancel(self->client);
**x,
fv
&self->client->sock->input
test_len)
(self->buf_sending->size
destroy_configurator(h2o_configurator_t
h2o_buf_init(self->buf_sending->bytes,
ku->off0
do_proceed(h2o_generator_t
do_send(self);
h2o_socketpool_set_timeout(self->upstream.sockpool,
i))
client->data;
self->last_content_before_send
self->client->sock->input;
502,
self->src_req->res.status
self->src_req->res.reason
h2o_strdup(&self->src_req->pool,
msg.len).base;
h2o_lookup_token(headers[i].name,
H2O_TIMESTR_LOG_LEN
(token->is_connection_specific)
sizeof(dec));
(self->src_req->res.content_length
memory
h2o_strtosize(headers[i].value,
&self->src_req->res.headers,
h2o_start_response(self->src_req,
&self->super);
*_fd
self->up_req.is_head;
backoff
on_generator_dispose(void
&loop->super;
q4
*_self)
0x3ffffffeu
h2o_dispose_input_buffer(&self->buf_sending);
on_generator_dispose);
dx[k]
1e-6
do_proceed;
h?
206);
req->entity;
self->up_req.is_head
h2o_memis(req->method.base,
path_prefix)
proxy_send_prepare(req,
h2o_http1client_connect(client_ctx,
linear
h2o_http1client_connect_with_pool(client_ctx,
(self->virtual_path.len
close(self->fd);
self->virtual_path.len)
client_ctx
'|')
sizeof(sock->_wreq.smallbufs[0]))
handshake_cb
h2o_proxy_send_with_pool(req,
client_ctx,
self->upstream.path);
self->upstream.host,
self->upstream.port,
0.)
++shift)
((size
*client_ctx
h2o_malloc(sizeof(*ctx)
socketpool
self->vars->use_keepalive
__kb_delp_aux_##name(kbtree_##name##_t
UINT64_MAX)
ctx->loop;
s->innerHash[i]);
variable
on_context_dispose(h2o_handler_t
free(self->upstream.sockpool);
NUL-terminated
sizeof(*self));
on_handler_dispose;
self->virtual_path
virtual_path,
THE
(config->use_keepalive)
real_path,
Iterator
on_config_timeout_io(h2o_configurator_command_t
*body,
(void*)cmd->configurator;
Also
Software),
%
_bgzf_close(fp->fp);
239
&self->vars->io_timeout);
on_config_timeout_keepalive(h2o_configurator_command_t
(fp
&self->vars->keepalive_timeout);
end;
OFF,ON);
aux->max<<1
(int)ret;
patterns
handle_headers_frame(h2o_http2_conn_t
node->data.scalar,
71},
node->data.scalar);
ErrExit;
__KB_DEL(name,
only
on_body;
supported);
h2o_proxy_register_reverse_proxy(ctx->hostconf,
SAIS_MAIN
req->_generator->proceed(req->_generator,
ctx->path
ctx->path->base
self->vars);
(void*)&sock->super.peername.addr,
on_config_enter(h2o_configurator_t
memcpy(self->vars
--self->vars;
(void*)h2o_config_create_configurator(conf,
client->sockpool
FD_ISSET(sock->fd,
c->vars
__kb_get_first(uint32_t,
c->_vars_stack;
sprintf(p,
5000;
test_lib__util_c(void)
2000;
union
on_config_exit;
proxy.reverse.url,
on_config_reverse_url,
boolean
qlen;
connections,
conditions
upstream
send_chunk(h2o_ostream_t
OFF));
milliseconds,
5000));
proxy.timeout.keepalive,
timeout
idle
complementary
2000));
msg);
lower
*pool)
h2o_init_input_buffer(&self->client->sock->input);
pool->directs
errstr);
pool->shared_refs
pool->_first_chunk.offset
